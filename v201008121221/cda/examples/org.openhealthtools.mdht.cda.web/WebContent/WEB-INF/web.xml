<?xml version="1.0" encoding="UTF-8"?>
<!--

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1999-2007 Sun Microsystems, Inc. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common Development
and Distribution License("CDDL") (collectively, the "License").  You
may not use this file except in compliance with the License. You can obtain
a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
language governing permissions and limitations under the License.

When distributing the software, include this License Header Notice in each
file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
Sun designates this particular file as subject to the "Classpath" exception
as provided by Sun in the GPL Version 2 section of the License file that
accompanied this code.  If applicable, add the following below the License
Header, with the fields enclosed by brackets [] replaced by your own
identifying information: "Portions Copyrighted [year]
[name of copyright owner]"

Contributor(s):

If you wish your version of this file to be governed by only the CDDL or
only the GPL Version 2, indicate your decision by adding "[Contributor]
elects to include this software in this distribution under the [CDDL or GPL
Version 2] license."  If you don't indicate a single choice of license, a
recipient has the option to distribute your version of this file under
either the CDDL, the GPL Version 2 or to extend the choice of license to
its licensees as provided above.  However, if you add GPL Version 2 code
and therefore, elected the GPL Version 2 license, then the option applies
only if the new code is made subject to such option by the copyright
holder.

-->
<!--
The web-app element is the root of the deployment descriptor for
a web application
-->
<!--
The icon element contains a small-icon and a large-icon element
which specify the location within the web application for a small and
large image used to represent the web application in a GUI tool. At a
minimum, tools must accept GIF and JPEG format images.
-->
<!--
The small-icon element contains the location within the web
application of a file containing a small (16x16 pixel) icon image.
-->
<!--
The large-icon element contains the location within the web
application of a file containing a large (32x32 pixel) icon image.
-->
<!--
The display-name element contains a short name that is intended
to be displayed by GUI tools
-->
<!--
The description element is used to provide descriptive text about
the parent element.
-->
<!--
The distributable element, by its presence in a web application
deployment descriptor, indicates that this web application is
programmed appropriately to be deployed into a distributed servlet
container
-->
<!--
The context-param element contains the declaration of a web
application's servlet context initialization parameters.
-->
<!--
The param-name element contains the name of a parameter.
-->
<!--
The param-value element contains the value of a parameter.
-->
<!--
The servlet element contains the declarative data of a
servlet. If a jsp-file is specified and the load-on-startup element is
present, then the JSP should be precompiled and loaded.
-->
<!--
The servlet-name element contains the canonical name of the
servlet.
-->
<!--
The servlet-class element contains the fully qualified class name
of the servlet.
-->
<!--
The jsp-file element contains the full path to a JSP file within
the web application.
-->
<!--
The init-param element contains a name/value pair as an
initialization param of the servlet
-->
<!--
The load-on-startup element indicates that this servlet should be
loaded on the startup of the web application. The optional contents of
these element must be a positive integer indicating the order in which
the servlet should be loaded. Lower integers are loaded before higher
integers. If no value is specified, or if the value specified is not a
positive integer, the container is free to load it at any time in the
startup sequence.
-->
<!--
The servlet-mapping element defines a mapping between a servlet
and a url pattern
-->
<!--
The url-pattern element contains the url pattern of the
mapping. Must follow the rules specified in Section 10 of the Servlet
API Specification.
-->
<!--
The session-config element defines the session parameters for
this web application.
-->
<!--
The session-timeout element defines the default session timeout
interval for all sessions created in this web application. The
specified timeout must be expressed in a whole number of minutes.
-->
<!--
The mime-mapping element defines a mapping between an extension
and a mime type.
-->
<!--
The extension element contains a string describing an
extension. example: "txt"
-->
<!--
The mime-type element contains a defined mime type. example:
"text/plain"
-->
<!--
The welcome-file-list contains an ordered list of welcome files
elements.
-->
<!--
The welcome-file element contains file name to use as a default
welcome file, such as index.html
-->
<!--
The taglib element is used to describe a JSP tag library.
-->
<!--
The taglib-uri element describes a URI, relative to the location
of the web.xml document, identifying a Tag Library used in the Web
Application.
-->
<!--
the taglib-location element contains the location (as a resource
relative to the root of the web application) where to find the Tag
Libary Description file for the tag library.
-->
<!--
The error-page element contains a mapping between an error code
or exception type to the path of a resource in the web application
-->
<!--
The error-code contains an HTTP error code, ex: 404
-->
<!--
The exception type contains a fully qualified class name of a
Java exception type.
-->
<!--
The location element contains the location of the resource in the
web application
-->
<!--
The resource-ref element contains a declaration of a Web
Application's reference to an external resource.
-->
<!--
The res-ref-name element specifies the name of the resource
factory reference name.
-->
<!--
The res-type element specifies the (Java class) type of the data
source.
-->
<!--
The res-auth element indicates whether the application component
code performs resource signon programmatically or whether the
container signs onto the resource based on the principle mapping
information supplied by the deployer. Must be CONTAINER or SERVLET
-->
<!--
The security-constraint element is used to associate security
constraints with one or more web resource collections
-->
<!--
The web-resource-collection element is used to identify a subset
of the resources and HTTP methods on those resources within a web
application to which a security constraint applies. If no HTTP methods
are specified, then the security constraint applies to all HTTP
methods.
-->
<!--
The web-resource-name contains the name of this web resource
collection
-->
<!--
The http-method contains an HTTP method (GET | POST |...)
-->
<!--
The user-data-constraint element is used to indicate how data
communicated between the client and container should be protected
-->
<!--
The transport-guarantee element specifies that the communication
between client and server should be NONE, INTEGRAL, or
CONFIDENTIAL. NONE means that the application does not require any
transport guarantees. A value of INTEGRAL means that the application
requires that the data sent between the client and server be sent in
such a way that it can't be changed in transit. CONFIDENTIAL means
that the application requires that the data be transmitted in a
fashion that prevents other entities from observing the contents of
the transmission. In most cases, the presence of the INTEGRAL or
CONFIDENTIAL flag will indicate that the use of SSL is required.
-->
<!--
The auth-constraint element indicates the user roles that should
be permitted access to this resource collection. The role used here
must appear in a security-role-ref element.
-->
<!--
The role-name element contains the name of a security role.
-->
<!--
The login-config element is used to configure the authentication
method that should be used, the realm name that should be used for
this application, and the attributes that are needed by the form login
mechanism.
-->
<!--
The realm name element specifies the realm name to use in HTTP
Basic authorization
-->
<!--
The form-login-config element specifies the login and error pages
that should be used in form based login. If form based authentication
is not used, these elements are ignored.
-->
<!--
The form-login-page element defines the location in the web app
where the page that can be used for login can be found
-->
<!--
The form-error-page element defines the location in the web app
where the error page that is displayed when login is not successful
can be found
-->
<!--
The auth-method element is used to configure the authentication
mechanism for the web application. As a prerequisite to gaining access
to any web resources which are protected by an authorization
constraint, a user must have authenticated using the configured
mechanism. Legal values for this element are "BASIC", "DIGEST",
"FORM", or "CLIENT-CERT".
-->
<!--
The security-role element contains the declaration of a security
role which is used in the security-constraints placed on the web
application.
-->
<!--
The role-name element contains the name of a role. This element
must contain a non-empty string.
-->
<!--
The role-link element is used to link a security role reference
to a defined security role. The role-link element must contain the
name of one of the security roles defined in the security-role
elements.
-->
<!--
The env-entry element contains the declaration of an
application's environment entry. This element is required to be
honored on in J2EE compliant servlet containers.
-->
<!--
The env-entry-name contains the name of an application's
environment entry
-->
<!--
The env-entry-value element contains the value of an
application's environment entry
-->
<!--
The env-entry-type element contains the fully qualified Java type
of the environment entry value that is expected by the application
code. The following are the legal values of env-entry-type:
java.lang.Boolean, java.lang.String, java.lang.Integer,
java.lang.Double, java.lang.Float.
-->
<!--
The ejb-ref element is used to declare a reference to an
enterprise bean. 
-->
<!--
The ejb-ref-name element contains the name of an EJB
reference. This is the JNDI name that the servlet code uses to get a
reference to the enterprise bean.
-->
<!--
The ejb-ref-type element contains the expected java class type of
the referenced EJB.
-->
<!--
The ejb-home element contains the fully qualified name of the
EJB's home interface
-->
<!--
The ejb-remote element contains the fully qualified name of the
EJB's remote interface
-->
<!--
The ejb-link element is used in the ejb-ref element to specify
that an EJB reference is linked to an EJB in an encompassing Java2
Enterprise Edition (J2EE) application package. The value of the
ejb-link element must be the ejb-name of and EJB in the J2EE
application package.
-->
<!--
The ID mechanism is to allow tools to easily make tool-specific
references to the elements of the deployment descriptor. This allows
tools that produce additional deployment information (i.e information
beyond the standard deployment descriptor information) to store the
non-standard information in a separate file, and easily refer from
these tools-specific files to the information in the standard web-app
deployment descriptor.
-->
<web-app xmlns:javaee="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <javaee:display-name>org.openhealthtools.mdht.cda.web</javaee:display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>