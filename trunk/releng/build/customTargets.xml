<project name="Build specific targets and properties" default="noDefault">

	<property name="basews" value="win32" />
	<property name="baseos" value="win32" />
	<property name="basearch" value="x86" />
	<property name="basenl" value="en_US" />

	<path id="ant.classpath">
		<fileset dir="${ANT_HOME}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Subversion Ant Task Definition -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="ant.classpath" />

	<!-- Code Coverage (EMMA) Ant Task Definition -->
	<taskdef resource="emma_ant.properties" classpathref="ant.classpath" />

	<!-- JUnit Ant Task Definition -->
	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="ant.classpath" />

	<!-- Conditional Support (ie <if> )  Ant Task Definitions -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant.classpath" />

	<property name="emma.enabled" value="true" />


	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->

	<target name="MDHT">

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml" />
		</ant>

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.dita.dost" />
		</ant>

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht" />
		</ant>

	</target>


	<target name="RIM">

		<!--- Temporary Feature Target for XML Modeling Feature -->
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="net.sourceforge.xmlmodeling.uml.xsd" />
		</ant>

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.hdf" />
		</ant>

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.rsm" />
		</ant>

		<!--		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.papyrus" />
		</ant>
-->

	</target>


	<target name="CDA">
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.cda" />
		</ant>



		<!--		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.cda.rsm" />
		</ant>


		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.cda.papyrus" />
		</ant> 
-->


	</target>

	<target name="CDAMODELS">

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.cda.models" />
		</ant>

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.test" />
		</ant>

		<!-- Do not need to have assemble target - This feature for the most part is generated -->
		<!--	<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.openhealthtools.mdht.uml.cda.models.source" />
	</ant>
-->

	</target>


	<target name="xxxallElements">
	</target>

	<target name="allElements">

		<!--
	<ant antfile="${genericTargets}" target="${target}" >
		<property name="type" value="<feature | plugin | fragment>" />
		<property name="id" value="<element.id>" />
	</ant>
	-->

		<!--  Target Build Logic
		Targets are RIM, CDA, CDAMODEL
		Default is to build all
		Did not use ant "depends" to prevent multiple invocations resulting in multiple plugin version being built, SWM
         -->

		<if>
			<equals arg1="${mdhtcomponent}" arg2="RIM" />
			<then>
				<echo message="Building RIM" />
				<antcall target="MDHT" />
				<antcall target="RIM" />
			</then>
			<else>
				<if>
					<equals arg1="${mdhtcomponent}" arg2="CDA" />
					<then>
						<echo message="Building CDA" />
						<antcall target="MDHT" />
						<antcall target="CDA" />
					</then>
					<else>
						<if>
							<equals arg1="${mdhtcomponent}" arg2="CDAMODELS" />
							<then>
								<echo message="Building CDA Models" />
								<antcall target="MDHT" />
								<antcall target="CDA" />
								<antcall target="CDAMODELS" />
							</then>
							<else>
								<echo message="Bulding All" />
								<antcall target="MDHT" />
								<antcall target="RIM" />
								<antcall target="CDA" />
								<antcall target="CDAMODELS" />
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>

	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in -->
	<!-- ${assembleScriptName}) but may also add pre and post processing -->
	<!-- Add one target for each root element and each configuration -->
	<!-- ===================================================================== -->

	<target name="assemble.net.sourceforge.xmlmodeling.uml.xsd">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht.uml">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.dita.dost">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht.uml.hdf">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<!--	<target name="assemble.org.openhealthtools.mdht.uml.papyrus">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target> -->

	<target name="assemble.org.openhealthtools.mdht.uml.rsm">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht.uml.cda">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht.uml.cda.models">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<!--	<target name="assemble.org.openhealthtools.mdht.uml.cda.models.source">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
-->
	<target name="assemble.org.openhealthtools.mdht.uml.cda.rsm">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>

	<target name="assemble.org.openhealthtools.mdht.test">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}" />
	</target>


	<!--	<target name="assemble.org.openhealthtools.mdht.uml.cda.papyrus">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target> -->
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" unless="skipMaps">



		<echo message="getMapFiles ${buildDirectory}" />


		<property name="mapsCheckoutTag" value="HEAD" />


		<svn username="${svnuser}" password="${svnpasswd}">
			<checkout url="${maps.URL}" revision="${maps.revision}" destpath="${buildDirectory}/maps" />
		</svn>


		<svn username="${svnuser}" password="${svnpasswd}">
			<checkout url="${cdasrcfeature.URL}" revision="${cdasrcfeature.revision}" destpath="${buildDirectory}/features/org.openhealthtools.mdht.uml.cda.models.source" />
		</svn>

		<svn username="${svnuser}" password="${svnpasswd}">
			<checkout url="${cdajunitsrcfeature.URL}" revision="${cdajunitsrcfeature.revision}" destpath="${buildDirectory}/features/org.openhealthtools.mdht.test.source" />
		</svn>

	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">

	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<!-- Fetch source feature -->

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">

		<mkdir dir="${buildDirectory}/${buildLabel}/docs" />

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		
		<antcall target="runTests" />

		<zip destfile="/home/seanmuir/org.openhealthtools.mdht.site.${buildLabel}.zip" basedir="${p2.repo.dir}" />
		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>


	<target name="runTests">


		<echo message="${ANT_HOME}" />

		<loadproperties srcFile="${buildDirectory}/finalPluginsVersions.properties" />


		<mkdir dir="${buildDirectory}/${buildLabel}/testlogs" />

		<mkdir dir="${buildDirectory}/${buildLabel}/reports" />

		<mkdir dir="${buildDirectory}/${buildLabel}/emma" />

		<mkdir dir="${buildDirectory}/${buildLabel}/emma/instrumentation" />

		<mkdir dir="${buildDirectory}/${buildLabel}/emma/coverage" />

		<!-- If using emma- use instrumented location - else use repository for jars -->
		<condition property="junittestdirectory" value="${buildDirectory}/${buildLabel}/emma/instrumentation/lib">
			<equals arg1="${emma.enabled}" arg2="true" />
		</condition>

		<condition property="junittestdirectory" value="${p2.repo.dir}/plugins">
			<not>
				<equals arg1="${emma.enabled}" arg2="true" />
			</not>
		</condition>



		<echo message="${buildDirectory}/${buildLabel}/emma/coverage/metadata.emma" />

		<echo message="${buildDirectory}/${buildLabel}/emma/instrumentation" />

		<echo message="${buildDirectory}/${buildLabel}/emma/instrumentation" />

		<echo message="${p2.repo.dir}/plugins" />

		<echo message="**/*_${org.openhealthtools.mdht.uml.cda}.jar" />


		<emma enabled="${emma.enabled}">



			<instr mode="fullcopy" metadatafile="${buildDirectory}/${buildLabel}/emma/coverage/metadata.emma" outdir="${buildDirectory}/${buildLabel}/emma/instrumentation" merge="true">
				<instrpath>
					<fileset dir="${p2.repo.dir}/plugins" includes="**/*.jar" />
				</instrpath>

				<filter includes="org.openhealthtools.*Operations*" excludes="com.*, net.*, *Test" />

			</instr>


		</emma>




		<junit printsummary="yes" fork="yes" forkmode="once" clonevm="no" showoutput="true">
			
			<!-- TODO Need to generate runtime classpath -->

			<classpath>


				<pathelement path="/opt/galileo64/eclipse/plugins/org.junit4_4.5.0.v20090824/junit.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.runtime_3.5.0.v20090525.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.osgi_3.5.2.R35x_v20100126.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/javax.transaction_1.1.1.v201002111330.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.persistence.jpa.equinox.weaving_1.1.3.v20091002-r5404.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.jobs_3.4.100.v20090429-1800.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.runtime.compatibility.registry_3.2.200.v20090429-1800/runtime_registry_compatibility.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.runtime.compatibility.registry_3.2.200.v20090429-1800" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.equinox.registry_3.4.100.v20090520-1800.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.equinox.preferences_3.2.301.R35x_v20091117.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.contenttype_3.4.1.R35x_v20090826-0451.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.runtime.compatibility.auth_3.2.100.v20090413.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.equinox.app_1.2.1.R35x_v20091203.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.osgi.services_3.2.0.v20090520-1800.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/javax.servlet_2.5.0.v200806031605.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.uml2.uml_3.0.1.v200908281330.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.emf.ecore_2.5.0.v200906151043.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.emf.common_2.5.0.v200906151043.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.resources_3.5.2.R35x_v20091203-1235.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.resources.compatibility_3.4.1.R35x_v20100113-0530.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.ant.core_3.2.101.v20091110_r352.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.variables_3.2.200.v20090521.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.expressions_3.4.101.R35x_v20100209.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.filesystem_1.2.1.R35x_v20091203-1235.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.core.filesystem.linux.x86_64_1.1.0.R35x_v20091203-1235.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.emf.ecore.xmi_2.5.0.v200906151043.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.uml2.common_1.5.0.v200905041045.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.emf.mapping.ecore2xml_2.5.0.v200906151043.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.ocl.ecore_1.3.0.v200905271400.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/org.eclipse.ocl_1.3.0.v200905271400.jar" />
				<pathelement path="/opt/galileo64/eclipse/plugins/net.sourceforge.lpg.lpgjavaruntime_1.1.0.v200803061910.jar	" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.common_${org.openhealthtools.mdht.uml.common}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.common.test_${org.openhealthtools.mdht.uml.common.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.cdt_${org.openhealthtools.mdht.uml.cda.cdt}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda_${org.openhealthtools.mdht.uml.cda}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.util.test_${org.openhealthtools.mdht.uml.cda.util.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.vocab_${org.openhealthtools.mdht.uml.hl7.vocab}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.rim_${org.openhealthtools.mdht.uml.hl7.rim}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.vocab.test_${org.openhealthtools.mdht.uml.hl7.vocab.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.vocab_${org.openhealthtools.mdht.uml.hl7.vocab}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.datatypes_${org.openhealthtools.mdht.uml.hl7.datatypes}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.datatypes.test_${org.openhealthtools.mdht.uml.hl7.datatypes.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hdf.test_${org.openhealthtools.mdht.uml.hdf.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.test_${org.openhealthtools.mdht.uml.cda.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.util.test_${org.openhealthtools.mdht.uml.cda.util.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ccd_${org.openhealthtools.mdht.uml.cda.ccd}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ccd.test_${org.openhealthtools.mdht.uml.cda.ccd.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ncr_${org.openhealthtools.mdht.uml.cda.ncr}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ncr.test_${org.openhealthtools.mdht.uml.cda.ncr.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.pilot_${org.openhealthtools.mdht.uml.cda.pilot}.jar" />
				
				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.pilot.test_${org.openhealthtools.mdht.uml.cda.pilot.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.cdt_${org.openhealthtools.mdht.uml.cda.cdt}.jar" />
				
				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.cdt.test_${org.openhealthtools.mdht.uml.cda.cdt.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ihe_${org.openhealthtools.mdht.uml.cda.ihe}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.hitsp_${org.openhealthtools.mdht.uml.cda.hitsp}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.ihe.test_${org.openhealthtools.mdht.uml.cda.ihe.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.cda.hitsp.test_${org.openhealthtools.mdht.uml.cda.hitsp.test}.jar" />

				<pathelement path="${junittestdirectory}/org.openhealthtools.mdht.uml.hl7.rim.test_${org.openhealthtools.mdht.uml.hl7.rim.test}.jar" />

				<pathelement path="/usr/share/ant/lib/emma_ant.jar" />

				<pathelement path="/usr/share/ant/lib/emma.jar" />

			</classpath>

			<formatter type="xml" />


			<!-- <test name="org.openhealthtools.mdht.uml.hdf.util.test.AllTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" /> -->

			<test name="org.openhealthtools.mdht.uml.hl7.vocab.tests.AllTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.hl7.datatypes.operations.ALLDatatypeOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.common.util.test.AllTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealttools.mdht.uml.cda.util.test.TestCDAUtil" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.hl7.rim.operations.AllRIMOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.tests.AllCDATests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.pilot.operations.AllPilotOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.ncr.operations.AllNROperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.cdt.operations.AllCDTOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.ccd.operations.AllCCDOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.hitsp.operations.AllHITSPOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<test name="org.openhealthtools.mdht.uml.cda.ihe.operations.AllIHEOperationsTests" todir="${buildDirectory}/${buildLabel}/testlogs" haltonfailure="no" />

			<jvmarg value="-Demma.coverage.out.file=${buildDirectory}/${buildLabel}/emma/coverage/coverage.ec" />

			<jvmarg value="-Demma.coverage.out.merge=true" />

		</junit>

		<junitreport todir="${buildDirectory}/${buildLabel}/reports">
			<fileset dir="${buildDirectory}/${buildLabel}/testlogs">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${buildDirectory}/${buildLabel}/reports/html" />
		</junitreport>


		<emma enabled="${emma.enabled}">

			<report>

				<sourcepath>
					<dirset dir="/home/seanmuir/releng/build/src/plugins">
						<include name="**/src" />
					</dirset>
				</sourcepath>

				<fileset dir="${buildDirectory}/${buildLabel}/emma/coverage">
					<include name="*.ec" />
					<include name="*.emma" />

				</fileset>

				<txt outfile="${buildDirectory}/${buildLabel}/reports/coverage.txt" />
				<html outfile="${buildDirectory}/${buildLabel}/reports/coverage.html" />
			
			</report>
			
		</emma>

		<zip destfile="/home/seanmuir/org.openhealthtools.mdht.reports.${buildLabel}.zip" basedir="${buildDirectory}/${buildLabel}/reports" />

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
