<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:HDF="http:///schemas/HDF/_DSjFECDHEd6sKM9UDPqlTg/7" xmlns:Standard="http://www.eclipse.org/uml2/schemas/Standard/1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/2.1.0/UML" xsi:schemaLocation="http:///schemas/HDF/_DSjFECDHEd6sKM9UDPqlTg/7 pathmap://HL7_PROFILES/HDF.profile.uml#_DSlhUCDHEd6sKM9UDPqlTg http://www.eclipse.org/uml2/schemas/Standard/1 pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w">
  <uml:Package xmi:id="_0" name="DEFN=UV=DT=1.0">
    <packagedElement xmi:type="uml:Interface" xmi:id="ANY" name="ANY" isAbstract="true">
      <ownedComment xmi:id="_O5izcSo1Ed65BMwZ7dmx2w">
        <body> 
Defines the basic properties of every data value. This is an abstract
type, meaning that no value can be just a data value without belonging
to any concrete type. Every concrete type is a specialization of this
general abstract DataValue type.
      </body>
      </ownedComment>
      <ownedComment xmi:id="_O5md0Co1Ed65BMwZ7dmx2w">
        <body>
abstract type DataValue alias ANY {
    TYPE  dataType;
    BN  nonNull;
    BN  isNull;
    CS  nullFlavor;
    BL  notApplicable;
    BL  unknown;
    BL  other;
    BL  equal(ANY x);
};
      </body>
      </ownedComment>
      <ownedOperation xmi:id="ANY-dataType" name="dataType" visibility="public">
        <ownedComment xmi:id="_O489lCo1Ed65BMwZ7dmx2w">
          <body> 
Represents the fact that every data value implicitly carries
information about its own data type. Thus, given a data value one can
inquire about its data type.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O48Wgio1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O489kSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O489kCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-nonNull" name="nonNull" visibility="public">
        <ownedComment xmi:id="_O5An9io1Ed65BMwZ7dmx2w">
          <body> 
Indicates that a value is a non-exceptional value of the data type.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O5ESUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
When a property, RIM attribute, or message field is called
&lt;code>mandatory&lt;/code> this means that any non-NULL value of the type
to which the property belongs has a non-NULL value for that
property, in other words, a field may not be NULL, providing that its
container (object, segment, etc.) is to have a non-NULL value.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O5An8So1Ed65BMwZ7dmx2w" type="BN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5An8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5An8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-isNull" name="isNull" visibility="public">
        <ownedComment xmi:id="_O5GHhyo1Ed65BMwZ7dmx2w">
          <body> 
Indicates that a value is an exceptional value, or a NULL-value. A
null value means that the information does not exist, is not
available or cannot be expressed in the data type's normal value
set.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O5Jx4Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Every data element has either a proper value or it is
considered NULL. If (and only if) it is NULL, the &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
								&lt;/object> provides
more detail as to in what way or why no proper value is supplied.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O5GHgio1Ed65BMwZ7dmx2w" type="BN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5GHhCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5GHgyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-nullFlavor" name="nullFlavor" visibility="public">
        <ownedComment xmi:id="_O5MOIio1Ed65BMwZ7dmx2w">
          <body> 
If a value is an exceptional value (NULL-value), this specifies in
what way and why proper information is missing.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O5P4gCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The null flavors are a general domain extension of all normal data
types. Note the distinction between value domain of any data type and
the vocabulary domain of coded data types. A vocabulary domain is a
value domain for coded values, but not all value domains are
vocabulary domains.
        &lt;/p>
							&lt;p>
The null flavor &quot;other&quot; is used whenever the actual value is not in
the required value domain, this may be, for example, when the value
exceeds some constraints that are defined too restrictive (e.g., age
less than 100 years.)
        &lt;/p>
							&lt;p>
Some of these null flavors are associated with named properties that can be
used as simple predicates for all data values. This is done to
simplify the formulation of invariants in the remainder of this
specification.
        &lt;/p>
							&lt;p>
Remember the difference between semantic properties and
representational &quot;components&quot; of data values. An ITS must only
represent those components that are needed to &lt;code>infer&lt;/code> the
semantic properties. The null-flavor predicates
&lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;nonNull&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
								&lt;/object>,
&lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;isNull&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
								&lt;/object>, &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;notApplicable&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
								&lt;/object>,
&lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;unknown&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
								&lt;/object>, and
&lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;other&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
								&lt;/object> can all be inferred from the &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
								&lt;/object>
property.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O5LnEio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5LnFCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5LnEyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-notApplicable" name="notApplicable" visibility="public">
        <ownedComment xmi:id="_O5Rttyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating that this exceptional value is of
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;nullFlavor&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
							&lt;/object> not-applicable (NA), i.e., that a proper
value is not meaningful in the given context.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O5Rtsio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5RttCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5Rtsyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-unknown" name="unknown" visibility="public">
        <ownedComment xmi:id="_O5V_ISo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating that this exceptional value is of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;nullFlavor&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
							&lt;/object> unknown (UNK).
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O5VYESo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5VYEyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5VYEio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-other" name="other" visibility="public">
        <ownedComment xmi:id="_O5ZphCo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating that this exceptional value is of
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;nullFlavor&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ANY&quot;/>&lt;/param>
							&lt;/object> other (OTH), i.e., that the required
value domain does not contain the appropriate value.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O5ZCcSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5ZpgSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5ZpgCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ANY-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O5dT5io1Ed65BMwZ7dmx2w">
          <body> 
Equality is a reflexive, symmetric, and transitive relation between
any two data values. Only proper values can be equal, null values
never are equal (even if they have the same null flavor.)
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O5g-QCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
How equality is determined must be defined for each data type. If
nothing else is specified, two data values are equal if they are
indistinguishable, that is, if they differ in none of their semantic
properties. A data type can &quot;override&quot; this general definition of
equality, by specifying its own equal relationship. This overriding
of the equality relation can be used to exclude semantic properties
from the equality test. If a data type excludes semantic properties
from its definition of equality, this implies that certain properties
(or aspects of properties) that are not part of the equality test are
not essential to the meaning of the value.
        &lt;/p>
							&lt;p>
For example the physical quantity has the two semantic properties (1)
a real number and (2) a coded unit of measure. The equality test,
however, must account for the fact that, e.g., 1 meter equals 100
centimeters; independent equality of the two semantic properties is
too strong a criterion for the equality test. Therefore, physical
quantity must override the equality definition.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O5dT4Co1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5dT4io1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5dT4So1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O5dT4yo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="TYPE" name="TYPE" visibility="private">
      <ownedComment xmi:id="_O43eACo1Ed65BMwZ7dmx2w">
        <body> 
A meta-type declared in order to allow the formal definitions to speak
about the data type of a value. Any data type defined in this
specification is a value of the type DataType.
        </body>
      </ownedComment>
      <ownedComment xmi:id="_O47IYCo1Ed65BMwZ7dmx2w">
        <body>
private type DataType alias TYPE specializes ANY {
    CS  shortName;
    CS  longName;

    BN	implies(TYPE that);
};

        </body>
      </ownedComment>
      <generalization xmi:id="ANY_TYPE_generalization" general="ANY"/>
      <ownedOperation xmi:id="TYPE-shortName" name="shortName" visibility="public">
        <ownedComment xmi:id="_O4r31yo1Ed65BMwZ7dmx2w">
          <body> 
A &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
							&lt;/object> specifying the alias of the data type.
           </body>
        </ownedComment>
        <ownedParameter xmi:id="_O4r30io1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4r31Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4r30yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TYPE-longName" name="longName" visibility="public">
        <ownedComment xmi:id="_O4wJRio1Ed65BMwZ7dmx2w">
          <body> 
A &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
							&lt;/object> specifying the full name of the data type.
          </body>
        </ownedComment>
        <ownedParameter xmi:id="_O4wJQSo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4wJQyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4wJQio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TYPE-implies" name="implies" visibility="public">
        <ownedComment xmi:id="_O4zzpyo1Ed65BMwZ7dmx2w">
          <body> 
A data type implies another data type if it has the same type or is
a specialisation of it.
          </body>
        </ownedComment>
        <ownedParameter xmi:id="_O4zzoSo1Ed65BMwZ7dmx2w" type="BN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4zzoyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4zzoio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O4zzpCo1Ed65BMwZ7dmx2w" name="that" type="TYPE"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CS" name="CS">
      <ownedComment xmi:id="_O4lKISo1Ed65BMwZ7dmx2w">
        <body> 
XCoded data in its simplest form, where only the code is not predetermined.
The code system and code system version are fixed by the context in which
the CS value occurs. CS is used for coded attributes that have a single
HL7-defined value set.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O4oNcCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
							&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
							&lt;/object> can only be used in either of the following
          cases:
    &lt;/p>
						&lt;ol>&lt;li>
								&lt;p>
for a coded attribute which has a single HL7-defined code system, and
where code additions to that value set require formal HL7 action (such
as harmonization.) Such coded attributes must be assigned the
&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
									&lt;/object> restriction.
        &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
for a property in this specification that is assigned to a single code
system defined either in this specification or defined outside HL7 by a body
that has authority over the concept and the maintenance of that code system.
        &lt;/p>
							&lt;/li>&lt;/ol>
						&lt;p>
For example, since the &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
							&lt;/object> type subscribes to the MIME
design, it trusts IETF to manage the media type. This includes that this
specification subscribes to the extension mechanism built into the MIME media
type code (e.g., &quot;application/x-myapp&quot;).
    &lt;/p>
						&lt;p>
For &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
							&lt;/object> values, the designation of the domain qualifier
will always be CNE (&lt;code>coded, non-extensible&lt;/code>) and the
context will determine which HL7 values to use. &lt;object name=&quot;footnote&quot;>
This is not withstanding the fact that an external referenced domain,
such as the IETF MIME media type may include an extension
mechanism. These extended MIME type codes would not be considered
&quot;extensions&quot; in the sense of violating the CNE provision. The CNE
provision is only violated if an attempt is made in using a different
code system (by means of the CD.codeSystem property), which is not
possible with the  data type.
        &lt;/object>
						&lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O4qCoSo1Ed65BMwZ7dmx2w">
        <body>
type CodedSimpleValue alias CS specializes CV {
  literal   ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="CV_CS_generalization" general="CV"/>
      <ownedOperation xmi:id="CS-code" name="code" visibility="public">
        <ownedParameter xmi:id="_O4aLAio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4aLBCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4aLAyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4aLBSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-codeSystem" name="codeSystem" visibility="public">
        <ownedComment xmi:id="_O4ayESo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O4dOUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Every non-NULL &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> value has a defined code system.  The
ITS representation of the &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> needs not explicitly mention
the code system, because the context mandates one and only one code
system to be used. Specifying the code system explicitly would be
redundant. However, the code system property assumes that
context-specific default value and is not NULL.
      &lt;/p>
							&lt;p>
An exceptional &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CS&quot;/>&lt;/param>
								&lt;/object> of NULL-flavor &quot;other&quot; indicates that a
concept could not be coded in the coding system specified. In these cases,
the code must be Null.
     &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O4aLCSo1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4aLCyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4aLCio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-codeSystemName" name="codeSystemName" visibility="public">
        <ownedParameter xmi:id="_O4eccio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4ecdCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4eccyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4ecdSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-codeSystemVersion" name="codeSystemVersion" visibility="public">
        <ownedParameter xmi:id="_O4eceSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4eceyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4eceio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4ecfCo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-displayName" name="displayName" visibility="public">
        <ownedParameter xmi:id="_O4fDgyo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4fDhSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4fDhCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4fDhio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-originalText" name="originalText" visibility="public">
        <ownedParameter xmi:id="_O4fDiio1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4fDjCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4fDiyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4fDjSo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-translation" name="translation" visibility="public">
        <ownedParameter xmi:id="_O4fDkSo1Ed65BMwZ7dmx2w" type="SETCD" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4fqkCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4fDkio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4fqkSo1Ed65BMwZ7dmx2w" type="SETCD">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-qualifier" name="qualifier" visibility="public">
        <ownedParameter xmi:id="_O4fqlSo1Ed65BMwZ7dmx2w" type="LISTCR" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4fqlyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4fqlio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4fqmCo1Ed65BMwZ7dmx2w" type="LISTCR">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CS-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O4fqoSo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O4it4Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The string literal form of CS is primarily defined for the purposes of
this specification. The literal form is a representation of the code
for the codeSystem for the context of the CS in string format. You
cannot determine the codeSystem or version from the literal itself,
so the literal only has use where the context is known
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O4j8ASo1Ed65BMwZ7dmx2w">
          <body>
CS.literal ST {
  ST : /[a-zA-Z0-9_]+/  { $.equal($1); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O4fqnCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4fqnio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4fqnSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CV" name="CV" visibility="protected">
      <ownedComment xmi:id="_O4TdWyo1Ed65BMwZ7dmx2w">
        <body> 
Coded data, specifying only a code, code system, and optionally
display name and original text. Used only as the data type for other
data types' properties.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O4V5kCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
This type is used when any reasonable use case will require only a
single code value to be sent. Thus, it should not be used in
circumstances where multiple alternative codes for a given value are
desired. This type may be used with both the CNE (&lt;code>coded,
non-extensible&lt;/code>) and the CWE (&lt;code>coded, with
extensibility&lt;/code>) domain qualifiers.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O4XHsSo1Ed65BMwZ7dmx2w">
        <body>
protected type CodedValue alias CV specializes CE;
    </body>
      </ownedComment>
      <generalization xmi:id="CE_CV_generalization" general="CE"/>
      <ownedOperation xmi:id="CV-code" name="code" visibility="public">
        <ownedParameter xmi:id="_O4RoIio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4RoJCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4RoIyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4RoJSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-codeSystem" name="codeSystem" visibility="public">
        <ownedParameter xmi:id="_O4SPMio1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4SPNCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4SPMyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-codeSystemName" name="codeSystemName" visibility="public">
        <ownedParameter xmi:id="_O4SPOCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4SPOio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4SPOSo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4SPOyo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-codeSystemVersion" name="codeSystemVersion" visibility="public">
        <ownedParameter xmi:id="_O4SPPyo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4SPQSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4SPQCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4SPQio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-displayName" name="displayName" visibility="public">
        <ownedParameter xmi:id="_O4S2Qyo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4S2RSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4S2RCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4S2Rio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-originalText" name="originalText" visibility="public">
        <ownedParameter xmi:id="_O4S2Sio1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4S2TCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4S2Syo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4S2TSo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-translation" name="translation" visibility="public">
        <ownedParameter xmi:id="_O4S2USo1Ed65BMwZ7dmx2w" type="SETCD" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4TdUCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4S2Uio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4TdUSo1Ed65BMwZ7dmx2w" type="SETCD">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CV-qualifier" name="qualifier" visibility="public">
        <ownedParameter xmi:id="_O4TdVSo1Ed65BMwZ7dmx2w" type="LISTCR" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4TdVyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4TdVio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4TdWCo1Ed65BMwZ7dmx2w" type="LISTCR">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CE" name="CE">
      <ownedComment xmi:id="_O4K6gSo1Ed65BMwZ7dmx2w">
        <body> 
Coded data that consists of a coded value (CV) and, optionally, coded
value(s) from other coding systems that identify the same
concept. Used when alternative codes may exist.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O4N9wCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> type is used when the use case indicates that alternative
codes may exist and where it is useful to communicate these. The
&lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> type provides for a primary code value, plus a set of
alternative or equivalent representations.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O4PL4So1Ed65BMwZ7dmx2w">
        <body>
type CodedWithEquivalents alias CE specializes CD;
</body>
      </ownedComment>
      <generalization xmi:id="CD_CE_generalization" general="CD"/>
      <ownedOperation xmi:id="CE-code" name="code" visibility="public">
        <ownedParameter xmi:id="_O4JsUCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4JsUio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4JsUSo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4JsUyo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-codeSystem" name="codeSystem" visibility="public">
        <ownedParameter xmi:id="_O4JsVyo1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4JsWSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4JsWCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-codeSystemName" name="codeSystemName" visibility="public">
        <ownedParameter xmi:id="_O4JsXSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4JsXyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4JsXio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4JsYCo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-codeSystemVersion" name="codeSystemVersion" visibility="public">
        <ownedParameter xmi:id="_O4KTYSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4KTYyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4KTYio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4KTZCo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-displayName" name="displayName" visibility="public">
        <ownedParameter xmi:id="_O4KTaCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4KTaio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4KTaSo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4KTayo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-originalText" name="originalText" visibility="public">
        <ownedParameter xmi:id="_O4KTbyo1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4KTcSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4KTcCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4K6cCo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-translation" name="translation" visibility="public">
        <ownedParameter xmi:id="_O4K6dCo1Ed65BMwZ7dmx2w" type="SETCD" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4K6dio1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4K6dSo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4K6dyo1Ed65BMwZ7dmx2w" type="SETCD">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CE-qualifier" name="qualifier" visibility="public">
        <ownedParameter xmi:id="_O4K6eyo1Ed65BMwZ7dmx2w" type="LISTCR" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O4K6fSo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O4K6fCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O4K6fio1Ed65BMwZ7dmx2w" type="LISTCR">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CD" name="CD">
      <ownedComment xmi:id="_O4AiYSo1Ed65BMwZ7dmx2w">
        <body> 
A concept descriptor represents any kind of concept usually by
giving a code defined in a code system.

A concept descriptor can contain the original text or phrase that
served as the basis of the coding and one or more translations into
different coding systems.

A concept descriptor can also contain qualifiers to describe, e.g., the
concept of a &quot;left foot&quot; as a postcoordinated term built from the
primary code &quot;FOOT&quot; and the qualifier &quot;LEFT&quot;.

In cases of an exceptional value, the concept descriptor need not contain a code
but only the original text describing that concept.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O4EMwCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The concept descriptor is mostly used in one of its restricted or
“profiled” forms, CS, CE, CV.
    &lt;/p>
						&lt;p>
Use of the full concept descriptor data type is not common. It
requires a conscious decision and documented rationale. In all other
cases, one of the &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
							&lt;/object> restrictions shall be
used.&lt;object name=&quot;footnote&quot;>
The advantage of the concept descriptor data type is its expressiveness,
however, if all of its features, such as coding exceptions, text, translations 
and qualifiers are used at all times, implementation and use become very 
difficult and unsafe. Therefore, the  type is most often
used in a restricted form with reduced features.
      &lt;/object>
						&lt;/p>
						&lt;p>
All &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
							&lt;/object> restrictions constrain certain properties of the
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
							&lt;/object>. Properties may be constrained to the extent that
only one value may be allowed for that property, in which case
mentioning the property becomes redundant. Constraining a property to
one value is referred to as suppressing that property. Although,
conceptually a suppressed property is still semantically applicable,
it is safe for an HL7 interface to assume the implicit default value
without testing.
  &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O4GB8So1Ed65BMwZ7dmx2w">
        <body>
type ConceptDescriptor alias CD specializes ANY {
            ST    code;
            UID   codeSystem;
            ST    codeSystemName;
            ST    codeSystemVersion;
            ST    displayName;
            ED    originalText;
            SET&lt;CD>   translation;
            LIST&lt;CR>  qualifier;
            BL  implies(CD x);
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_CD_generalization" general="ANY"/>
      <ownedOperation xmi:id="CD-code" name="code" visibility="public">
        <ownedComment xmi:id="_O3CSAyo1Ed65BMwZ7dmx2w">
          <body> 
The plain code symbol defined by the code system. For example,
&quot;784.0&quot; is the code symbol of the ICD-9 code &quot;784.0&quot; for headache.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3EuQCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A non-exceptional &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> value has a non-NULL code property
whose value is a character string that is a symbol defined by the
coding system identified by the codeSystem property. Conversely, a
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> value without a value for the code property, or with
a value that is not from the cited coding system is an exceptional
value (NULL of flavor &lt;code>other&lt;/code>).
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3Bq8io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3Bq9Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3Bq8yo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3CSACo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-codeSystem" name="codeSystem" visibility="public">
        <ownedComment xmi:id="_O3F8Zyo1Ed65BMwZ7dmx2w">
          <body> 
Specifies the code system that defines the code.
    </body>
        </ownedComment>
        <ownedComment xmi:id="_O3I_sCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Code systems shall be referred to by Unique Identifier
(&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object>). The &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object> allows unambiguous 
reference to standard HL7 codes, other standard code systems, as well as local
codes. HL7 shall assign an &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object> to each of its code
tables as well as to external standard coding systems that are being
used with HL7. Local sites must use their ISO Object Identifier
(&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;OID&quot;/>&lt;/param>
								&lt;/object>) to construct a globally unique local coding
system identifier.
      &lt;/p>
							&lt;p>
Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
contain HL7 standard and external code system identifiers
respectively. The HL7 Vocabulary Technical Committee maintains these
two branches.
      &lt;/p>
							&lt;p>
A non-exceptional &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> value (i.e. a &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object>
value that has a non-null code property) has a non-NULL code system
specifying the system of concepts that defines the code. In other
words whenever there is a code there is also a code system.
      &lt;/p>
							&lt;p>
An exceptional &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> of NULL-flavor &quot;other&quot; indicates that
a concept could not be coded in the coding system specified. Thus, for
these coding exceptions, the code system that did not contain the
appropriate concept must be provided in the code system property.
      &lt;/p>
							&lt;p>
Some code domains are qualified such that they include the portion of
any pertinent local coding system that does not simply paraphrase the
standard coding system (&lt;code>coded with extensibility&lt;/code>, CWE.)
If a CWE qualified field actually contains such a local code, the
coding system must specify the local coding system from which the
local code was taken. However, for CWE domains the local code is a
valid member of the domain, so that local codes in CWE domains
constitute neither an error nor an exceptional (NULL/other) value in
the sense of this specification.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3F8Yio1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3F8ZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3F8Yyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-codeSystemName" name="codeSystemName" visibility="public">
        <ownedComment xmi:id="_O3KN2Co1Ed65BMwZ7dmx2w">
          <body> 
The common name of the coding system.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3MqECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The code system name has no computational value. The purpose of a code
system name is to assist an unaided human interpreter of a code value to
interpret the code system &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object>. It is suggested — though
not absolutely required — that ITS provide for code system name fields in
order to annotate the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object> for human comprehension.
      &lt;/p>
							&lt;p>
HL7 systems must not functionally rely on the code system name. The
code system name can never modify the meaning of the code system
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object> value and cannot exist without the 
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;UID&quot;/>&lt;/param>
								&lt;/object> value.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3KN0io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3KN1Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3KN0yo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3KN1So1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-codeSystemVersion" name="codeSystemVersion" visibility="public">
        <ownedComment xmi:id="_O3OfRCo1Ed65BMwZ7dmx2w">
          <body> 
If applicable, a version descriptor defined specifically for the given
code system.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3Q7gCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
HL7 shall specify how these version strings are formed for each
external code system. If HL7 has not specified how version strings are
formed for a particular coding system, version designations have no
defined meaning for such coding system.
      &lt;/p>
							&lt;p>
Different versions of one code system must be compatible. Whenever a
code system changes in an incompatible way, it will constitute a new
code system, not simply a different version, regardless of how the
vocabulary publisher calls it.
      &lt;/p>
							&lt;p>
For example, the publisher of ICD-9 and ICD-10 calls these code
systems, &quot;revision 9&quot; and &quot;revision 10&quot; respectively. However, ICD-10
is a complete redesign of the ICD code, not a backward compatible
version. Therefore, for the purpose of this data type specification,
ICD-9 and ICD-10 are different code systems, not just different
versions. By contrast, when LOINC updates from revision &quot;1.0j&quot; to
&quot;1.0k&quot;, HL7 would consider this to be just another version of LOINC,
since LOINC revisions are backwards compatible.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3N4Mio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3OfQCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3N4Myo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3OfQSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-displayName" name="displayName" visibility="public">
        <ownedComment xmi:id="_O3SJqCo1Ed65BMwZ7dmx2w">
          <body> 
A name or title for the code, under which the sending system shows the
code value to its users.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3VM8Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The display name is included both as a courtesy to an unaided human
interpreter of a code value and as a documentation of the name used to
display the concept to the user. The display name has no functional
meaning; it can never exist without a code;  and it can never
modify the meaning of the code.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3SJoio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3SJpCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3SJoyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3SJpSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-originalText" name="originalText" visibility="public">
        <ownedComment xmi:id="_O3XCJCo1Ed65BMwZ7dmx2w">
          <body> 
The text or phrase used as the basis for the coding.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3aFcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The original text exists in a scenario where an originator of the
information does not assign a code, but where the code is assigned
later by a coder (post-coding.)  In the production of a concept
descriptor, original text may thus exist without a code.
            &lt;/p>
							&lt;p>
Values of type &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> may have a non-NULL original text
property despite having a NULL code property. Any &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> value
with the code property of NULL signifies a coding exception. In this case,
the originalText property is a name or description of the concept that was
not coded. Such exceptional &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> may contain translations.
Such translations directly encode the concept described in the original text
property.
      &lt;/p>
							&lt;p>
A concept descriptor can be demoted into a character string (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
								&lt;/object>)
value representing only the original text of the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> value.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3WbEio1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3XCICo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3WbEyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3XCISo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-translation" name="translation" visibility="public">
        <ownedComment xmi:id="_O3b6qSo1Ed65BMwZ7dmx2w">
          <body> 
A set of other concept descriptors that translate this concept
descriptor into other code systems.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3eW4Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The translation property is a set of other concept descriptors that
each translate the first concept descriptor into different code
systems. Each element of the translation set was translated from the
first concept descriptor. Each translation may, however, also contain
translations. Thus, when a code is translated multiple times the
information about which code served as the input to which translation
will be preserved.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3b6oyo1Ed65BMwZ7dmx2w" type="SETCD" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3b6pSo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3b6pCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3b6pio1Ed65BMwZ7dmx2w" type="SETCD">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-qualifier" name="qualifier" visibility="public">
        <ownedComment xmi:id="_O3x44yo1Ed65BMwZ7dmx2w">
          <body> 
Specifies additional codes that increase the specificity of the the
primary code.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O30VICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The primary code and all the qualifiers together make up one
concept. A concept descriptor with qualifiers is also called a
&lt;code>code phrase&lt;/code> or &lt;code>postcoordinated expression&lt;/code>.
      &lt;/p>
							&lt;p>
Qualifiers constrain the meaning of the primary code, but cannot negate
it or change it's meaning to that of another value in the primary coding
system
      &lt;/p>
							&lt;p>
Qualifiers can only be used according to well-defined rules of
post-coordination. A value of type CD may only have qualifiers if it's
code system defines the use of such qualifiers or if there is a third
code system that specifies how other code systems may be combined.
      &lt;/p>
							&lt;p>
For example, SNOMED CT allows constructing concepts as a combination
of multiple codes. SNOMED CT defines a concept &quot;cellulitis (disorder)&quot;
(128045006) an attribute &quot;finding site&quot; (363698007) and another
concept &quot;foot structure (body structure)&quot; (56459004). SNOMED CT allows
one to combine these codes in a code phrase:
&lt;/p>
							&lt;p>
In this example, there is one code system, SNOMED-CT that defines all the
primary code and the qualifiers and how these are used, which is why in our
example representation the codeSystem does not need to be mentioned for the
qualifier name and value (the codeSystem is inherited from the primary code.)
      &lt;/p>
							&lt;p>
It is important to note that the allowable qualifiers are specified by
the code system. For instance, in SNOMED CT, there is a defined set of
qualifying attributes, and only Findings and Disorders can be
qualified with the &quot;finding site&quot; attribute. Use of qualifiers outside
the boundaries specified by the code system is a non-conformant use of
the CD data type. Adherence to the rules specified by the code system
enables post-coordinated expressions to be compared with
pre-coordinated concepts (such as where one might compare the above
code phrase to the pre-coordinated concept &quot;cellulitis of foot
(disorder)&quot; (128276007), which is defined within SNOMED CT as having a
finding site of foot structure).   The CD datatype does not provide
for normalization of compositional expressions, therefore it is
possible to create ambiguous expressions.  Users should understand
that they must provide the additional constraints necessary to assure
unambiguous data representation, if they are planning to create
compositional expressions using the CD datatype.  Otherwise, they risk
the inability to retrieve a complete set of all records corresponding
to any given query.
      &lt;/p>
							&lt;p>
Another common example is the U.S. Centers for Medicare and Medicaid
Services (CMS) (previously known as the Health Care Financing
Administration, HCFA) procedure codes. CMS procedure codes (HCPCS) are
based on CPT-4 and add additional qualifiers to it. For example, the
patient with above finding (plus peripheral arterial disease, diabetes
mellitus, and a chronic skin lesion at the left great toe) may have an
amputation of that toe. The CPT-4 concept is &quot;Amputation, toe
metatarsophalangeal joint&quot; (28820) and a HCPCS qualifier needs to be
added to indicate &quot;left foot, great toe&quot; (TA). Thus we code:
      &lt;/p>
							&lt;p>
In this example, the code system of the qualifier (HCPCS) is different
than the code system of the primary code (CPT-4.) It is only because
there are well-defined rules that define how these codes can be
combined, that the qualifier may be used. Note also, that the role
name is optional, and for HCPCS codes there are no distinguished role
names.
      &lt;/p>
							&lt;p>
The order of qualifiers is preserved, particularly for the case where
the coding system allows post-coordination but defines no role
names. (e.g., some ICD-9CM codes, or the old SNOMED &quot;multiaxial&quot;
coding.)
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3xR0io1Ed65BMwZ7dmx2w" type="LISTCR" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3xR1Co1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3xR0yo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3x44Co1Ed65BMwZ7dmx2w" type="LISTCR">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CD-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O31jSCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O35NoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The main use of concept descriptors is for the purpose of indexing,
querying and decision-making based on a coded value. A semantically
unambiguous specification of coded values therefore requires a clear
definition of what equality of concept descriptor values means and how
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
								&lt;/object> values should be compared. (For more details on
comparing pre- and post-coordinated expressions, see Dolin RH,
Spackman KA, Markwell D. Selective Retrieval of Pre- and
Post-coordinated SNOMED Concepts. Fall AMIA 2002; 210-14, or the July
2003 SNOMED CT Implementation Guide.)
    &lt;/p>
							&lt;p>
The equality of two concept descriptor values is determined solely
based upon the code and coding system. The code system version is
excluded from the equality test.&lt;object name=&quot;footnote&quot;>
The code system versions do not count in the equality test since by
definition a code symbol must have the same meaning throughout all
versions of a code system. Between versions, codes may be retired but
not withdrawn or reused.
          &lt;/object>
If qualifiers are present, the qualifiers are included in the equality
test. Translations are not included in the equality test.&lt;object name=&quot;footnote&quot;>
Translations are not included in the equality test of concept
descriptors for safety reasons. An alternative would have been to
consider two  values equal if any of their
translations are equal. However, some translations may be equal
because the coding system of that translation is very
coarse-grained. More sophisticated comparisons between concept
descriptors are application considerations that are not covered by
this specification.
          &lt;/object>
Exceptional concept descriptor values are not equal even if they have
the same NULL-flavor or the same original text.&lt;object name=&quot;footnote&quot;>
NULL-values are exceptional values, not proper concepts. It would be unsafe to 
equate two values merely on the basis that both are exceptional (e.g., not 
codable or unknown.)  Likewise there is no guarantee that original text
represents a meaningful or unique description of the concept so that equality 
of that original text does not constitute concept equality. The reverse is 
also true: since there is more than one possible original text for a concept, 
the fact that original text differs does not constitute a difference of the 
concepts.
          &lt;/object>
							&lt;/p>
							&lt;p>
Some code systems define certain style options to their code
values. For example, the U.S. National Drug Code (NDC) has a dash and
a non-dash form. An example for the dash form may be 1234-5678-90 when
the non-dash form is 01234567890. Another example for this problem is
when certain ISO or ANSI code tables define optional alphanumeric and
numeric forms of two or three character lengths all in one standard.
      &lt;/p>
							&lt;p>
In the case where code systems provide for multiple representations,
HL7 shall make a ruling about which is the preferred form. HL7 shall
document that ruling where that respective external coding system is
recognized. HL7 shall decide upon the preferred form based on criteria
of practicality and common use. In absence of clear criteria of
practicality and common use, the safest, most extensible, and least
stylized (the least decorated) form shall be given
preference.&lt;object name=&quot;footnote&quot;>
This ruling at design-time is necessary to prevent HL7 interfaces from
being burdened by code literal style conversions at runtime. This is
notwithstanding the fact that some applications may require mapping
from one form into another if that application has settled with the
representation option that was not chosen by HL7.
          &lt;/object>
							&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O31jQio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O31jRCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O31jQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O31jRSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="CD-implies" name="implies" visibility="public">
        <ownedComment xmi:id="_O37C1io1Ed65BMwZ7dmx2w">
          <body> 
Specifies whether this concept descriptor is a specialization of
the operand concept descriptor.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3-tMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Naturally, concepts can be narrowed and widened to include or exclude
other concepts. Many coding systems have an explicit notion of concept
specialization and generalization. The HL7 vocabulary principles also
provide for concept specialization for HL7 defined value sets. The
&lt;code>implies&lt;/code>-property is a predicate that compares whether one
concept is a specialization of another concept, and therefore implies
that other concept.
      &lt;/p>
							&lt;p>
When writing predicates (e.g., conditional statements) that compare
two codes, one should usually test for implication not equality of
codes.
      &lt;/p>
							&lt;p>
For example, in &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;TelecommunicationAddressUse&quot;/>&lt;/param>
								&lt;/object> the
&quot;telecommunication use&quot; concepts: work (W), home (H), primary home
(HP), and vacation home (HV) are defined, where both HP and HV imply
H. When selecting any home phone number, one should test whether the
given use-code &lt;code>c&lt;/code> 
              &lt;code>implies&lt;/code> H. Testing for
&lt;code>c&lt;/code> 
              &lt;code>equal&lt;/code> H would only find unspecified home
phone numbers, but not the primary home phone number.
      &lt;/p>
							&lt;p>
Operationally, implication can be evaluated in one of two ways. The
code system literals may be designed such that one single hierarchy is
reflected in the code literal itself (e.g., ICD-9.) Apart from such
special cases, however, a terminological knowledge base and an
appropriate subsumption algorithm will be required to evaluate
implication statements. For post-coordinated coding systems, designing
such a subsumption algorithm is a non-trivial task.&lt;object name=&quot;footnote&quot;>
This is one reason why the CD.qualifiers for post-coordination are to
be used sparingly and with caution. An additional problem of
post-coordinated coding is that a general rule for equality may not
exist at all.
          &lt;/object>
							&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O37C0Co1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O37C0io1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O37C0So1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O37C0yo1Ed65BMwZ7dmx2w" name="x" type="CD"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="ST" name="ST">
      <ownedComment xmi:id="_O25vISo1Ed65BMwZ7dmx2w">
        <body> 
The character string data type stands for text data, primarily
intended for machine processing (e.g., sorting, querying, indexing,
etc.) Used for names, symbols, and formal expressions.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O29ZgCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The character string is a restricted encapsulated data type (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
							&lt;/object>),
whose type property is fixed to &lt;code>text/plain&lt;/code>, and whose data must be
inlined and not compressed. Thus, the properties compression, reference,
integrity check, algorithm, and thumbnail are not applicable. The character
string data type is used when the appearance of text does not bear meaning,
which is true for formalized text and all kinds of names.
    &lt;/p>
						&lt;p>
The character string (ST) data type interprets the encapsulated data
as character data (as opposed to bits), depending on the charset
property of the encapsulated data type.
    &lt;/p>
						&lt;p>
The headCharacter and tailString properties define ST as a sequence
of entities each of which uniquely identifies one character from the
joint set of all characters known by any language of the world. &lt;object name=&quot;footnote&quot;>
ISO/IEC 10646-1: 1993 defines a character as &quot;A member of a set of
elements used for the organization, control, or representation of
data.&quot;  ISO/IEC TR 15285 - An operational model for characters and
glyphs. Discusses the problems involved in defining
characters. Notably, characters are abstract entities of information,
independent of type font or language. The ISO 10646 (UNICODE
[http://www.unicode.org]) - or in Japan, JIS X0221 - is a globally
applicable character set that uniquely identifies all characters of
any language in the world.
        
In this specification, ISO 10646 serves as a semantic model for
character strings. The important point is that for semantic purposes,
there is no notion of separate character sets and switching between
character sets. Character set and character encoding are ITS layer
considerations. The formal definition gives indication to this effect
because each character is by itself an  value that
has a charset property. Thus, the binary encoding of each character is
always understood in the context of a certain character set. This does
not mean that the ITS should represent a character string as a
sequence of full blown  values. What it means is that
on the application layer the notion of character encoding is
irrelevant when we deal with character strings.
        &lt;/object>
The length of a character string is the number of characters in the string.
    &lt;/p>
						&lt;p>
The head of a string is a string of only one character. A character
string must at least have one character or else it is NULL. A
zero-length string is an exceptional value (NULL), not a proper
character string value.
    &lt;/p>
						&lt;p>
The length of a string is the number of characters, not the number of
encoded bytes. Byte encoding is an ITS issue and is not relevant on
the application layer.
    &lt;/p>
						&lt;p>
The following rules apply to whitespace contained within character strings:
    &lt;/p>
						&lt;ul>&lt;li>
								&lt;p>
TAB, space and end-of-line are all considered whitespace characters.
            &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
Both preceding and trailing whitespace is significant.
            &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
Different whitespace characters are not interchangable.
            &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
Different representations of end-of-line are normalised according to the
method described in the XML specification
[&lt;a>&lt;/a>]
            &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
Sequences of whitespace cannot be compressed to shorter sequences.
            &lt;/p>
							&lt;/li>&lt;/ul>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O2_OsSo1Ed65BMwZ7dmx2w">
        <body>
type CharacterString alias ST specializes ED {
    ST    headCharacter;
    ST    tailString;
    literal ST;
};
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O3Ac0So1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
							&lt;strong>Requirement&lt;/strong>:&lt;/br>
ST is a specialization of ED so that any RIM attribute which has the type
ED can be constrained to a ST. The most important case is Act.text, which is
an ED to cater for the use of references and multimedia data, but is often
constrained to plain text.
&lt;/p>
					</body>
      </ownedComment>
      <generalization xmi:id="ED_ST_generalization" general="ED"/>
      <ownedOperation xmi:id="ST-mediaType" name="mediaType" visibility="public">
        <ownedComment xmi:id="_O2JhMio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2NLkCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Fixed to be &quot;text/plain&quot;.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2I6Iio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2I6JCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2I6Iyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2I6JSo1Ed65BMwZ7dmx2w" type="CS">
            <body>text/plain</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-charset" name="charset" visibility="public">
        <ownedComment xmi:id="_O2PAxSo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2SrICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Values of type ST must have a known charset. 
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2PAwCo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2PAwio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2PAwSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-compression" name="compression" visibility="public">
        <ownedComment xmi:id="_O2UgWCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2YKsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Values of type ST cannot be compressed.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2UgUio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2UgVCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2UgUyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2UgVSo1Ed65BMwZ7dmx2w" type="CS">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-reference" name="reference" visibility="public">
        <ownedComment xmi:id="_O2am8yo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2eRUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Values of type ST may not reference content from some other location.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2Z_4io1Ed65BMwZ7dmx2w" type="TEL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2Z_5Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2Z_4yo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2am8Co1Ed65BMwZ7dmx2w" type="TEL">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-integrityCheck" name="integrityCheck" visibility="public">
        <ownedComment xmi:id="_O2gGiCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2jw4Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Integrity check code is not used with values of type ST.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2gGgio1Ed65BMwZ7dmx2w" type="BIN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2gGhCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2gGgyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2gGhSo1Ed65BMwZ7dmx2w" type="BIN">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-integrityCheckAlgorithm" name="integrityCheckAlgorithm" visibility="public">
        <ownedComment xmi:id="_O2mNJSo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2p3gCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Integrity check code is not used with values of type ST.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2lmEio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2mNISo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2mNICo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2mNIio1Ed65BMwZ7dmx2w" type="CS">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-thumbnail" name="thumbnail" visibility="public">
        <ownedComment xmi:id="_O2rsuCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O2v-ICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Values of type ST do not have thumbnails.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O2rssio1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2rstCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2rssyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O2rstSo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NA</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-headCharacter" name="headCharacter" visibility="public">
        <ownedParameter xmi:id="_O2xzUCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2xzUio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2xzUSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-tailString" name="tailString" visibility="public">
        <ownedParameter xmi:id="_O2xzVio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2xzWCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2xzVyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ST-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O2yaZCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O22EwCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two variations of character string literals are defined, a token form
and a quoted string.&lt;object name=&quot;footnote&quot;>
A character string literal is a conversion from a character string to
another data type. Obviously, character string literals for character
strings is a cyclical if not redundant feature. This literal form,
therefore, mainly specifies how character strings are parsed in the
data type specification language.
          &lt;/object>
The token form consists only of the lower case and upper case Latin
alphabet, the ten decimal digits and the underscore. The quoted string
can contain any character between double-quotes. The double quotes
prevent a character string from being interpreted as some other
literal. The token form allows keywords and names to be parsed from
the data type specification language.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O2358So1Ed65BMwZ7dmx2w">
          <body>
ST.literal ST {
  ST : /&quot;[^]+&quot;/ { $.equal($1); }         /* quoted string */
     | /[a-zA-Z0-9_]+/ { $.equal($1); }; /* token form */
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O2xzXCo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O2yaYSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O2yaYCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="ED" name="ED">
      <ownedComment xmi:id="_O2A-USo1Ed65BMwZ7dmx2w">
        <body> 
Data that is primarily intended for human interpretation or for
further machine processing outside the scope of HL7. This includes
unformatted or formatted written language, multimedia data, or
structured information in as defined by a different standard (e.g.,
XML-signatures.)  Instead of the data itself, an &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
						&lt;/object>
may contain only a reference (see &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;TEL&quot;/>&lt;/param>
						&lt;/object>.) Note that
the &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
						&lt;/object> data type is a specialization of the
&lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
						&lt;/object> data type when the &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
						&lt;/object> media
type is text/plain.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O2EBoCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Encapsulated data can be present in two forms, inline or by
reference. Inline data is communicated or moved as part of the
encapsulated data value, whereas by-reference data may reside at a
different (remote) location. The data is the same whether it is
located inline or remote.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O2FPwSo1Ed65BMwZ7dmx2w">
        <body>
type EncapsulatedData alias ED specializes  BIN {
  CS   mediaType;
  CS   charset;
  CS   language;
  CS   compression;
  TEL  reference;
  BIN  integrityCheck;
  CS   integrityCheckAlgorithm;
  ED   thumbnail;
};
    </body>
      </ownedComment>
      <generalization xmi:id="BIN_ED_generalization" general="BIN"/>
      <ownedOperation xmi:id="ED-mediaType" name="mediaType" visibility="public">
        <ownedComment xmi:id="_OsUPxSo1Ed65BMwZ7dmx2w">
          <body> 
Identifies the type of the encapsulated data and identifies a
method to interpret or render the data.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OsWsACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The IANA defined domain of media types is established by the Internet
standard RFC 2045 [&lt;a>&lt;/a>]
and 2046 [&lt;a>&lt;/a>].
RFC 2046 defines the media type to consist of two parts:
      &lt;/p>
							&lt;ol>&lt;li>
									&lt;p>top level media type, and&lt;/p>
								&lt;/li>&lt;li>
									&lt;p>media subtype.&lt;/p>
								&lt;/li>&lt;/ol>
							&lt;p>
However, this specification treats the entire media type as one atomic
code symbol in the form defined by IANA, i.e., top level type followed
by a slash &quot;/&quot; followed by media subtype. Currently defined media
types are registered in a database
[&lt;a>&lt;/a>]
maintained by IANA. Currently more than 160 different MIME media types are
defined, with the list growing rapidly. In general, all those types
defined by the IANA may be used.
      &lt;/p>
							&lt;p>
To promote interoperability, this specification prefers certain media
types to others. This is to define a greatest common denominator on
which interoperability is not only possible, but that is powerful
enough to support even advanced multimedia communication needs.
      &lt;/p>
							&lt;p>
								&lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;MediaType&quot;/>&lt;/param>
								&lt;/object> below assigns a status to
certain MIME media types, where the status means one of the following:
      &lt;/p>
							&lt;ul>&lt;li>
									&lt;p>
										&lt;strong>required&lt;/strong>: Every HL7 application
must support at least the required media types if it supports a given
kind of media. One required media-type for each kind of media
exists. Some media types are required for a specific purpose, which is
then indicated as &quot;required for ...&quot;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
										&lt;strong>recommended&lt;/strong>: Other media types are
recommended for a particular purpose. For any given purpose there
should be only very few additionally recommended media types and the
rationale, conditions and assumptions of such recommendations must be
made very clear.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
										&lt;strong>indifferent&lt;/strong>: This status means, HL7
neither forbids nor endorses the use of this media type. All media
types not mentioned in &lt;object name=&quot;conceptDomainRef&quot;>
											&lt;param name=&quot;domain&quot; value=&quot;MediaType&quot;/>&lt;/param>
										&lt;/object> have status indifferent by default.
Since there is one required and several recommended media types for most
practically relevant use cases, media types of this status should be used
very conservatively.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
										&lt;strong>deprecated&lt;/strong>: Deprecated media types
should not be used, because these media types are flawed, because
there are better alternatives, or because of certain risks. Such risks
could be security risks, for example, the risk that such a media type
could spread computer viruses. Not every flawed media type is marked
as deprecated, though. A media type that is not mentioned in Table 6,
and thus has status indifferent, may well be flawed.
          &lt;/p>
								&lt;/li>&lt;/ul>
							&lt;p>
The set of required media types is very small so that no undue
requirements are forced on HL7 applications, especially legacy
systems. In general, no HL7 application is forced to support any given
kind of media other than written text. For example, many systems just
do not want to receive audio data, because those systems can only show
written text to their users. It is a matter of application conformance
statements to say: &quot;I will not handle audio&quot;. Only if a system claims
to handle audio media, it must support the required media type for
audio.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedRule xmi:id="_OsX6ISo1Ed65BMwZ7dmx2w" constrainedElement="ED-mediaType">
          <name xsi:nil="true"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_OsX6Iio1Ed65BMwZ7dmx2w">
            <body> &#xA;invariant(ED x) where x.nonNull {&#xA;  x.mediaType.nonNull;&#xA;};&#xA;        &#xA;The mediaType is a mandatory property, i.e., every non-NULL instance of&#xA;ED must have a non-NULL medaType property.&#xA;        </body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_OsTotSo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OsUPwSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OsUPwCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_OsUPwio1Ed65BMwZ7dmx2w" type="CS">
            <body>text/plain</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-charset" name="charset" visibility="public">
        <ownedComment xmi:id="_OsYhMio1Ed65BMwZ7dmx2w">
          <body> 
For character-based encoding types, this property specifies the
character set and character encoding used. The charset shall be
identified by an Internet Assigned Numbers Authority (IANA) 
Charset Registration [&lt;a>&lt;/a>] 
in accordance with RFC 2978 [&lt;a>&lt;/a>].
        </body>
        </ownedComment>
        <ownedComment xmi:id="_Osa9cCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The charset domain is maintained by the &lt;code>Internet Assigned
Numbers Authority&lt;/code> (IANA) [&lt;a>&lt;/a>].
The IANA source specifies names and multiple aliases for most character
sets. For HL7's purposes, use of multiple alias names is not
allowed. The standard name for HL7 is the one marked by IANA as
&quot;preferred for MIME.&quot;  If IANA has not marked one of the aliases as
&quot;preferred for MIME&quot; the main name shall be the one used for HL7.
        &lt;/p>
							&lt;p>
								&lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;Charset&quot;/>&lt;/param>
								&lt;/object> lists a few of the IANA defined
character sets that are of interest to current HL7 members.

						&lt;/p>
							&lt;p>
The charset property needs to be known where the data of the ED is character type
data in any form. If the data is provided in-line, then the charset must be 
known. If the data is provided as a reference, and the access method does not provide
the charset for the data, typically as a mime header, then the charset must be 
conveyed as part of the ED. 
						&lt;/p>
							&lt;p>
Interested readers may also want to consult the &quot;Character Model for
the World Wide Web&quot; [http://www.w3.org/TR/charmod] for a more complete
discussion of character set and related issues
&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OsX6JCo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OsX6Jio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OsX6JSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-language" name="language" visibility="public">
        <ownedComment xmi:id="_Oscypyo1Ed65BMwZ7dmx2w">
          <body> 
For character based information the language property specifies the
human language of the text.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_OsgdACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The principles of the code domain of this attribute are specified by
the Internet standard &lt;a>&lt;/a>. The RFC 3066
coding scheme is constructed from a primary subtag component encoded
using the language codes of ISO 639, plus two codes for extensions
for languages not represented in ISO 639.  The code optionally includes a
second subtag component encoded using the two letter country codes of ISO
3166, or a language code extension registered by the Internet Assigned
Names Authority [http://www.iana.org/assignments/language-tags].&lt;object name=&quot;footnote&quot;>
									RFC 3066 is
the HL7-approved coding system for all reference to human languages,
in data types and elsewhere.
            &lt;/object>
							&lt;/p>
							&lt;p>
While Language tags usually alter the meaning of the text, the language does
not alter the meaning of the characters in the text.
            &lt;object name=&quot;footnote&quot;>
For this reason, a system or site that does not deal with multilingual
text or names in the real world can safely ignore the language
property.
            &lt;/object>
							&lt;/p>
							&lt;p>
The language tag should not be mandatory if it is not mandatory in the
implementation technology. Semantically, language tagging of strings
follows a default-logic. In circumstances where a realm may support
multiple langauges, it is up to the realm to define rules to handle
language where none is specified when no language is specified. If no
other rule is specified, the local language of the reader is assumed.
If a language is set for an entire message or document, that language
is the default. If any information element or value that is superior in
the syntax hierarchy specifies a language, that language is the default
for all subordinate text values.
        &lt;/p>
							&lt;p>
If language tags are present in the beginning of the encoded binary
text (e.g., through Unicode's plane-14 tags) this is the source of the
language property of the encapsulated data value.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OsiSMSo1Ed65BMwZ7dmx2w">
          <body> 
The need for a language code for text data values is documented in RFC
2277, IETF Policy on Character Sets and Languages [&lt;a>&lt;/a>]. Further background
information can be found in Using International Characters in Internet
Mail [&lt;a>&lt;/a>], a memo by the
Internet Mail Consortium.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oscyoio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OscypCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oscyoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-compression" name="compression" visibility="public">
        <ownedComment xmi:id="_OskudSo1Ed65BMwZ7dmx2w">
          <body> 
Indicates whether the raw byte data is compressed, and what
compression algorithm was used.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_OsoY0Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
								&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
								&lt;/object> may never be compressed.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OskHYio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OskucSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OskucCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Oskucio1Ed65BMwZ7dmx2w" type="CS">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-reference" name="reference" visibility="public">
        <ownedComment xmi:id="_O1uDZyo1Ed65BMwZ7dmx2w">
          <body> 
A telecommunication address (TEL), such as a URL for HTTP or FTP,
which will resolve to precisely the same binary data that could as
well have been provided as inline data.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O1wfoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The semantic value of an encapsulated data value is the same,
regardless whether the data is present inline data or just
by-reference. However, an encapsulated data value without inline data
behaves differently, since any attempt to examine the data requires
the data to be downloaded from the reference. An encapsulated data
value may have both inline data and a reference.
        &lt;/p>
							&lt;p>
The reference must point to the same data as provided inline.
It is an error if the data resolved through the reference does
not match either the integrity check, in-line data, or data that
had earlier been retrieved through the reference and then cached.
        &lt;/p>
							&lt;p>
The reference may contain a usablePeriod to indicate that the
data may only be available for a limited period of time. Whether
the reference is limited by a usablePeriod or not, the content of
the reference is fixed for all time. Any application using the
reference must always receive the same data. The reference cannot
be reused to send a different version of the same data, or different
data.
        &lt;/p>
							&lt;p>
By-reference encapsulated data may not be allowed depending on the
attribute or component that is declared encapsulated data.
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
								&lt;/object> must always be inline.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O1uDYio1Ed65BMwZ7dmx2w" type="TEL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1uDZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1uDYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-integrityCheck" name="integrityCheck" visibility="public">
        <ownedComment xmi:id="_O1yU0yo1Ed65BMwZ7dmx2w">
          <body> 
The integrity check is a short binary value representing a
cryptographically strong checksum that is calculated over the binary
data. The purpose of this property, when communicated with a reference
is for anyone to validate later whether the reference still resolved
to the same data that the reference resolved to when the encapsulated
data value with reference was created.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O10xECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
It is an error if the data resolved through the reference does not match
the integrity check.
        &lt;/p>
							&lt;p>
The integrity check is calculated according to the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;integrityCheckAlgorithm&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
								&lt;/object>. By default, the &lt;code>Secure
Hash Algorithm-1&lt;/code> (SHA-1) shall be used. The integrity check is
binary encoded according to the rules of the integrity check
algorithm.
        &lt;/p>
							&lt;p>
The integrity check is calculated over the raw binary data that is
contained in the data component, or that is accessible through the
reference. No transformations are made before the integrity check is
calculated. If the data is compressed, the Integrity Check is
calculated over the compressed data.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O1xtwio1Ed65BMwZ7dmx2w" type="BIN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1yU0Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1xtwyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-integrityCheckAlgorithm" name="integrityCheckAlgorithm" visibility="public">
        <ownedComment xmi:id="_O11_OCo1Ed65BMwZ7dmx2w">
          <body> 
Specifies the algorithm used to compute the integrityCheck
value.&lt;object name=&quot;footnote&quot;>
The cryptographically strong checksum algorithm Secure Hash
Algorithm-1 (SHA-1) is currently the industry standard. It has
superseded the MD5 algorithm only a couple of years ago, when certain
flaws in the security of MD5 were discovered. Currently the SHA-1 hash
algorithm is the default choice for the integrity check algorithm.
Note that SHA-256 is also entering widespread usage.
            &lt;/object>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O11_Mio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O11_NCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O11_Myo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O11_NSo1Ed65BMwZ7dmx2w" type="CS">
            <body>SHA-1</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-thumbnail" name="thumbnail" visibility="public">
        <ownedComment xmi:id="_O15Chyo1Ed65BMwZ7dmx2w">
          <body> 
An abbreviated rendition of the full data. A thumbnail requires
significantly fewer resources than the full data, while still
maintaining some distinctive similarity with the full data. A
thumbnail is typically used with by-reference encapsulated data. It
allows a user to select data more efficiently before actually
downloading through the reference.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_O17ewCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Originally, the term thumbnail refers to an image in a lower
resolution (or smaller size) than another image. However, the
thumbnail concept can be metaphorically used for media types other
than images. For example, a movie may be represented by a shorter
clip; an audio-clip may be represented by another audio-clip that is
shorter, has a lower sampling rate, or a lossy compression.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedRule xmi:id="_O18s4So1Ed65BMwZ7dmx2w" constrainedElement="ED-thumbnail">
          <name xsi:nil="true"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_O18s4io1Ed65BMwZ7dmx2w">
            <body> &#xA;invariant(ED x) where x.thumbnail.nonNull {&#xA;  x.thumbnail.thumbnail.isNull;&#xA;};&#xA;          &#xA;Thumbnails may not be allowed depending on the attribute or component&#xA;that is declared encapsulated data. &lt;object name=&quot;datatypeRef&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/object> never have thumbnails, and a thumbnail may not itself&#xA;contain a thumbnail.&#xA;          </body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_O15CgSo1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O15Cgyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O15Cgio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O15ChCo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ED-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O19T9io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O1_wMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two values of type ED are equal if and only if their mediatype
and data are equal. For those &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
								&lt;/object> values
with compressed data or referenced data, only the de-referenced and
uncompressed data counts for the equality test. The compression, thumbnail
and reference property themselves are excluded from the equality test.
In addition the language property is excluded from the test, due to the
problems this would introduce values of type ED where the language is not
specified. If the ED.mediaType is character based and the charset property
is not equal, the charset property must be resolved through mapping of the
data between the different character sets.
        &lt;/p>
							&lt;p>
The integrity check algorithm and integrity check is excluded from the
equality test. However, since equality of integrity check value is
strong indication for equality of the data, the equality test can be
practically based on the integrity check, given equal integrity check
algorithm properties.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O19T8Co1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O19T8io1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O19T8So1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O19T8yo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="BIN" name="BIN" visibility="protected">
      <ownedComment xmi:id="_OsOwMio1Ed65BMwZ7dmx2w">
        <body> 
Binary data is a raw block of bits. Binary data is a protected
type that should not be declared outside the data type specification.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OsRMcCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
A bit is semantically identical with a non-null Boolean value. Thus,
all binary data is — semantically — a sequence of non-null
Boolean values.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OsSakSo1Ed65BMwZ7dmx2w">
        <body>
protected type BinaryData alias BIN specializes LIST&lt;BN>;
    </body>
      </ownedComment>
      <ownedRule xmi:id="_OsTosSo1Ed65BMwZ7dmx2w" constrainedElement="BIN">
        <name xsi:nil="true"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_OsTosio1Ed65BMwZ7dmx2w">
          <body> &#xA;invariant(BIN x) where x.nonNull {&#xA;  x.notEmpty;&#xA;  x.length.greaterThan(0);&#xA;};&#xA;      &#xA;An empty sequence is not considered binary data but counts as a&#xA;NULL-value. In other words, non-NULL binary data contains at least one&#xA;bit. No bit in a non-NULL binary data value can be NULL.&#xA;      </body>
        </specification>
      </ownedRule>
      <generalization xmi:id="LISTBN_BIN_generalization" general="LISTBN"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTBN" name="LIST&lt;BN>">
      <templateBinding xmi:id="LISTBN-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_OsKewio1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="BN"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LIST" name="LIST">
      <ownedComment xmi:id="_OsE_MSo1Ed65BMwZ7dmx2w">
        <body> 
A value that contains other discrete (but not necessarily distinct) values in a defined sequence. 
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OsICgCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
A sequence may contain NULL values as items.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OsJQoCo1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type Sequence&lt;T> alias LIST&lt;T> specializes ANY {
            T         head;
            LIST&lt;T>   tail;
            BL        isEmpty;
            BL        notEmpty;
	    T         item(INT index);
            BL        contains(T item);
            INT       length;
  literal   ST;
  promotion LIST&lt;T>   (T x);
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_Oplr6So1Ed65BMwZ7dmx2w" parameter="_Oplr6io1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_Oplr6io1Ed65BMwZ7dmx2w" parameteredElement="_Oplr6yo1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_Oplr6yo1Ed65BMwZ7dmx2w" name="T" templateParameter="_Oplr6io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="ANY_LIST_generalization" general="ANY"/>
      <ownedOperation xmi:id="LIST-head" name="head" visibility="public">
        <ownedComment xmi:id="_OpmS9io1Ed65BMwZ7dmx2w">
          <body> 
The first item in this sequence. The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
							&lt;/object> is a definitional
property for the semantics of the sequence.  
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OpmS8So1Ed65BMwZ7dmx2w" type="_Oplr6yo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OpmS8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OpmS8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-tail" name="tail" visibility="public">
        <ownedComment xmi:id="_OpqkaCo1Ed65BMwZ7dmx2w">
          <body> 
The sequence following the first item in this sequence. The
&lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
							&lt;/object> is a definitional property for the semantics of the
sequence.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OpqkYyo1Ed65BMwZ7dmx2w" type="LISTT" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OpqkZSo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OpqkZCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-isEmpty" name="isEmpty" visibility="public">
        <ownedComment xmi:id="_OqOlFyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate that is &lt;code>true&lt;/code> if this sequence is an empty
sequence, i.e., if it contains no items.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqSPcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Notice the difference between empty-sequence and NULL: an empty
sequence is a proper sequence, not a null-value.  

						&lt;/p>
							&lt;p>
Notice that head and tail being NULL is only a necessary condition but
not sufficient for determining an empty list, since a sequence may
contain NULL-values as items, this condition can mean that this list
has only a head item that happens to be NULL.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqOlEio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqOlFCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqOlEyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-notEmpty" name="notEmpty" visibility="public">
        <ownedComment xmi:id="_OqUrsCo1Ed65BMwZ7dmx2w">
          <body> 
A predicate that is &lt;code>true&lt;/code> if this sequence is
not-empty. Negation of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;isEmpty&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;LIST&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OqUEoio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqUEpCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqUEoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-item" name="item" visibility="public">
        <ownedComment xmi:id="_OrvoBCo1Ed65BMwZ7dmx2w">
          <body> 
The item at the given sequential position (index) in the sequence. The
index zero refers to the first element (head) of the sequence.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OqYWESo1Ed65BMwZ7dmx2w" type="_Oplr6yo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqYWEyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqYWEio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OrvoASo1Ed65BMwZ7dmx2w" name="index" type="INT"/>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-contains" name="contains" visibility="public">
        <ownedComment xmi:id="_OryrVyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate that is &lt;code>true&lt;/code> if this sequence contains the
given item value.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OryrUSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OryrUyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OryrUio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OryrVCo1Ed65BMwZ7dmx2w" name="item" type="_Oplr6yo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-length" name="length" visibility="public">
        <ownedComment xmi:id="_Or1Hlio1Ed65BMwZ7dmx2w">
          <body> 
The number of elements in the sequence. NULL elements are counted as
regular sequence elements.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Or1HkSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Or1Hkyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Or1Hkio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_Or4K5So1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Or6nICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two lists are equal if and only if they are both empty, or if both
their head and their tail are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Or3j0So1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Or4K4So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Or4K4Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Or4K4io1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_Or71Ryo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Or-4kCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
When the element type T has a literal form, the sequence &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;LIST&quot;/>&lt;/param>
								&lt;/object>&lt;T> has a literal form. List elements
are enumerated, separated by semicolon, and enclosed in parentheses.
      &lt;/p>
							&lt;tablewidth=&quot;90%&quot; hl7id=&quot;table-LIST.literal.example&quot; style=&quot;Requirement&quot;  >&lt;caption>Examples&lt;/caption>&lt;thead>&lt;tr>&lt;th>literal&lt;/th>&lt;th>meaning&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>(1; 3; 5; 7; 19)&lt;/td>&lt;td>a sequence of integer numbers or real numbers&lt;/td>&lt;/tr>&lt;tr>&lt;td>(3; 1; 5; 19; 7)&lt;/td>&lt;td>a different sequence of integer numbers or real numbers&lt;/td>&lt;/tr>&lt;tr>&lt;td>(1.2 m; 17.8 m; 2.67 m)&lt;/td>&lt;td>a sequence of discrete physical quantities&lt;/td>&lt;/tr>&lt;tr>&lt;td>(apple; orange; banana)&lt;/td>&lt;td>a sequence of character strings&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OsAGsCo1Ed65BMwZ7dmx2w">
          <body>
LIST&lt;T>.literal ST {
  LIST&lt;T>
  : &quot;(&quot; elements &quot;)&quot;        { $.equal($2); }
  | &quot;(&quot; &quot;)&quot;         { $.isEmpty; };
  LIST&lt;T> elements
         : T &quot;;&quot; elements     { $.head.equal($1);
            $.tail.equal($3); }
         | T          { $.head.equal($1);
            $.tail.isEmpty; };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Or71Qio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Or71RCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Or71Qyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="LIST-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_OsBU2Co1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OsDxECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A data value of type T can be promoted into a trivial sequence of T with
that data value as its only item.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OsBU0io1Ed65BMwZ7dmx2w" type="LISTT" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OsBU1Co1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OsBU0yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OsBU1So1Ed65BMwZ7dmx2w" name="x" type="_Oplr6yo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTT" name="LIST&lt;T>">
      <templateBinding xmi:id="LISTT-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_OpqkYSo1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="_Oplr6yo1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="BL" name="BL">
      <ownedComment xmi:id="_OqH3YSo1Ed65BMwZ7dmx2w">
        <body> 
The Boolean type stands for the values of two-valued logic. A Boolean
value can be either &lt;code>true&lt;/code> or &lt;code>false&lt;/code>, or, as
any other value may be NULL.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OqK6sCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
With any data value potentially being NULL, the two-valued logic is
effectively extended to a three-valued logic as shown in the following
truth tables:
    &lt;/p>
						&lt;tablehl7id=&quot;BL-truth-tables-not&quot; style=&quot;Requirement&quot;  >&lt;caption>Truth Table: NOT&lt;/caption>&lt;thead>&lt;tr>&lt;th>NOT&lt;/th>&lt;th> &lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>false&lt;/td>&lt;/tr>&lt;tr>&lt;td>true&lt;/td>&lt;/tr>&lt;tr>&lt;td>NULL&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						&lt;tablehl7id=&quot;BL-truth-tables-and&quot; style=&quot;Requirement&quot;  >&lt;caption>Truth Table: AND&lt;/caption>&lt;thead>&lt;tr>&lt;th>AND&lt;/th>&lt;th>true&lt;/th>&lt;th>false&lt;/th>&lt;th>NULL&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>true&lt;/td>&lt;td>false&lt;/td>&lt;td>NULL&lt;/td>&lt;/tr>&lt;tr>&lt;td>false&lt;/td>&lt;td>false&lt;/td>&lt;td>false&lt;/td>&lt;/tr>&lt;tr>&lt;td>NULL&lt;/td>&lt;td>false&lt;/td>&lt;td>NULL&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						&lt;tablehl7id=&quot;BL-truth-tables-or&quot; style=&quot;Requirement&quot;  >&lt;caption>Truth Table: OR&lt;/caption>&lt;thead>&lt;tr>&lt;th>OR&lt;/th>&lt;th>true&lt;/th>&lt;th>false&lt;/th>&lt;th>NULL&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>true&lt;/td>&lt;td>true&lt;/td>&lt;td>true&lt;/td>&lt;/tr>&lt;tr>&lt;td>true&lt;/td>&lt;td>false&lt;/td>&lt;td>NULL&lt;/td>&lt;/tr>&lt;tr>&lt;td>true&lt;/td>&lt;td>NULL&lt;/td>&lt;td>NULL&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						&lt;p>
Where a boolean operation is performed upon 2 data types with different
nullFlavors, the nullFlavor of the result is the first common ancestor
of the 2 different nullFlavors, though conformant applications may also
create a result that is any common ancestor
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OqMv4So1Ed65BMwZ7dmx2w">
        <body>
type Boolean alias BL specializes ANY
    values(true, false)
{
            BL  not;
            BL  and(BL x);
            BL  or(BL x);
            BL  xor(BL x);
            BL  implies(BL x);
  literal   ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_BL_generalization" general="ANY"/>
      <ownedOperation xmi:id="BL-not" name="not" visibility="public">
        <ownedComment xmi:id="_OpuOySo1Ed65BMwZ7dmx2w">
          <body> 
Negation of a Boolean turns &lt;code>true&lt;/code> into &lt;code>false&lt;/code>
and &lt;code>false&lt;/code> into &lt;code>true&lt;/code> and is NULL for NULL
values.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OpwrACo1Ed65BMwZ7dmx2w">
          <body>
invariant(BL x) {
  true.not.equal(false);
  false.not.equal(true);
  x.isNull.equal(x.not.isNull);
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OpuOxCo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OpuOxio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OpuOxSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="BL-and" name="and" visibility="public">
        <ownedComment xmi:id="_OpygNCo1Ed65BMwZ7dmx2w">
          <body> 
Conjunction (AND) is associative and commutative, with
&lt;code>true&lt;/code> as a neutral element. &lt;code>False&lt;/code> AND any
Boolean value is &lt;code>false&lt;/code>. These rules hold even if one or
both of the operands are NULL. If both operands for AND are NULL,
the result is NULL.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_Op08cCo1Ed65BMwZ7dmx2w">
          <body>
invariant(BL x) {
  x.and(true).equal(x);
  x.and(false).equal(false);
  x.isNull.implies(x.and(y).isNull);
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Opx5Iio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OpygMCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Opx5Iyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OpygMSo1Ed65BMwZ7dmx2w" name="x" type="BL"/>
      </ownedOperation>
      <ownedOperation xmi:id="BL-or" name="or" visibility="public">
        <ownedComment xmi:id="_Op2KmCo1Ed65BMwZ7dmx2w">
          <body> 
The disjunction &lt;code>x&lt;/code> OR &lt;code>y&lt;/code> is &lt;code>false&lt;/code>
if and only if &lt;code>x&lt;/code> is &lt;code>false&lt;/code> and &lt;code>y&lt;/code>
is &lt;code>false&lt;/code>.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_Op5N4Co1Ed65BMwZ7dmx2w">
          <body>
invariant(BL x, y) {
  x.or(y).equal(x.not.and(y.not).not);
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Op2Kkio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Op2KlCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Op2Kkyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Op2KlSo1Ed65BMwZ7dmx2w" name="x" type="BL"/>
      </ownedOperation>
      <ownedOperation xmi:id="BL-xor" name="xor" visibility="public">
        <ownedComment xmi:id="_Op6cCCo1Ed65BMwZ7dmx2w">
          <body> 
The exclusive-OR constrains OR such that the two operands may not both
be &lt;code>true&lt;/code>.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_Op84QCo1Ed65BMwZ7dmx2w">
          <body>
invariant(BL x, y) {
  x.xor(y).equal(x.or(y).and(x.and(y).not));
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Op6cAio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Op6cBCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Op6cAyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Op6cBSo1Ed65BMwZ7dmx2w" name="x" type="BL"/>
      </ownedOperation>
      <ownedOperation xmi:id="BL-implies" name="implies" visibility="public">
        <ownedComment xmi:id="_Op-tcyo1Ed65BMwZ7dmx2w">
          <body> 
A rule of the form IF &lt;code>condition&lt;/code> THEN
&lt;code>conclusion&lt;/code>. Logically the implication is defined as the
disjunction of the negated condition and the conclusion, meaning that
when the condition is &lt;code>true&lt;/code> the conclusion must be
&lt;code>true&lt;/code> to make the overall statement &lt;code>true&lt;/code>.
The logical implication is important to make invariant statements. 
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqBJsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The implication is not reversible and does not specify what is
&lt;code>true&lt;/code> when the condition is &lt;code>false&lt;/code> (&lt;code>ex
falso quodlibet&lt;/code> lat. “from false follows anything”).
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OqCX0So1Ed65BMwZ7dmx2w">
          <body>
invariant(BL condition, conclusion) {
  condition.implies(conclusion).equal(
         condition.not.or(conclusion));
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Op-GYio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Op-GZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Op-GYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Op-tcCo1Ed65BMwZ7dmx2w" name="x" type="BL"/>
      </ownedOperation>
      <ownedOperation xmi:id="BL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_OqDl9yo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OqGpQCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form of the Boolean is determined by the named values
specified in the values clause, i.e., &lt;code>true&lt;/code> and
&lt;code>false&lt;/code>.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqDl8io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqDl9Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqDl8yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="INT" name="INT">
      <ownedComment xmi:id="_OrqIcCo1Ed65BMwZ7dmx2w">
        <body> 
Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise numbers
that are results of counting and enumerating. Integer numbers are
discrete, the set of integers is infinite but countable.  No arbitrary
limit is imposed on the range of integer numbers. Two NULL flavors are
defined for the positive and negative infinity.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OrsksCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Since the integer number data type includes all of the semantics of
the mathematical integer number concept, the basic operations plus
(addition) and times (multiplication) are defined. These operations
are defined here as characterizing operations in the sense of ISO
11404, and because these operations are needed in other parts of this
specification, namely the semantics of the literal form.
    &lt;/p>
						&lt;p>
The traditional recursive definitions of addition and multiplication
are due to Grassmann, and use the notion of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;successor&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
							&lt;/object>.&lt;object name=&quot;footnote&quot;>
H. Grassman. Lehrbuch der Arithmetik. 1861. We prefer
Grassman's original axioms to the Peano axioms, because Grassman's
axioms work for all integers, not just for natural numbers. Also, &quot;it
is rather well-known, through Peano's own acknowledgment, that Peano
borrowed his axioms from Dedekind and made extensive use of
Grassmann's work in his development of the axioms.&quot; (Hao Wang. The
Axiomatization of Arithmetic. J. Symb. Logic; 1957:22(2); p. 145.)
        &lt;/object>
						&lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OruZ4Co1Ed65BMwZ7dmx2w">
        <body>
type IntegerNumber alias INT specializes QTY {
          INT   successor;
          INT   plus(QTY x);
          INT   times(INT x);
          INT   predecessor;
          INT   negated;
          BL    nonNegative;
          BL    isNegative;
          INT   dividedBy(INT x);
          INT   remainder(INT x);
          BL    isOne;
  literal ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="QTY_INT_generalization" general="QTY"/>
      <ownedOperation xmi:id="INT-successor" name="successor" visibility="public">
        <ownedComment xmi:id="_OrAoOCo1Ed65BMwZ7dmx2w">
          <body> 
The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value that is greater than this &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value but
where no &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value exists between this value and its successor.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrAoMyo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrAoNSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrAoNCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_OrDrgyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OrGHwCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The difference between two &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> values is also a &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> value.
						&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OrDEcSo1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrDrgCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrDEcio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-plus" name="plus" visibility="public">
        <ownedParameter xmi:id="_OrHV4io1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrHV5Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrHV4yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OrHV5So1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="INT-times" name="times" visibility="public">
        <ownedComment xmi:id="_OrHV7yo1Ed65BMwZ7dmx2w">
          <body> 
The result of multiplying this integer with the operand, equivalent to
repeated additions of this integer.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrHV6So1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrHV6yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrHV6io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OrHV7Co1Ed65BMwZ7dmx2w" name="x" type="INT"/>
      </ownedOperation>
      <ownedOperation xmi:id="INT-predecessor" name="predecessor" visibility="public">
        <ownedComment xmi:id="_OrKZNio1Ed65BMwZ7dmx2w">
          <body> 
The inverse of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;successor&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrKZMSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrKZMyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrKZMio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-negated" name="negated" visibility="public">
        <ownedComment xmi:id="_OrM1dio1Ed65BMwZ7dmx2w">
          <body> 
The inverse element of the &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value, another &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value,
which, when added to that value yields zero (the neutral element.)
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrM1cSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrM1cyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrM1cio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-nonNegative" name="nonNegative" visibility="public">
        <ownedComment xmi:id="_OrQf1Co1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating whether the &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> zero (neutral element) is
less or equal to this &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrP4wSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrQf0So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrQf0Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-isNegative" name="isNegative" visibility="public">
        <ownedComment xmi:id="_OrUKNio1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating whether this &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> is less than zero (not
non-negative.)
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrUKMSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrUKMyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrUKMio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-dividedBy" name="dividedBy" visibility="public">
        <ownedComment xmi:id="_OrX0lyo1Ed65BMwZ7dmx2w">
          <body> 
The integer division operation of this integer (dividend) with another
integer (divisor) is the integer number of times the divisor fits into
the dividend.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OrX0kSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OrX0kyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OrX0kio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OrX0lCo1Ed65BMwZ7dmx2w" name="x" type="INT"/>
      </ownedOperation>
      <ownedOperation xmi:id="INT-remainder" name="remainder" visibility="public">
        <ownedComment xmi:id="_Orbe9yo1Ed65BMwZ7dmx2w">
          <body> 
The remainder of the integer division.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OrfJUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This definition of the remainder matches the C and Java programming
languages.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Orbe8So1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Orbe8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Orbe8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Orbe9Co1Ed65BMwZ7dmx2w" name="x" type="INT"/>
      </ownedOperation>
      <ownedOperation xmi:id="INT-isOne" name="isOne" visibility="public">
        <ownedComment xmi:id="_Org-hyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating if this value is the number one, i.e., the
neutral element of multiplication. There is exactly one integer
that has this property.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Org-gio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Org-hCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Org-gyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="INT-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_Orko5io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OrnFICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form of an integer is a simple decimal number, i.e. a
string of decimal digits.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OroTQSo1Ed65BMwZ7dmx2w">
          <body>
INT.literal ST {
  INT digit : &quot;0&quot;         { $.isZero; }
            | &quot;1&quot;         { $.equal(0.successor); }
            | &quot;2&quot;         { $.equal(1.successor); }
            | &quot;3&quot;         { $.equal(2.successor); }
            | &quot;4&quot;         { $.equal(3.successor); }
            | &quot;5&quot;         { $.equal(4.successor); }
            | &quot;6&quot;         { $.equal(5.successor); }
            | &quot;7&quot;         { $.equal(6.successor); }
            | &quot;8&quot;         { $.equal(7.successor); }
            | &quot;9&quot;         { $.equal(8.successor); };

  INT uint : digit        { $.equal($1); }
           | uint digit   { $.equal($1.times(9.successor).plus($2)); };

  INT : uint              { $.equal($1); }
      | &quot;+&quot; uint          { $.equal($2); }
      | &quot;-&quot; uint          { $.equal($2.negated); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Orko4So1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Orko4yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Orko4io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="QTY" name="QTY" isAbstract="true">
      <ownedComment xmi:id="_Oq890Co1Ed65BMwZ7dmx2w">
        <body> 
The quantity data type is an abstract generalization for all data
types (1) whose value set has an order relation (less-or-equal) and
(2) where difference is defined in all of the data type's totally
ordered value subsets.  The quantity type abstraction is needed in
defining certain other types, such as the interval and the probability
distribution.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_Oq_aECo1Ed65BMwZ7dmx2w">
        <body>
abstract type Quantity alias QTY specializes ANY {
  BL   lessOrEqual(QTY x);
  BL   compares(QTY x);
  TYPE diffType;
  QTY  minus(QTY x);
  QTY  plus(QTY x);
  BL   isZero;
  BL   lessThan(QTY x);
  BL   greaterOrEqual(QTY x);
  BL   greaterThan(QTY x);
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_QTY_generalization" general="ANY"/>
      <ownedOperation xmi:id="QTY-lessOrEqual" name="lessOrEqual" visibility="public">
        <ownedComment xmi:id="_OqY9Jyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate expressing an order relation that is reflexive, asymmetric
and transitive, between this quantity and another quantity.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqcngCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
								&lt;/object> relation is defined on any totally ordered partition
of the quantity data type. A totally ordered partition is a subset of
the data types's defined values where all elements have a defined
order (e.g., the integer and real numbers are totally ordered.)
      &lt;/p>
							&lt;p>
By contrast, a partially ordered set is a set where some, but not all
pairs of elements are comparable through the order relation (e.g., a
tree structure or the set of physical quantities is a partially
ordered set.)  Two data values &lt;code>x&lt;/code> and &lt;code>y&lt;/code> of an
ordered type are comparable (&lt;code>x&lt;/code>.compares(&lt;code>y&lt;/code>))
if the less-or-equal relation holds in either way (&lt;code>x&lt;/code>
≤ &lt;code>y&lt;/code> or &lt;code>y&lt;/code> ≤ &lt;code>x&lt;/code>).
      &lt;/p>
							&lt;p>
A partial order relation generates totally ordered subsets whose union
is the entire set (e.g., the set of all length is a totally ordered
subset of the set of all physical quantities.)
      &lt;/p>
							&lt;p>
For example, a tree structure is partially ordered, where the root is
considered less or equal to a leaf, but there may not be an order
among the leafs. Also, physical quantities are partially ordered,
since an order exists only among quantities of the same dimension
(e.g., between two lengths, but not between a length and a time.)  A
totally ordered subset of a tree is a path that transitively connects
a leaf to the root. The physical dimension of time is a totally
ordered subset of physical quantities.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqY9ISo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqY9Iyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqY9Iio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OqY9JCo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-equal" name="equal" visibility="public">
        <ownedParameter xmi:id="_Oqecsio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqectCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oqecsyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OqectSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-compares" name="compares" visibility="public">
        <ownedComment xmi:id="_OqfDxCo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating if this value and the operand can be compared
as to which is greater than the other.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqiuICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two quantities are comparable if they are both elements of a common
totally ordered partition of their data types' value space. The
definition is based on &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;lessOrEqual&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;QTY&quot;/>&lt;/param>
								&lt;/object>.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqecuSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqfDwCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oqecuio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OqfDwSo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_OqkjVyo1Ed65BMwZ7dmx2w">
          <body> 
The type of the difference between 2 values of a specific QTY data type.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqoNsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The type will be some data type that further specializes QTY
          &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqkjUio1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqkjVCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqkjUyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-minus" name="minus" visibility="public">
        <ownedComment xmi:id="_Oqpb2Co1Ed65BMwZ7dmx2w">
          <body> 
A quantity expressing the &quot;distance&quot; of this quantity from the operand
quantity, that must be comparable. The data type of the difference
quantity is related to the operand quantities but need not be the
same.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqsfICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The result of minus has the data type returned by the
diffType property of the instance.
            &lt;/p>
							&lt;p>
A difference is defined in an ordered set if it is semantically
meaningful to state that Δ is the difference between the values
&lt;code>x&lt;/code> and &lt;code>y&lt;/code>. This difference Δ must be
meaningful independently from the values &lt;code>x&lt;/code> and
&lt;code>y&lt;/code>. This independence exists if for all values
&lt;code>u&lt;/code> one can meaningfully derive a value &lt;code>v&lt;/code> such
that Δ would also be the difference between &lt;code>u&lt;/code> and
&lt;code>v&lt;/code>. The judgment for what is &lt;code>meaningful&lt;/code>
cannot be defined formally.&lt;object name=&quot;footnote&quot;>
The quantity data type abstraction corresponds to the notion of
difference scales in contrast to ordinal scales and ratio scales
(Guttman and Stevens). A data type with only the order requirement but
not the difference requirement would be an ordinal. Ordinals are not
currently defined with a special data type. Instead, ordinals are
usually coded values, where the underlying code system specifies
ordinal semantics. This ordinal semantics, however, is not reflected
in the HL7 data type semantics at this time.
          &lt;/object>
							&lt;/p>
							&lt;p>
The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
								&lt;/object> has a data type that can express the difference between
two values for which the ordering relation is defined (i.e., two
elements of a common totally ordered subset.)  For example, the
difference data type of integer number is integer number, but the
difference type of point in time is a physical quantity in the
dimension of time. A difference data type is a totally ordered data
type.
      &lt;/p>
							&lt;p>
The difference between two values &lt;code>x&lt;/code> minus &lt;code>y&lt;/code>
must be defined for all &lt;code>x&lt;/code> and &lt;code>y&lt;/code> in a common
totally ordered subset of the data type's value set. Zero is the
difference between a value and itself.
      &lt;/p>
							&lt;p>
If x and y are not comparable, then the difference will be Null
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Oqpb0io1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oqpb1Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oqpb0yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Oqpb1So1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-plus" name="plus" visibility="public">
        <ownedComment xmi:id="_OqttSCo1Ed65BMwZ7dmx2w">
          <body> 
The sum of this quantity and its operand. The operand must be of a
data type that can express the difference between two values of this
quantity's data type.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OqwJgCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Q: what is the relationship between
  {y.dataType.implies(x.diffType)}
and
  {x.compares(y)}?
      &lt;/p>
							&lt;p>
If  is not a valid type for the difference between two
values of the type of , the the result of the operation
will be NULL.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OqttQio1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OqttRCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OqttQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OqttRSo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-isZero" name="isZero" visibility="public">
        <ownedComment xmi:id="_Oqx-tCo1Ed65BMwZ7dmx2w">
          <body> 
The neutral element in the difference and addition operations, i.e.,
if a quantity is zero, addition to, or subtraction from any other
comparable quantity will result in that other quantity.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OqxXoio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oqx-sSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oqx-sCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-lessThan" name="lessThan" visibility="public">
        <ownedComment xmi:id="_Oq1CAyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate expressing an order relation that is asymmetric and
transitive, between this quantity and another quantity. The ordering
is the same as &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;lessOrEqual&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;QTY&quot;/>&lt;/param>
							&lt;/object>, but irreflexive.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oq0a8So1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oq0a8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oq0a8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Oq1CACo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-greaterOrEqual" name="greaterOrEqual" visibility="public">
        <ownedComment xmi:id="_Oq3eRyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate expressing an order relation that is reflexive, asymmetric
and transitive, between this quantity and another quantity. This is
the inverse order of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;lessOrEqual&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;QTY&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oq3eQSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oq3eQyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oq3eQio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Oq3eRCo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="QTY-greaterThan" name="greaterThan" visibility="public">
        <ownedComment xmi:id="_Oq6hkCo1Ed65BMwZ7dmx2w">
          <body> 
A predicate expressing an order relation that is asymmetric and
transitive, between this quantity and another quantity. This
is the invese of &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;lessThan&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;QTY&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oq56gSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oq56gyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oq56gio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Oq56hCo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="BN" name="BN" visibility="private">
      <ownedComment xmi:id="_OsKezSo1Ed65BMwZ7dmx2w">
        <body> 
The BooleanNonNull constrains the boolean type so that the value may not be NULL.
This type is created for use within the data types specification where it is not
appropriate for a null value to be used
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OsNiECo1Ed65BMwZ7dmx2w">
        <body>
private type BooleanNonNull alias BN specializes BL;
    </body>
      </ownedComment>
      <generalization xmi:id="BL_BN_generalization" general="BL"/>
      <ownedOperation xmi:id="BN-isNull" name="isNull" visibility="public">
        <ownedParameter xmi:id="_OsKeyCo1Ed65BMwZ7dmx2w" type="BN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OsKeyio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OsKeySo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="TEL" name="TEL">
      <ownedComment xmi:id="_O1oj0So1Ed65BMwZ7dmx2w">
        <body> 
A telephone number (voice or fax), e-mail address, or other locator
for a resource mediated by telecommunication equipment. The address is
specified as a Universal Resource Locator (URL) qualified by time
specification and use codes that help in deciding which address to use
for a given time and purpose.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O1rnICo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The semantics of a telecommunication address is that a communicating
entity (the responder) listens and responds to that address, and
therefore can be contacted by an other communicating entity (the
initiator.)
    &lt;/p>
						&lt;p>
The responder of a telecommunication address may be an automatic
service that can respond with information (e.g., FTP or HTTP
services.)  In such case a telecommunication address is a reference to
that information accessible through that address. A telecommunication
address value can thus be resolved to some information (in the form of
encapsulated data, &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
							&lt;/object>.)
    &lt;/p>
						&lt;p>
The telecommunication address is an extension of the Universal
Resource Locator (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
							&lt;/object>) specified according to Internet
standard RFC 2396 [&lt;a>&lt;/a>].
The &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
							&lt;/object> specifies the protocol and the contact point
defined by that protocol for the resource. Notable use cases for the
telecommunication address data type are for telephone and fax numbers,
e-mail addresses, Hypertext references, FTP references, etc.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O1s1QSo1Ed65BMwZ7dmx2w">
        <body>
type TelecommunicationAddress alias TEL specializes URL {
  GTS   useablePeriod;
  SET&lt;CS>   use;
};
    </body>
      </ownedComment>
      <generalization xmi:id="URL_TEL_generalization" general="URL"/>
      <ownedOperation xmi:id="TEL-useablePeriod" name="useablePeriod" visibility="public">
        <ownedComment xmi:id="_O1ZTRSo1Ed65BMwZ7dmx2w">
          <body> 
Specifies the periods of time during which the telecommunication
address can be used.  For a telephone number, this can indicate the
time of day in which the party can be reached on that telephone.  For
a web address, it may specify a time range in which the web content is
promised to be available under the given address.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O1ZTQCo1Ed65BMwZ7dmx2w" type="GTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1ZTQio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1ZTQSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TEL-use" name="use" visibility="public">
        <ownedComment xmi:id="_O1dktio1Ed65BMwZ7dmx2w">
          <body> 
One or more codes advising a system or user which telecommunication
address in a set of like addresses to select for a given
telecommunication need.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O1hPECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The telecommunication use code is not a complete classification for
equipment types or locations. Its main purpose is to suggest or
discourage the use of a particular telecommunication address. There
are no easily defined rules that govern the selection of a
telecommunication address.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O1dksSo1Ed65BMwZ7dmx2w" type="SETCS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1dksyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1dksio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TEL-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O1jESCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O1muoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two telecommunication address values are considered equal if both
their &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object>s are equal. Use code and valid time are
excluded from the equality test.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O1jEQio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1jERCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1jEQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O1jERSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="URL" name="URL" visibility="protected">
      <ownedComment xmi:id="_Os8h4So1Ed65BMwZ7dmx2w">
        <body> 
A telecommunications address specified according to Internet standard
RFC 2396 [&lt;a>&lt;/a>]. The
URI specifies the protocol and the contact point defined by that
protocol for the resource.  Notable uses of the telecommunication
address data type are for telephone and telefax numbers, e-mail
addresses, Hypertext references, FTP references, etc.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OtAMQCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The Internet standard RFC 2396 [&lt;a>&lt;/a>] defines a URI as
follows:
    &lt;/p>
						&lt;blockquote>
							&lt;p>
Just as there are many different methods of access to resources, there
are several schemes for describing the location of such resources.
The generic syntax for &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object>s provides a framework for
new schemes to be established using protocols other than those defined
in this document.
      &lt;/p>
							&lt;p>
URLs are used to &quot;locate&quot; resources, by providing an abstract
identification of the resource location. Having located a resource, a
system may perform a variety of operations on the resource, as might
be characterized by such words as &quot;access&quot;, &quot;update&quot;, &quot;replace&quot;, &quot;find
attributes&quot;. In general, only the &quot;access&quot; method needs to be
specified for any &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object> scheme.
      &lt;/p>
							&lt;p>
      &lt;/p>
						&lt;/blockquote>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OtBaYSo1Ed65BMwZ7dmx2w">
        <body>
protected type UniversalResourceLocator
                 alias URL specializes ANY {
  CS  scheme;
  ST  address;
  literal ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_URL_generalization" general="ANY"/>
      <ownedOperation xmi:id="URL-scheme" name="scheme" visibility="public">
        <ownedComment xmi:id="_Osq1FSo1Ed65BMwZ7dmx2w">
          <body> 
Identifies the protocol used to interpret the address string and 
to access the resource so addressed.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OsufcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Some URL schemes are registered by the &lt;code>Internet Assigned Numbers
Authority&lt;/code> (IANA) [http://www.iana.org], however IANA only
registers URL schemes that are defined in Internet RFC documents. In
fact there are a number of URL schemes defined outside RFC documents,
part of which are registered with the World Wide Web Consortium
(W3C).&lt;object name=&quot;footnote&quot;>
The data type of the  is still  and for
HL7 purposes, the  is a CNE domain. This appears to be
at odds with the fact that there is no one official list of URL
schemes, and so many URL schemes in use may be defined locally.
However, we cannot allow extension of the  scheme
using the HL7 mechanism of local alternative code systems, which is
why technically the  is a  data type.
          &lt;/object>
							&lt;/p>
							&lt;p>
Similar to the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;mediaType&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;ED&quot;/>&lt;/param>
								&lt;/object>, HL7 makes
suggestions about &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;property&quot;/>&lt;/param>
								&lt;/object> values classifying them as
&lt;code>required&lt;/code>, &lt;code>recommended&lt;/code>, &lt;code>other&lt;/code>,
and &lt;code>deprecated&lt;/code>. Any scheme not mentioned has status
&lt;code>other&lt;/code>.
      &lt;/p>
							&lt;p>
Note that this specification explicitly limits itself to &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object>s.
Universal Resource Names (URN) are not covered by this specification. URNs are a
kind of identifier scheme for other than accessible resources. This specification,
however, is only concerned with accessible resources, which belong into the
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object> category.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Osq1ECo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Osq1Eio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Osq1ESo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="URL-address" name="address" visibility="public">
        <ownedComment xmi:id="_Osvtlyo1Ed65BMwZ7dmx2w">
          <body> 
The address is a character string whose format is entirely defined by
the &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;scheme&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
							&lt;/object>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Osvtkio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OsvtlCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Osvtkyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="URL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_OszX9io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Os3CUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
While conceptually &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> has the properties scheme and address,
the common appearance of a URL is as a string literal formed according
to the Internet standard. The general syntax of the URL literal is:
      &lt;/p>
							&lt;p>
Note that there is no special data type for telephone numbers,
telephone numbers are &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TEL&quot;/>&lt;/param>
								&lt;/object> and are specified as &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object>.
      &lt;/p>
							&lt;p>
The telephone number URL is defined in Internet RFC 2806 [&lt;a>&lt;/a>]. Its definition is
summarized in this subsection. This summary does not override or
change any of the Internet specification's rulings.
      &lt;/p>
							&lt;p>
The voice telephone URLs begin with &quot;tel:&quot; and fax URLs begin with
&quot;fax:&quot;
      &lt;/p>
							&lt;p>
The &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;address&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object> is the telephone number in
accordance with ITU-T E.123 &lt;code>Telephone Network and ISDN
Operation, Numbering, Routing and Mobile Service: Notation for
National and International Telephone Numbers (1993)&lt;/code>. While HL7
does not add or withdraw from the URL specification, the preferred
subset of the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;address&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;URL&quot;/>&lt;/param>
								&lt;/object> address syntax is
given as follows:
      &lt;/p>
							&lt;p>
The global absolute telephone numbers starting with the &quot;+&quot; and
country code are preferred. Separator characters serve as decoration
but have no bearing on the meaning of the telephone number. For
example: &quot;tel:+13176307960&quot; and &quot;tel:+1(317)630-7960&quot; are both the
same telephone number; &quot;fax:+49308101724&quot; and &quot;fax:+49(30)8101-724&quot;
are both the same fax number.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_Os43gSo1Ed65BMwZ7dmx2w">
          <body>
URL.literal ST {
  URL : /[a-z0-9+.-]+/ &quot;:&quot; ST { $.scheme.equal($1);
                                $.address.equal($3); }
};
      </body>
        </ownedComment>
        <ownedComment xmi:id="_Os6ssSo1Ed65BMwZ7dmx2w">
          <body>
proctected type TelephoneURL specializes URL {
  literal ST {
    URL : /(tel)|(fax)/ &quot;:&quot; address   { $.scheme.equal($1);
                  $.address.equal($3); };
    ST address : &quot;+&quot; phoneDigits
    ST phoneDigits : digitOrSeparator
               phoneDigits | digitOrSeparator
    ST digitOrSeparator : digit | separator;
    ST digit : /[0..9]/;
    ST separator : /[().-]/;
  };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OszX8So1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OszX8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OszX8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="GTS" name="GTS">
      <ownedComment xmi:id="_O1RXcSo1Ed65BMwZ7dmx2w">
        <body> 
A set of points in time, specifying the timing of events and actions
and the cyclical validity-patterns that may exist for certain kinds of
information, such as phone numbers (evening, daytime), addresses (so
called &quot;snowbirds,&quot; residing closer to the equator during winter and
farther from the equator during summer) and office hours.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O1VB0Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The GTS data type has the following aspects:
    &lt;/p>
						&lt;ul>&lt;li>
								&lt;p>
GTS as a general set of points in time (&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;SET&quot;/>&lt;/param>
									&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
									&lt;/object>>). From this aspect GTS answers
whether any given point in time falls in the schedule described by the
GTS value.
        &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
GTS as the combination of multiple periodic intervals of time. This
aspect describes how both simple and complex repeat-patterns are
specified with the GTS.
        &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
GTS as a generator of a sequence of intervals of point in time
(&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;LIST&quot;/>&lt;/param>
									&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
									&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
										&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
									&lt;/object>>>).
From this aspect, GTS can generate all occurrence intervals of an event or
action, or all validity periods for a fact.
        &lt;/p>
							&lt;/li>&lt;li>
								&lt;p>
GTS as an expression-syntax defined for a calendar. This aspect is the
GTS literal form.
        &lt;/p>
							&lt;/li>&lt;/ul>
						&lt;p>
In all cases the GTS is defined as a set of point in time (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;SET&quot;/>&lt;/param>
							&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
							&lt;/object>>). Using the set operations,
union, intersection and difference, more complex sets of time can be
constructed from simpler ones. Ultimately the building blocks from
which all GTS values are constructed are interval, periodic interval,
and event-related periodic interval. The construction of the GTS can
be specified in the literal form. No special data type structure is
defined that would generate a combination of simpler time-sets from a
given GTS value. While any implementation would have to contain such a
structured representation, it is not needed in order to exchange GTS
values given the literal form.&lt;object name=&quot;footnote&quot;> 
The GTS is an example of a data type that is only defined
algebraically without giving any definition of a data structure that
might implement the behavior of such a data type. The algebraic
definition looks extremely simple, so that one might assume it is
incomplete. Since at this point we are relying entirely on the literal
form to represent GTS values, all the definition of data structur
        &lt;/object>
						&lt;/p>
						&lt;p>
The GTS data type is defined as using intervals, periodic intervals,
and event-related periodic intervals. Intervals of time have been
defined above
    &lt;/p>
						&lt;div title=&quot; Convex Hull &quot; >
A convex hull is the least interval that is a superset of all
occurrence intervals. As noted in , all
totally ordered sets have a convex hull. Because a GTS is a 
&lt;> and because a 
&lt;> is a totally ordered set, all
GTS values have a convex hull.
      
The convex hull of a GTS can less formally be called &quot;outer bound
interval&quot;. Thus, the convex hull of a GTS describes the absolute
beginning and end of the repeating schedule. For infinite repetitions
(e.g., a simple periodic interval) the convex hull has infinite
bounds.
      
						
						Convex Hull of a Schedule
					&lt;/div>
						&lt;div title=&quot; GTS as a Sequence of Occurrence Intervals &quot; >
A  value is a generator of a sequence of time
intervals during which an event or activity occurs, or during which a
state is effective.
      
The nextTo-property maps to every point in
time t the greatest continuous subset (an &quot;occurrence
interval&quot;) v of the  value
S, where v is the interval closest to
t that begins later than t or that contains
t.
      
invariant(GTS S, TS t, IVL&lt;TS> v) {
  v.equal(S.nextTo(t)).equal(
         S.contains(o)
    .and(forall(IVL&lt;TS> u) where x.contains(u) {
           u.contains(v).implies(u.equal(v)); })
    .and(    v.contains(t)
         .or(forall(TS i) where t.lessOrEqual(i)
                           .and(i.lessThan(v.low)) {
               S.conatins(i).not; })));
};
      
The nextAfter-property maps to every point
in time t the greatest continuous subset (an &quot;occurrence
interval&quot;) v of the  value
S, where v is the interval closest to
t that begins later than t.
      
invariant(GTS S, TS t) where {
  S.contains(t).not
     .implies(S.nextAfter(t).equal(S.nextTo(t)));
  S.contains(t)
     .implies(S.nextAfter(t).equal(
            S.except(nextTo(t)).nextTo(t)));
};
      
A  value can be converted into a generic Sequence
of time intervals (&lt;>)
of occurrence intervals.
      
invariant(GTS x) where x.isEmpty { ((LIST&lt;IVL&lt;TS>>)x).isEmpty; };

invariant(GTS x, IVL&lt;TS> first)
    where x.notEmpty
     .and(x.hull.low.nonNull)
     .and(first.equal(x.nextTo(x.hull.low))
{
  ((LIST&lt;IVL&lt;TS>>)x).head.equal(first);
  ((LIST&lt;IVL&lt;TS>>)x).tail.equal(
             (LIST&lt;IVL&lt;TS>>)x.except(first));
};
      &lt;/div>
						&lt;div title=&quot; Interleaving Schedules and Periodic Hull &quot; >
						
						Interleaving Schedules and Periodic Hull
					
For two  values A and B we
say that A interleaves B if their occurrence
intervals interleave on the time line. This concept is visualized in
Figure 15.
      
For the  values A and B
to interleave the occurrence intervals of both groups can be arranged
in pairs of corresponding occurrence intervals. It must further hold
that for all corresponding occurrence intervals a
⊆ A and b ⊆ B,
a starts before b starts (or at the same
time) and b ends after a ends (or at the
same time).
      
The interleaves-relation holds when two schedules have the same
average frequency, and when the second schedule never &quot;outpaces&quot; the
first schedule. That is, no occurrence interval in the second schedule
may start before its corresponding occurrence interval in the first
schedule.
      
With two interleaving  values one can derive a
periodic hull such that the occurrence intervals of the periodic hull
is the convex hull of the corresponding occurrence intervals.
      
The periodic hull is important to construct two schedules by combining
 expressions. For example, to construct the periodic
interval from Memorial Day to Labor Day every year, one first needs to
set up the schedules M for Memorial Day (the last Monday
in May) and L for Labor Day (the first Monday in
September) and then combine these two schedules using the periodic
hull of M and L.
      
invariant(GTS A, B) where x.nonNull.and(y.nonNull) {
  A.interleaves(B).equal(
    forall(IVL&lt;TS> a, b, c; TS t)
        where a.equal(A.nextTo(t))
         .and(b.equal(B.nextTo(a.low)))
         .and(c.equal(A.nextTo(b.high))) {
      b.equal(B.nextTo(a.high));
      a.low.lessOrEqual(b.low);
      c.equal(A.nextTo(b.high));
      c.equal(a).or(c.equal(A.nextAfter(a.high)));
    });
};
      
For two  values A and B
where A interleaves B, a periodic hull is
defined as the pair wise convex hull of the corresponding occurrence
intervals of A and B.
      
invariant(GTS A, B, C) where A.interleaves(B) {
  A.periodicHull(B).equal(C).equal(
    forall(IVL&lt;TS> a, b; TS t)
        where a.equal(A.nextTo(t))
         .and(b.equal(B.nextTo(a.low))) {
      C.contains(c).equal(c.equal(a.hull(b)));
    });
};
      
The interleaves-relation is reflexive, asymmetric, and
intransitive. The periodic hull operation is non-commutative and
non-associative.
The interleaves property may appear overly constrained. However, these
constraints are reasonable for the use case for which the interleaves
and periodic hull properties are defined. To safely and predictably
combine two schedules one would want to know which of the operands
sets the start points and which sets the endpoints of the periodic
hull's occurrence intervals.
          
					&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O1W3ASo1Ed65BMwZ7dmx2w">
        <body>
type GeneralTimingSpecification alias GTS specializes SET&lt;TS> {
            IVL&lt;TS>   hull;
            IVL&lt;TS>   nextTo(TS x);
            IVL&lt;TS>   nextAfter(TS x);
            GTS       periodicHull(GTS x);
            BL        interleaves(GTS x);
  demotion  LIST&lt;IVL&lt;TS>>;
  literal   ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="SETTS_GTS_generalization" general="SETTS"/>
      <ownedOperation xmi:id="GTS-hull" name="hull" visibility="public">
        <ownedParameter xmi:id="_O1Hmcio1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1HmdCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1Hmcyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-nextTo" name="nextTo" visibility="public">
        <ownedParameter xmi:id="_O1HmeCo1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1INgSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1INgCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O1INgio1Ed65BMwZ7dmx2w" name="x" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-nextAfter" name="nextAfter" visibility="public">
        <ownedParameter xmi:id="_O1INhio1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1INiCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1INhyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O1INiSo1Ed65BMwZ7dmx2w" name="x" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-periodicHull" name="periodicHull" visibility="public">
        <ownedParameter xmi:id="_O1I0kCo1Ed65BMwZ7dmx2w" type="GTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1I0kio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1I0kSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O1I0kyo1Ed65BMwZ7dmx2w" name="x" type="GTS"/>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-interleaves" name="interleaves" visibility="public">
        <ownedParameter xmi:id="_O1I0lyo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1I0mSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1I0mCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O1I0mio1Ed65BMwZ7dmx2w" name="x" type="GTS"/>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-demotion" name="demotion" visibility="public">
        <ownedParameter xmi:id="_O1Jbpio1Ed65BMwZ7dmx2w" type="LISTIVL" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1JbqCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1Jbpyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="GTS-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O1KCtyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O1NtECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;GTS&quot;/>&lt;/param>
								&lt;/object> literal allows specifying combinations of
intervals, periodic intervals, and event related periodic intervals of
time using the set operations, unions and intersection. This literal
form is specified based on the simpler time set data types interval,
periodic interval, and event related periodic interval.&lt;object name=&quot;footnote&quot;>
This literal specification again looks surprisingly simple, so one
might assume it is incomplete. However, the 
literal is based on the , ,
PIVL, and  literals and does also imply the
literals for the extensions of , notably the
. The  literal 
specification itself only needs to tie the other literal forms together, which 
is indeed a fairly simple task by itself.
           &lt;/object>
							&lt;/p>
							&lt;p>
Unions are speechified by a semicolon-separated list. Intersections
are specified by a whitespace separated list. Intersection has higher
priority than union. Exclusions (set differences) can be specified
using a backslash; exclusions have an intermediate priority,
i.e. weaker than intersection but stronger than union.
      
Also parentheses can be used to overcome operator precedence when
necessary.
      &lt;/p>
							&lt;p>
The following table contains paradigmatic examples for complex
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;GTS&quot;/>&lt;/param>
								&lt;/object> literals. For simpler examples confer to the literal
forms for interval, periodic interval, and event related interval.
      &lt;/p>
							&lt;tablewidth=&quot;90%&quot; hl7id=&quot;examples-GTS.literal&quot; style=&quot;Requirement&quot;  >&lt;caption>Examples for Literal Expressions for Generic Timing
            Specifications&lt;/caption>&lt;thead>&lt;tr>&lt;th>Literal Expression&lt;/th>&lt;th>Meaning&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>M09 D15 H16 N30 S34.12&lt;/td>&lt;td>September 15 at 4:30:34.12 PM as the intersection of
                multiple periodic intervals of times (calendar patterns)&lt;/td>&lt;/tr>&lt;tr>&lt;td>M0915163034.12&lt;/td>&lt;td>September 15 at 4:30:34.12 PM as one simple periodic
                interval of time (calendar pattern)&lt;/td>&lt;/tr>&lt;tr>&lt;td>M01; M03; M07&lt;/td>&lt;td>January, March, and July (a union of three periodic 
                intervals of time)&lt;/td>&lt;/tr>&lt;tr>&lt;td>M04..09 M/2&lt;/td>&lt;td>Every second month from April to September (April, June, 
                August)&lt;/td>&lt;/tr>&lt;tr>&lt;td>J1; J2; J4&lt;/td>&lt;td>Monday, Tuesday, Thursday&lt;/td>&lt;/tr>&lt;tr>&lt;td>W/2 J2&lt;/td>&lt;td>every other Tuesday (intersection of every other week and 
                every Tuesday)&lt;/td>&lt;/tr>&lt;tr>&lt;td>1999 WY15&lt;/td>&lt;td>the 15th calendar week in 1999 (period code is optional 
                for the highest calendar unit)&lt;/td>&lt;/tr>&lt;tr>&lt;td>WM2 J6&lt;/td>&lt;td>Saturday of the 2nd week of the month&lt;/td>&lt;/tr>&lt;tr>&lt;td>M05 WM2 J6&lt;/td>&lt;td>Saturday of the 2nd week of May&lt;/td>&lt;/tr>&lt;tr>&lt;td>M05 DM08..14 J7&lt;/td>&lt;td>Mother's day (second Sunday in May.)&lt;/td>&lt;/tr>&lt;tr>&lt;td>J1..5 H0800..1600&lt;/td>&lt;td>Monday to Friday from 8 AM to 4 PM&lt;/td>&lt;/tr>&lt;tr>&lt;td>
              J1..4 H0800..1600;&lt;/br>
              J5    H0800..1200
            &lt;/td>&lt;td>Monday to Thursday 8 AM to 4 PM and Friday 8 AM to 12
                noon.&lt;/td>&lt;/tr>&lt;tr>&lt;td>[10 d] H/8&lt;/td>&lt;td>Three times a day over 10 days (each time a 60 minutes
                interval).&lt;/td>&lt;/tr>&lt;tr>&lt;td>H0800..1600 \J3&lt;/td>&lt;td>Every day from 8 AM to 4 PM, except Wednesday.&lt;/td>&lt;/tr>&lt;tr>&lt;td>(M0825..31 J1)..M0831&lt;/td>&lt;td>The last calendar week of August.&lt;/td>&lt;/tr>&lt;tr>&lt;td>JHNUSMEM..JHNUSLBR&lt;/td>&lt;td>The season from the U.S. holidays Memorial Day to Labor
                Day&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
							&lt;div title=&quot; Symbolic Abbreviations for GTS expressions. &quot; >datyp2gtslitsym
The following  defines symbolic
abbreviations for  values that can be used in
 literals instead of their equivalent 
term. Abbreviations are defined for common periods of the day (AM, PM),
for periods of the week (business day, weekend), and for holidays.
The computation for the dates of some holidays, namely
the Easter holiday, involve some sophistication that goes beyond what
one would represent in a  literal term. It is
assumed that the dates of these holidays are drawn from some table or
some generator module that is outside the scope of this specification.
        
These abbreviations are named  values and they
can in turn be a factor of a  term. For example,
one can say &quot;JHCHRXME H08..12&quot; to indicate that the office hours on
Christmas Eve is from 8 AM to 1PM only. And one can say
&quot;JHNUSMEM..JHNUSLBR&quot; for the typical midwestern swimming pool season
from Memorial Day to Labor Day.
        
							
								
								
								
							
							
							
							
								
              Two times a day at institution specified time.
	    
							
							
								
              Three times a day at institution specified time.
	    
							
							
								
              Four times a day at institution specified time.
	    
							
							
							
							
								
									
									
									
									
									
									
								
								
									
									
									
									
									
									
									
									
									
									
									
									
									
								
							
						
this table is not complete. Neither does it include religious holidays
other than Christian (of the Gregorian (western) tradition), nor does
it contain national holidays on other countries. This is a limitation
to be remedied by subsequent additions.
          
holidays are locale-specific. Exactly which religious holidays are
subsumed under JH depends on the locale and other tradition. For
global interoperability, using constructed 
expressions is safer than named holidays. However, some holidays that
depend on moon phases (e.g., Easter) or ad-hoc decree cannot be easily
expressed in a  form.
          &lt;/div>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O1PiQSo1Ed65BMwZ7dmx2w">
          <body>
GTS.literal ST {
  GTS symbol
      : union                      { $.equal($1); }
  | exclusion                 { $.equal($1); };
  SET&lt;TS> union
      : symbol &quot;;&quot; intersection    { $.equal($1.union($3)); }
  | intersection              { $.equal($1); };
  SET&lt;TS> exclusion
      : symbol &quot;\&quot; intersection    { $.equal($1.except($3)); }
      | intersection               { $.equal($1); };
  SET&lt;TS> intersection
      : hull intersection          { $.equal($1.intersection($2)); }
      | hull                       { $.equal($1); };
  SET&lt;TS> hull
      : hull &quot;..&quot; factor           { $.equal($1.periodicHull($3)); }
      | factor                     { $.equal($1); };
SET&lt;TS> factor
  : IVL&lt;TS>                   { $.equal($1); }
  | PIVL&lt;TS>                  { $.equal($1); }
  | EIVL&lt;TS>                  { $.equal($1); }
  | &quot;(&quot; GTS &quot;)&quot;               { $.equal($1); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O1KCsio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O1KCtCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O1KCsyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETTS" name="SET&lt;TS>">
      <templateBinding xmi:id="SETTS-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_Oxzzwio1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="TS"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SET" name="SET">
      <ownedComment xmi:id="_OxuUMSo1Ed65BMwZ7dmx2w">
        <body> 
A value that contains other distinct values in no particular order.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_Oxx-kCo1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type Set&lt;T> alias SET&lt;T> specializes ANY {
            BL      contains(T element);
            BL      contains(SET&lt;T> subset);
            BL      isEmpty;
            BL      notEmpty;
            INT     cardinality;
            SET&lt;T>  union(SET&lt;T> otherset);
            SET&lt;T>  union(T element);
            SET&lt;T>  except(T element);
            SET&lt;T>  except(SET&lt;T> otherset);
            SET&lt;T>  intersection(SET&lt;T> otherset);
  literal   ST;
  promotion SET&lt;T>  (T x);
            IVL&lt;T>  hull;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_OtD2pio1Ed65BMwZ7dmx2w" parameter="_OtD2pyo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_OtD2pyo1Ed65BMwZ7dmx2w" parameteredElement="_OtD2qCo1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_OtD2qCo1Ed65BMwZ7dmx2w" name="T" templateParameter="_OtD2pyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="ANY_SET_generalization" general="ANY"/>
      <ownedOperation xmi:id="SET-contains" name="contains" visibility="public">
        <ownedComment xmi:id="_OtEdtio1Ed65BMwZ7dmx2w">
          <body> 
A relation of the set with its elements, true if the given value is an
element of the set.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OtIIECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This is the primitive semantic property of a set, based on which all
other properties are defined.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedRule xmi:id="_OtJ9QSo1Ed65BMwZ7dmx2w" constrainedElement="SET-contains">
          <name xsi:nil="true"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_OtJ9Qio1Ed65BMwZ7dmx2w">
            <body> &#xA;invariant(SET&lt;T> s, T n) where s.nonNull.and(n.isNull) {&#xA;  s.contains(n).not;&#xA;};&#xA;        &#xA;A set may only contain distinct non-NULL elements. Exceptional values&#xA;(NULL-values) cannot be elements of a set.&#xA;        </body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_OtEdsCo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtEdsio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtEdsSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtEdsyo1Ed65BMwZ7dmx2w" name="element" type="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-contains.1" name="contains" visibility="public">
        <ownedComment xmi:id="_OtKkVSo1Ed65BMwZ7dmx2w">
          <body> 
The relation between a set and its subsets, where each element in the
subset is also an element of the superset.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OtOOsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This implies that the empty set is a subset of every set including
itself.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OtJ9RCo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtJ9Rio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtJ9RSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtKkUio1Ed65BMwZ7dmx2w" name="subset" type="SETT"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-isEmpty" name="isEmpty" visibility="public">
        <ownedComment xmi:id="_OtQD5yo1Ed65BMwZ7dmx2w">
          <body>           
A predicate indicating that this set has no elements (negation of the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;notEmpty&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;SET&quot;/>&lt;/param>
							&lt;/object>. The
empty set is a proper set value, &lt;code>not&lt;/code> an exceptional
(NULL) value.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OtQD4io1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtQD5Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtQD4yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SET-notEmpty" name="notEmpty" visibility="public">
        <ownedComment xmi:id="_OtUVVCo1Ed65BMwZ7dmx2w">
          <body>  
A predicate indicating that this set contains elements.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OtTuQSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtUVUSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtUVUCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SET-cardinality" name="cardinality" visibility="public">
        <ownedComment xmi:id="_OtX_tio1Ed65BMwZ7dmx2w">
          <body>       
The cardinality of a set is the number of distinct elements in the set.    
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OtbqECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The cardinality definition is not sufficient since it doesn't converge
for uncountably infinite sets (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>, &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>, 
etc.) and it doesn't terminate for infinite sets. In
addition, the definition of integer number type in this specification
is incomplete for these cases, as it doesn't account for
infinities. Finally the cardinality value is an example where it would
be necessary to distinguish the cardinality ℵ&lt;sub>0&lt;/sub> 
(&lt;code>aleph&lt;/code>
								&lt;sub>0&lt;/sub>) of
countably infinite sets (e.g., &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object>) from
ℵ&lt;sub>1&lt;/sub> (&lt;code>aleph&lt;/code>
								&lt;sub>1&lt;/sub>), the cardinality of uncountable sets 
              (e.g., &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>, &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>).
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OtX_sSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtX_syo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtX_sio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SET-union" name="union" visibility="public">
        <ownedComment xmi:id="_OtdfSCo1Ed65BMwZ7dmx2w">
          <body>           
A union of two sets (component sets) is a set where each of the
union's elements also is an element of either one component set.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OtdfQio1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtdfRCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtdfQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtdfRSo1Ed65BMwZ7dmx2w" name="otherset" type="SETT"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-union.1" name="union" visibility="public">
        <ownedComment xmi:id="_OthwtCo1Ed65BMwZ7dmx2w">
          <body>           
A union of a set and an element.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OthJoSo1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OthwsCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OthJoio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OthwsSo1Ed65BMwZ7dmx2w" name="element" type="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-except" name="except" visibility="public">
        <ownedComment xmi:id="_OtlbFyo1Ed65BMwZ7dmx2w">
          <body>           
The difference between this set and an element value is the set
that contains all elements of this set except for the subtracting
element value. If the element value is not contained in this set,
the difference is equal to this set.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OtlbESo1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtlbEyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtlbEio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtlbFCo1Ed65BMwZ7dmx2w" name="element" type="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-except.1" name="except" visibility="public">
        <ownedComment xmi:id="_OtoeZyo1Ed65BMwZ7dmx2w">
          <body> 
The difference of this set and its subtracting set is the set that
contains all elements of this set that are not elements of the
subtracting set.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OtoeYSo1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtoeYyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OtoeYio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtoeZCo1Ed65BMwZ7dmx2w" name="otherset" type="SETT"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-intersection" name="intersection" visibility="public">
        <ownedComment xmi:id="_OtrhtCo1Ed65BMwZ7dmx2w">
          <body>           
The intersection between two sets is a set containing all and only
those elements that are contained in both of the operand sets.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Otq6oSo1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OtrhsCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Otq6oio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OtrhsSo1Ed65BMwZ7dmx2w" name="otherset" type="SETT"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_Ott99io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OtxBQCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
When the element type T has a literal form, the set of T elements has
a literal form, wherein the elements of the set are enumerated within
curly braces and separated by semicolon characters.
      &lt;/p>
							&lt;tablewidth=&quot;90%&quot; hl7id=&quot;table-SET.literal.example&quot; style=&quot;Requirement&quot;  >&lt;caption>Example&lt;/caption>&lt;thead>&lt;tr>&lt;th>literal&lt;/th>&lt;th>meaning&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>{1; 3; 5; 7; 19}&lt;/td>&lt;td>a set of integer numbers or real numbers&lt;/td>&lt;/tr>&lt;tr>&lt;td>{3; 1; 5; 19; 7}&lt;/td>&lt;td>the same set of integer numbers or real numbers&lt;/td>&lt;/tr>&lt;tr>&lt;td>{1.2 m; 2.67 m; 17.8 m}&lt;/td>&lt;td>a set of discrete physical quantities&lt;/td>&lt;/tr>&lt;tr>&lt;td>{apple; orange; banana}&lt;/td>&lt;td>a set of character strings&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OtyPYSo1Ed65BMwZ7dmx2w">
          <body>
SET&lt;T>.literal ST {
  SET&lt;T> : &quot;{&quot; elements &quot;}&quot;   { $.equal($2); };
  SET&lt;T> elements
        : elements &quot;;&quot; T      { $.except($2).equal($1); }
        | T                   { $.contains($1);
                                $.except($1).isEmpty; };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Ott98So1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ott98yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ott98io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SET-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_Ot0rpio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Ot4WACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A data value of type T can be promoted into a trivial set of T with
that data value as its only element.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Ot0roCo1Ed65BMwZ7dmx2w" type="SETT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ot0roio1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ot0roSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Ot0royo1Ed65BMwZ7dmx2w" name="x" type="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="SET-hull" name="hull" visibility="public">
        <ownedComment xmi:id="_Oxo0oio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OxsfACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Sets of quantities may be totally ordered sets when there is an order
relationship defined between any two elements in the set. Note that
&quot;ordered set&quot; does not mean the same as Sequence (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;LIST&quot;/>&lt;/param>
								&lt;/object>). 
For example, the set {3; 2; 4; 88; 1} is an ordered
set. The ordering of the elements in the set notation is still
irrelevant, but elements can be compared to establish an order (1; 2;
4; 88).
      &lt;/p>
							&lt;p>
Totally ordered sets have convex hull. A convex hull of a totally
ordered set &lt;code>S&lt;/code> is the smallest interval that is a superset
of &lt;code>S&lt;/code>. This concept is going to be important later on.
      &lt;/p>
							&lt;p>
Note that hull is defined if and only if the &lt;code>actual&lt;/code> set
is a totally ordered set. The data type of the elements itself need
not be totally ordered. For example, the data type &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object> is 
only partially ordered (since only quantities of the
same kind can be compared), but a 
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;SET&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>> may still be totally 
ordered (if it contains only
comparable quantities.) For example, the convex hull of {4 s, 20 s, 55
s} is [4 s;55 s]; the convex hull of {&quot;apples&quot;; &quot;oranges&quot;; &quot;bananas&quot;}
is undefined because the elements have no order relationship among
them; and the convex hull of {2 m; 4 m; 8 s} is likewise undefined,
because it is not &lt;code>totally&lt;/code> ordered (seconds are not
comparable with meters.)
&lt;/p>
							
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OxoNlCo1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OxoNlio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OxoNlSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETT" name="SET&lt;T>">
      <templateBinding xmi:id="SETT-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_OtKkUSo1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="IVLT" name="IVL&lt;T>">
      <templateBinding xmi:id="IVLT-_templateBinding.0" signature="_Ot6LNSo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_OxoNkio1Ed65BMwZ7dmx2w" formal="_Ot6LNio1Ed65BMwZ7dmx2w" actual="_OtD2qCo1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="IVL" name="IVL">
      <ownedComment xmi:id="_Oxg40So1Ed65BMwZ7dmx2w">
        <body> 
A set of consecutive values of an ordered base data type.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OxkjMCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Any ordered type can be the basis of an interval; it does not matter
whether the base type is discrete or continuous. If the base data type
is only partially ordered, all elements of the interval must be
elements of a totally ordered subset of the partially ordered data
type.
    &lt;/p>
						&lt;p>
For example, physical quantities are considered ordered. However the
ordering of physical quantities is only partial; a total order is only
defined among comparable quantities (quantities of the same physical
dimension.)  While intervals between 2 and 4 meter exists, there is no
interval between 2 meters and 4 seconds.
    &lt;/p>
						&lt;p>
Intervals are sets and have all the properties of sets. However, union
and differences of intervals may not be intervals any more, since the
elements of these union and difference sets might not be
contiguous. Intersections of intervals are always intervals.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OxmYYSo1Ed65BMwZ7dmx2w">
        <body>
template&lt;QTY T>
type Interval&lt;T> alias IVL&lt;T> specializes SET&lt;T> {
            T       low;
            BL      lowClosed;
            T       high;
            BL      highClosed;
            QTY     width;
            T       center;
            IVL&lt;T>  hull(IVL&lt;T> x);
  literal   ST;
  promotion IVL&lt;T>  (T x);
  demotion  T;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_Ot6LNSo1Ed65BMwZ7dmx2w" parameter="_Ot6LNio1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_Ot6LNio1Ed65BMwZ7dmx2w" parameteredElement="_Ot6LNyo1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_Ot6LNyo1Ed65BMwZ7dmx2w" name="T" templateParameter="_Ot6LNio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="SET_IVL_generalization" general="SET"/>
      <ownedOperation xmi:id="IVL-low" name="low" visibility="public">
        <ownedComment xmi:id="_Ot6yRyo1Ed65BMwZ7dmx2w">
          <body> 
This is the low limit of the interval.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Ot6yQio1Ed65BMwZ7dmx2w" type="_Ot6LNyo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ot6yRCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ot6yQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-lowClosed" name="lowClosed" visibility="public">
        <ownedComment xmi:id="_Ot_DtCo1Ed65BMwZ7dmx2w">
          <body> 
Specifies whether the low limit is included in the interval
(interval is closed) or excluded from the interval (interval is open).
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Ot-coSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ot_DsCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ot-coio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Ot_DsSo1Ed65BMwZ7dmx2w" type="BL">
            <body>true</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-high" name="high" visibility="public">
        <ownedComment xmi:id="_OuCuFio1Ed65BMwZ7dmx2w">
          <body> 
This is the high limit of the interval.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OuCuESo1Ed65BMwZ7dmx2w" type="_Ot6LNyo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuCuEyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuCuEio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-highClosed" name="highClosed" visibility="public">
        <ownedComment xmi:id="_OuGYdyo1Ed65BMwZ7dmx2w">
          <body> 
Specifies whether the high limit is included in the interval
(interval is closed) or excluded from the interval (interval is open).
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OuGYcSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuGYcyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuGYcio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_OuGYdCo1Ed65BMwZ7dmx2w" type="BL">
            <body>true</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-width" name="width" visibility="public">
        <ownedComment xmi:id="_OuKC1io1Ed65BMwZ7dmx2w">
          <body> 
The difference between high and low boundary. The purpose of
distinguishing a width property is to handle all cases of incomplete
information symmetrically. In any interval representation only two of
the three properties high, low, and width need to be stated and the
third can be derived.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OuNtMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
When both boundaries are known, width can be derived as high minus
low. When one boundary and the width is known, the other boundary is
also known. When no boundary is known, the width may still be
known. For example, one knows that an activity takes about 30 minutes,
but one may not yet know when that activity is started.
      &lt;/p>
							&lt;p>
Note that the data type of the width is not always the same as for the
boundaries. For ratio scale quantities (REAL, PQ, MO) it is the
same. For difference scale quantities (e.g., TS) is the data type
of the difference (e.g., PQ in the dimension of time for TS). For
discrete elements (INT) the width may be a REAL indicating the number
of elements in the interval divided by 2.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OuKC0So1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuKC0yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuKC0io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-center" name="center" visibility="public">
        <ownedComment xmi:id="_OuPiZyo1Ed65BMwZ7dmx2w">
          <body> 
The arithmetic mean of the interval (low plus high divided by 2). The
purpose of distinguishing the center as a semantic property is for
conversions of intervals from and to point values.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OuTMwCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Note that a center doesn't always exist for every interval.
Notably intervals that are infinite on one side do not have
a center. Also intervals of discrete base types with an
even number of elements do not have a center. If an interval
is unknown on one (or both) boundaries, the center can still
be asserted. In fact, the main use case for the center is
to be asserted when no boundary is known.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OuPiYio1Ed65BMwZ7dmx2w" type="_Ot6LNyo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuPiZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuPiYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-hull" name="hull" visibility="public">
        <ownedComment xmi:id="_OuVpBCo1Ed65BMwZ7dmx2w">
          <body> 
							A convex hull or &quot;interval hull&quot; of two &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object>s is the least
							&lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> that is a superset of its operands.
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OuZTYCo1Ed65BMwZ7dmx2w">
          <body> 
							
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OuVB8io1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuVpACo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuVB8yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OuVpASo1Ed65BMwZ7dmx2w" name="x" type="IVLT"/>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_OubIlyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Ouey8Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form for the interval data type is defined such that it is
as intuitive to humans as possible. Five different forms are
defined:&lt;object name=&quot;footnote&quot;>
The presence of so many options deserves explanation. In principle,
the interval form together with the width-only form would be
sufficient. However, the interval form is felt alien to many in the
field of medical informatics. One important purpose of the literal
forms is to eradicate non-compliance through making compliance easy,
without compromising on the soundness of the concepts.
          
Furthermore, the different literal forms all have strength and
weaknesses. The interval and center-width forms' strength is that they
are most exact, showing closed and open boundaries. The interval
form's weakness, however, is that infinite boundaries require special
symbols for infinities, not necessary in the &quot;comparator&quot; form. The
center-width form cannot specify intervals with an infinite boundary
at all. The &quot;comparator&quot; form, however, can only represent
single-bounded intervals (i.e., where the other boundary is infinite
or unknown.)  The dash form, while being the weakest of all, is the
most intuitive form for double bounded intervals.
          &lt;/object>
							&lt;/p>
							&lt;ol>&lt;li>
									&lt;p>
the interval form using square brackets, e.g., &quot;[3.5; 5.5[&quot;;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
the dash-form, e.g., &quot;3.5-5.5&quot;;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
the &quot;comparator&quot; form, using relational operator symbols, e.g., &quot;&lt;5.5&quot;;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
the center-width form, e.g., &quot;4.5[2.0[&quot;.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
the width-only form using square brackets, e.g., &quot;[2.0[&quot;.
          &lt;/p>
								&lt;/li>&lt;/ol>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OugoISo1Ed65BMwZ7dmx2w">
          <body>
IVL&lt;T>.literal ST {
  IVL&lt;T> range
  : interval                { $.equal($1); }
  | dash                    { $.equal($1); }
  | comparator              { $.equal($1); }
  | center_width            { $.equal($1); }
  | width                   { $.equal($1); };

  IVL&lt;T> interval
  : open T &quot;;&quot; T close;     { $.low.equal($2);
                              $.high.equal($4);
                              $.lowClosed.equal($1);
                              $.highClosed.equal($5); };
  BL open : &quot;[&quot;             { $.equal(true); }
          | &quot;]&quot;             { $.equal(false); };
  BL close : &quot;]&quot;            { $.equal(true); }
           | &quot;[&quot;            { $.equal(false); };
  IVL&lt;T> width
     : open T.diffType close   { $.width.equal($2);
                              $.lowClosed.equal($1);
                              $.highClosed.equal($3); };
  IVL&lt;T> center_width
  : T width                 { $.center.equal($1);
                              $.width.equal($2.width);
                              $.lowClosed.equal($2.lowClosed);
                              $.highClosed.equal($2.highClosed); };
  IVL&lt;T> dash : T &quot;-&quot; T;    { $.low.equal($2);
                              $.high.equal($4);
                              $.lowClosed.equal(true);
                              $.highClosed.equal(true); };
  IVL&lt;TS> comparator
  : &quot;&lt;&quot;  T                  { $.high.equal(T);
                              $.high.closed(false);
                              $.low.negativelyInfinite; }
  | &quot;>&quot;  T                  { $.low.equal(T);
                              $.low.closed(false);
                              $.high.positivelyInfinite; }
  | &quot;&lt;=&quot; T                  { $.high.equal(T);
                              $.high.closed(true);
                              $.low.negativelyInfinite; }
  | &quot;>=&quot; T                  { $.low.equal(T);
                              $.low.closed(true);
                            $.high.positivelyInfinite; };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OubIkio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OubIlCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OubIkyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_OuidWCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Ouk5kCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A quantity of type T can be promoted into a trivial interval of T
where low and high boundaries are equal and boundaries closed.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OuidUio1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OuidVCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OuidUyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OuidVSo1Ed65BMwZ7dmx2w" name="x" type="_Ot6LNyo1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-demotion" name="demotion" visibility="public">
        <ownedComment xmi:id="_Oumuwio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OxY9ACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
An interval of T can be demoted to a simple quantity of type T that is
representative for the whole interval. If both boundaries are finite,
this is the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;center&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
								&lt;/object>. If one boundary is
infinite, the representative value is the other boundary. If both
boundaries are infinite, the conversion to a point value is not
applicable.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OumHsio1Ed65BMwZ7dmx2w" type="_Ot6LNyo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OumHtCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OumHsyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVL-hull.1" name="hull" visibility="public">
        <ownedComment xmi:id="_OxbZQyo1Ed65BMwZ7dmx2w">
          <body> 
A convex hull or &quot;interval hull&quot; of two intervals is the least
interval that is a superset of its operands. This concept will play an
important role later on.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OxfDoCo1Ed65BMwZ7dmx2w">
          <body> 
							
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OxayMio1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OxbZQCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OxayMyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="TS" name="TS">
      <ownedComment xmi:id="_O0qTcSo1Ed65BMwZ7dmx2w">
        <body> 
A quantity specifying a point on the axis of natural time. A point
in time is most often represented as a calendar expression.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O0t90Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Semantically, however, time is independent from calendars and best
described by its relationship to elapsed time (measured as a physical
quantity in the dimension of time.)  A point in time plus an elapsed
time yields another point in time.  Inversely, a point in time minus
another point in time yields an elapsed time.
    &lt;/p>
						&lt;p>
As nobody knows when time began, a point in time is conceptualized as
the amount of time that has elapsed from some arbitrary zero-point,
called an epoch.  Because there is no absolute zero-point on the time
axis natural time is a difference-scale quantity, where only
differences are defined but no ratios. (For example, no point in time
is — absolutely speaking — &quot;twice as late&quot; as another
point in time.)
    &lt;/p>
						&lt;p>
Given some arbitrary zero-point, one can express any point in time as
an elapsed time measured from that offset. Such an arbitrary
zero-point is called an epoch. This epoch-offset form is used as a
semantic representation here, without implying that any system would
have to implement the TS data type in that way. Systems that do not
need to compute distances between points in time will not need any
other representation than a calendar expression literal.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O0vzACo1Ed65BMwZ7dmx2w">
        <body>
type PointInTime alias TS specializes QTY {
            PQ  offset;
            CS  calendar;
            INT precision;
            PQ  timezone;
            TS plus(QTY x);
     literal   ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="QTY_TS_generalization" general="QTY"/>
      <ownedOperation xmi:id="TS-offset" name="offset" visibility="public">
        <ownedComment xmi:id="_O0CoYCo1Ed65BMwZ7dmx2w">
          <body> 
The elapsed time since any constant epoch, measured as a physical
quantity in the dimension of time (i.e., comparable to one second.)
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O0FEoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
It is not necessary for this specification to define a canonical
epoch; the semantics is the same for any epoch, as long as the epoch
is constant.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0CBUio1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0CBVCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0CBUyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TS-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O0GSyCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O0JWECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two point-in-time values are equal if and only if their offsets
(relative to the same epoch) are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0GSwio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0GSxCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0GSwyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O0GSxSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="TS-calendar" name="calendar" visibility="public">
        <ownedComment xmi:id="_O0KkOCo1Ed65BMwZ7dmx2w">
          <body> 
A code specifying the calendar used in the literal representation of
this point in time.&lt;object name=&quot;footnote&quot;>
At this time, no other calendars than the Gregorian calendar are
defined. However, the notion of a calendar as an arbitrary convention
to specify absolute time is important to properly define the semantics
of time and time-related data types. Furthermore, other calendars
might be supported when needed to facilitate HL7's use in other
cultures.
          &lt;/object>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O0NAcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The purpose of this property is mainly to faithfully convey what has
been entered or seen by a user in a system originating such a
point-in-time value. The calendar property also advises any system
rendering a point-in-time value into a literal form of which calendar
to use. However, this is only advice; any system that renders
point-in-time values to users may choose to use the calendar and
literal form demanded by its users rather than the calendar mentioned
in the calendar property. Hence, the calendar property is not constant
in communication between systems, the calendar is not part of the
equality test.
      &lt;/p>
							&lt;p>
For the purpose of defining the relationship between calendar
expression and epoch/offset form, two private data types, Calendar
(CAL) and CalendarCycle (CLCY,) are defined. These calendar data types
exist only for defining this specification. These private data types
may not be used at all outside this specification.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0KkMio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0KkNCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0KkMyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O0KkNSo1Ed65BMwZ7dmx2w" type="CS">
            <body>GREG</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TS-precision" name="precision" visibility="public">
        <ownedComment xmi:id="_O0O1oyo1Ed65BMwZ7dmx2w">
          <body> 
The number of significant digits of the calendar expression
representation.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O0R48Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Precision is formally defined based on the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;literal&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>
							&lt;/p>
							&lt;p>
The precision attribute is only the precision of a decimal digit
representation, &lt;code>not the accuracy of the point in time
value&lt;/code>.
      &lt;/p>
							&lt;p>
The purpose of the precision property for the point in time data type
is to faithfully capture the whole information presented to humans in
a calendar expression. The number of digits shown conveys information
about the uncertainty (i.e., precision and accuracy) of a measured
point in time.
      &lt;/p>
							&lt;p>
The precision property is dependent on the calendar. A given precision
value relative to one calendar does not mean the same in another
calendar with different periods.
      &lt;/p>
							&lt;p>
For example &quot;20000403&quot; has 8 significant digits &lt;code>in the
representation&lt;/code>, but the &lt;code>uncertainty of the value&lt;/code>
may be in any digit shown or not shown, i.e., the uncertainty may be
to the day, to the week, or to the hour. Note that external
representations &lt;code>should&lt;/code> adjust their representational
precision with the uncertainty of the value. However, since the
precision in the digit string depends on the calendar and is granular
to the calendar periods, uncertainty may not fall into that grid
(e.g., 2000040317 is an adequate representation for the value between
2000040305 and 2000040405.)
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0OOkio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0O1oCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0OOkyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TS-timezone" name="timezone" visibility="public">
        <ownedComment xmi:id="_O0UVNCo1Ed65BMwZ7dmx2w">
          <body> 
The difference between the local time in that time zone and Universal
Coordinated Time (UTC, formerly called Greenwich Mean Time, GMT). The
time zone is a physical quantity in the dimension of time (i.e.,
comparable to one second.)  A zero time zone value specifies UTC. The
time zone value does not permit conclusions about the geographical
longitude or a conventional time zone name.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O0X_kCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example, 200005121800-0500 may be eastern standard time (EST) in
Indianapolis, IN, or central daylight savings time (CDT) in Decatur,
IL. Furthermore in other countries having other latitude the time
zones may be named differently.
      &lt;/p>
							&lt;p>
When the time zone is NULL (unknown), &quot;local time&quot; is
assumed. However, &quot;local time&quot; is always local to some place, and
without knowledge of that place, the time zone is unknown. Hence, a
local time cannot be converted into UTC. The time zone should be
specified for all point in time values in order to avoid a significant
loss of precision when points in time are compared. The difference of
two local times where the locality is unknown has an error of
±12 hours.
      &lt;/p>
							&lt;p>
In administrative data context, some time values do not carry a time
zone. For a date of birth in administrative data, for example, it
would be incorrect to specify a time zone, since this may effectively
change the date of birth when converted into other time zones. For
such administrative data the time zone is NULL (not applicable.)
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0TuIio1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0UVMSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0UVMCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TS-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_O0Z0xyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O0c4ECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The difference between 2 points in time is a physical quantity.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O0Z0wio1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0Z0xCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0Z0wyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TS-plus" name="plus" visibility="public">
        <ownedComment xmi:id="_O0etQCo1Ed65BMwZ7dmx2w">
          <body> 
A point in time plus an elapsed time (i.e., physical quantity in the
dimension of time) is a point in time.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O0eGMio1Ed65BMwZ7dmx2w" type="TS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0eGNCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0eGMyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O0eGNSo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="TS-minus" name="minus" visibility="public">
        <ownedComment xmi:id="_O0hJhyo1Ed65BMwZ7dmx2w">
          <body> 
The difference between two points in time is an elapsed time.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O0hJgSo1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0hJgyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0hJgio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O0hJhCo1Ed65BMwZ7dmx2w" name="x" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="TS-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O0kM0io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O0mpECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Point-in-time literals are simple calendar expressions, as defined by
the calendar definition table. By default, the western (Gregorian)
calendar shall be used (&lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object>).
      &lt;/p>
							&lt;p>
For the default Gregorian calendar the calendar expression literals of
this specification conform to the constrained ISO 8601 that is defined
in ISO 8824 (ASN.1) under clause 32 (generalized time) and to the HL7
version 2 &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object> data format.
      &lt;/p>
							&lt;p>
Calendar expression literals are sequences of integer numbers ordered
according to the &quot;Counter/ord.&quot; column of &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object>.
Periods with lower order numbers stand to the left of periods with higher order
numbers. Periods with no assigned order number cannot occur in the calendar
expression for points in time.
      &lt;/p>
							&lt;p>
The &quot;Counter/digits&quot; column of &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object>
specifies the exact number of digits for the counter number for any
period.
      &lt;/p>
							&lt;p>
Thus, &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object> specifies that western
calendar expressions begin with the 4-digit year (beginning counting
at zero); followed by the 2-digit month of the year (beginning
counting at one); followed by the 2-digit day of the month (beginning
with one); followed by the 2-digit hour of the day (beginning with
zero); and so forth. For example, &quot;200004010315&quot; is a valid expression
for April 1, 2000, 3:15 am.
      &lt;/p>
							&lt;p>
A calendar expression can be of variable precision, omitting parts
from the right.
      &lt;/p>
							&lt;p>
For example, &quot;20000401&quot; is precise only to the day of the month.
      &lt;/p>
							&lt;p>
The least defined calendar period (i.e. the second) may be written as
a real number, with the number of integer digits specified, followed
by the decimal point and any number of fractional digits.
      &lt;/p>
							&lt;p>
For example, &quot;20000401031520.34&quot; means April 1, 2000, 3:15 and 20.34
seconds.
      &lt;/p>
							&lt;p>
When other calendars will be used in the future, a prefix &quot;GREG:&quot; can
be placed before the western (Gregorian) calendar expression to
disambiguate from other calendars. Each calendar shall have its own
prefix. However, the western calendar is the default if no prefix is
present.
      &lt;/p>
							&lt;p>
In the modern Gregorian calendars (and all calendars where time of day
is based on UTC,) the calendar expression may contain a time zone
suffix. The time zone suffix begins with a plus (+) or minus (-)
followed by digits for the hour and minute cycles. UTC is designated
as offset &quot;+00&quot; or &quot;-00&quot;; the ISO 8601 and ISO 8824 suffix &quot;Z&quot; for UTC
is not permitted.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O0oeQSo1Ed65BMwZ7dmx2w">
          <body>
TS.literal ST {
  TS : cal timestamp($1)              { $.equal($2); }
     | timestamp(GREG)                { $.equal($1); };

  TS timestamp(Calendar C)
  : cycles(C.head, C.epoch) zone(C)   { $.equal($1.minus($2)); }
                                        $.timezone.equal($2); }
  | cycles(C.head, C.epoch)           { $.equal($1);
                                        $.timezone.unknown; };
  Calendar cal
  : /[a-zA-Z_][a-zA-Z0-9_]*:/         { $.equal($1); };
  TS cycles(CalendarCycle c, TS t)
  : cycle(c, t) cycles(c.next, $1)    { $.equal($2); }
  | cycle(c, t) &quot;.&quot; REAL.fractional   { $.equal(c.sum($1, $3));
                                        $.precision.equal(
                                          t.precision.plus($3.precision)); }
  | cycle(c, t)                       { $.equal($1); };
  TS cycle(CalendarCycle c, TS t)
  : /[0-9]{c.ndigits}/                { $.equal(c.sum(t, $1));
                                        $.precision.equal(
                                          t.precision.plus(c.ndigits)); };
  PQ zone(Calendar C)
  : &quot;+&quot; cycles(C.zonehead, C.epoch)   { $.equal($2.minus(C.epoch)); }
  | &quot;-&quot; cycles(C.zonehead, C.epoch)   { $.equal(C.epoch.minus($2)); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O0jlwSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0jlwyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0jlwio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PQ" name="PQ">
      <ownedComment xmi:id="_Oz-W8So1Ed65BMwZ7dmx2w">
        <body> 
A dimensioned quantity expressing the result of measuring.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O0AzMCo1Ed65BMwZ7dmx2w">
        <body>
type PhysicalQuantity alias PQ specializes QTY {
            REAL  value;
            CS    unit;
	    SET&lt;PQR> translation;
            PQ    canonical;
            BL    isOne;
            PQ    times(PQ x);
            PQ    times(REAL x);
            PQ    inverted;
            PQ    power(INT x);
            PQ plus(QTY x);
  literal   ST;
  demotion  REAL;
};
    </body>
      </ownedComment>
      <generalization xmi:id="QTY_PQ_generalization" general="QTY"/>
      <ownedOperation xmi:id="PQ-value" name="value" visibility="public">
        <ownedComment xmi:id="_Oymd9Co1Ed65BMwZ7dmx2w">
          <body> 
The magnitude of the quantity measured in terms of the unit.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oyl24io1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oymd8So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oymd8Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-unit" name="unit" visibility="public">
        <ownedComment xmi:id="_OyqvYCo1Ed65BMwZ7dmx2w">
          <body> 
The unit of measure specified in the Unified Code for Units of Measure
(UCUM) [&lt;a>&lt;/a>].
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyqIUSo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyqIUyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyqIUio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_OyqIVCo1Ed65BMwZ7dmx2w" type="CS">
            <body>1</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-translation" name="translation" visibility="public">
        <ownedComment xmi:id="_OzBUsyo1Ed65BMwZ7dmx2w">
          <body> 
An alternative representation of the same physical quantity expressed
in a different unit, of a different unit code system and possibly with
a different value.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OzAtoio1Ed65BMwZ7dmx2w" type="SETPQR" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzBUsCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzAtoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-canonical" name="canonical" visibility="public">
        <ownedComment xmi:id="_OzE_Fio1Ed65BMwZ7dmx2w">
          <body> 
A physical quantity expressed in a canonical unit. In any given unit
system has every physical dimension can be assigned one canonical unit
Defining the canonical unit is not subject of this specification, only
asserting that such a canonical unit exists (and can be arbitrarily
chosen) for every physical quantity. An abstract physical quantity is
equal to its canonical form.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OzIpcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example, for a unit system based on the Système
International (SI) one can define the canonical form as (a) the
product of only the base units; (b) without prefixes; where (c) only
multiplication and exponents are used (no division operation); and (d)
where the seven base units appear in a defined ordering (e.g., m, s,
g...) Thus, 1 mm Hg would be expressed as 133322 m&lt;sup>-1&lt;/sup>
s&lt;sup>-2&lt;/sup>. As can be seen, the rules how to build the canonical
form of units may be quite complex. However, for the semantic
specification it doesn't matter how the canonical form is built, nor
what specific canonical form is chosen, only that &lt;code>some&lt;/code>
canonical form &lt;code>could&lt;/code> be defined.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OzE_ESo1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzE_Eyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzE_Eio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_OzKeqCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OzOJACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two physical quantities are equal if each their values and their units
of their canonical forms are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OzKeoio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzKepCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzKeoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OzKepSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-compares" name="compares" visibility="public">
        <ownedComment xmi:id="_OzQlQyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OzUPoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two physical quantities compare each other (and have an ordering and
difference) if the units of their canonical forms are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OzP-Mio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzP-NCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzP-Myo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OzQlQCo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_OzWE1yo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OzZvMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The difference between 2 Physical Quantities is another Physical Quantity with
the same units
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OzWE0io1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzWE1Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzWE0yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-isOne" name="isOne" visibility="public">
        <ownedComment xmi:id="_OzbkZyo1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating if this value is the number one, i.e., the
neutral element of multiplication. There is exactly one physical
quantity that has this property and is called &lt;code>the unity&lt;/code>.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OzbkYio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzbkZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzbkYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-times" name="times" visibility="public">
        <ownedComment xmi:id="_Ozf11So1Ed65BMwZ7dmx2w">
          <body> 
The product of two physical quantities is the product of their values
times the product of their units.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OzfOwSo1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ozf10So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ozf10Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Ozf10io1Ed65BMwZ7dmx2w" name="x" type="PQ"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-times.1" name="times" visibility="public">
        <ownedComment xmi:id="_OzjgNyo1Ed65BMwZ7dmx2w">
          <body> 
Multiplication with a real number forms a scaled quantity. A scaled
quantity is comparable to its original quantity.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OznKkCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
If two quantities &lt;code>Q&lt;/code>
								&lt;sub>1&lt;/sub> and
&lt;code>Q&lt;/code>
								&lt;sub>2&lt;/sub> compare each other, there
exists a real number &lt;code>r&lt;/code> such that &lt;code>r&lt;/code>
								&lt;code>1&lt;/code> = &lt;code>Q&lt;/code>
								&lt;sub>1&lt;/sub> /
&lt;code>Q&lt;/code>
								&lt;sub>2&lt;/sub>.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OzjgMSo1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OzjgMyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OzjgMio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OzjgNCo1Ed65BMwZ7dmx2w" name="x" type="REAL"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-inverted" name="inverted" visibility="public">
        <ownedComment xmi:id="_Ozo_xyo1Ed65BMwZ7dmx2w">
          <body> 
A &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value, which, when muliplied with another &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value
yields one (the neutral element of multiplication). Zero (the neutral
element of addition) has no inverse element.  The quotient of two
comparable quantities is comparable to the unity (the unit 1).
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Ozo_wio1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ozo_xCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ozo_wyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-power" name="power" visibility="public">
        <ownedComment xmi:id="_OztRNSo1Ed65BMwZ7dmx2w">
          <body> 
A physical quantity can be raised to an integer power.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OzsqISo1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OztRMSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OztRMCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OztRMio1Ed65BMwZ7dmx2w" name="x" type="INT"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-plus" name="plus" visibility="public">
        <ownedComment xmi:id="_Ozw7lyo1Ed65BMwZ7dmx2w">
          <body> 
Two physical quantities that compare each other can be added.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Ozw7kSo1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ozw7kyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ozw7kio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Ozw7lCo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_Oz0l9io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Oz3pQCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form for a physical quantity is a real number literal
followed by optional whitespace and a character string representing a
valid code in the Unified Code for Units of Measure (UCUM)
[&lt;a>&lt;/a>].
      &lt;/p>
							&lt;p>
For example 20 minutes is &quot;20 min&quot;.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_Oz43YSo1Ed65BMwZ7dmx2w">
          <body>
PQ.literal ST {
  PQ : REAL unit { $.value.equal($1);
                   $.unit.equal($2); }
  CS unit : ST   { $.value.equal($1);
                   $.codeSystem.equal(2.16.840.1.113883.6.8); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_Oz0l8So1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oz0l8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oz0l8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQ-demotion" name="demotion" visibility="public">
        <ownedComment xmi:id="_Oz6slCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Oz9I0Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> value can be converted to a &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> value
with the unity, i.e. the unit &lt;code>1&lt;/code> (one).
Likewise, a physical quantity that compares the unity can be converted
to a real number.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Oz6Fgio1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oz6skSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oz6skCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="REAL" name="REAL">
      <ownedComment xmi:id="_OyfJMSo1Ed65BMwZ7dmx2w">
        <body> 
Fractional numbers. Typically used whenever quantities are measured,
estimated, or computed from other real numbers.  The typical
representation is decimal, where the number of significant decimal
digits is known as the precision.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_OyiMgCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The term &quot;Real number&quot; in this specification is used to mean that
fractional values are covered without necessarily implying the full
set of the mathematical real numbers that would include irrational
numbers such as ρ, Euler's number, etc.&lt;object name=&quot;footnote&quot;>
The term &quot;Real&quot; for a fractional number data type originates and is
well established in the Algol, Pascal tradition of programming
languages.
        &lt;/object>
						&lt;/p>
						&lt;p>
This specification offers two choices for a number data type. The
choice is made as follows: Any number attribute is a real if it is not
known for sure that it is an integer. A number is an integer if it is
&lt;code>always&lt;/code> counted, typically representing an ordinal
number. If there are conceivable use cases where such a number would
be estimated or averaged, it is not always an integer and thus should
use the Real data type.
    &lt;/p>
						&lt;p>
The algebraic operations are specified here as characterizing
operations in the sense of ISO 11404, and because these operations are
needed in other parts of this specification.
    &lt;/p>
						&lt;p>
Unlike the integer numbers, the real numbers semantics are not
inductively constructed but only intuitively described by their axioms
of their algebraic properties. The completeness axioms are
intentionally left out so as to make no statement about irrational
numbers.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_OykBsSo1Ed65BMwZ7dmx2w">
        <body>
type RealNumber alias REAL specializes QTY {
            REAL  negated;
            BL    isOne;
            REAL  times(REAL x);
            REAL  inverted;
            REAL  power(REAL x);
  literal   ST;
            INT   precision;
  demotion  INT;
  promotion REAL  (INT x);
};
    </body>
      </ownedComment>
      <generalization xmi:id="QTY_REAL_generalization" general="QTY"/>
      <ownedOperation xmi:id="REAL-compares" name="compares" visibility="public">
        <ownedComment xmi:id="_Ox1B4io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Ox4sQCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The value set of &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> is totally ordered.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Ox0a1io1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ox0a2Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ox0a1yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Ox0a2So1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_Ox6hdSo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Ox-L0Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The difference between two &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> values is also a &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> value.
						&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Ox6hcCo1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ox6hcio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ox6hcSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-plus" name="plus" visibility="public">
        <ownedParameter xmi:id="_OyABAio1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyABBCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyABAyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OyABBSo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-negated" name="negated" visibility="public">
        <ownedComment xmi:id="_OyAoEyo1Ed65BMwZ7dmx2w">
          <body> 
A &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value, which, when added to another &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value yields
zero (the neutral element of addition.)
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyABCSo1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyAoECo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyABCio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-isOne" name="isOne" visibility="public">
        <ownedComment xmi:id="_OyESdio1Ed65BMwZ7dmx2w">
          <body> 
A predicate indicating if this value is the number one, i.e., the
neutral element of multiplication. There is exactly one real number
that has this property.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyEScSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyEScyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyEScio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-times" name="times" visibility="public">
        <ownedComment xmi:id="_OyIj4Co1Ed65BMwZ7dmx2w">
          <body> 
An operation in &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> that forms an abelian group and is related
to addition by the law of distribution.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyH80So1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyH80yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyH80io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OyH81Co1Ed65BMwZ7dmx2w" name="x" type="REAL"/>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-inverted" name="inverted" visibility="public">
        <ownedComment xmi:id="_OyLAJio1Ed65BMwZ7dmx2w">
          <body> 
A &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value, which, when muliplied with another &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value
yields one (the neutral element of multiplication). Zero (the neutral
element of addition) has no inverse element.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyLAISo1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyLAIyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyLAIio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-power" name="power" visibility="public">
        <ownedComment xmi:id="_OyNcZyo1Ed65BMwZ7dmx2w">
          <body> 
The basis of exponentiation is the iterative multiplication of a 
real number, and extended to rational exponents as the inverse
operation.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OyP4oCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
We only list certain common properties of exponentiation.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OyNcYSo1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyNcYyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyNcYio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_OyNcZCo1Ed65BMwZ7dmx2w" name="x" type="REAL"/>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_OyRt1Co1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_OyUKECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form of an real is a string of decimal digits with
optional leading &quot;+&quot; or &quot;-&quot; sign, and optional decimal point, and
optional exponential notation using a case insensitive &quot;e&quot; between the
mantissa and the exponent. The number of significant digits must
conform to the precision property.
      &lt;/p>
							&lt;p>
Examples of real literals for two thousand are 2000, 2000., 2e3,
2.0e+3, +2.0e+3.
      &lt;/p>
							&lt;p>
Note that the literal form does not carry type information. For
example, &quot;2000&quot; is a valid representation of both a real number and an
integer number. No trailing decimal point is used to disambiguate from
integer numbers. An ITS that uses this literal form must recover the
type information from other sources.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_OyVYMSo1Ed65BMwZ7dmx2w">
          <body>
REAL.literal ST {
  REAL : mantissa                   { $.equal($1); }
       | mantissa /[eE]/ INT        { $.equal($1
                                         .times(10.power($3)); };

  REAL mantissa
       : /0*/ 0                     { $.isZero; $.precision.equal(1); }
       | /0*/ &quot;.&quot; /0*/              { $.isZero; $.precision.equal(
                                                  $3.length.successor); }
       | /0*/ &quot;.&quot; /0*/ fractional   { $.equal($4);
                                      $.precision.equal($4.precision); }
       | integer                    { $.equal($1); }
       | integer &quot;.&quot; fractional     { $.equal($1.plus($2));
                                      $.precision.equal($1.precision
                                        .plus($3.precision)); };

  REAL integer
       : uintval                    { $.equal($2); }
       | &quot;+&quot; uintval                { $.equal($1.times($2)); }
       | &quot;-&quot; uintval                { $.equal($1.times($2).negated); };

  REAL uintval : /0*/ uint          { $.equal($2); };

  REAL uint : digit                 { $.equal($1);
                                      $.precision.equal(1); }
            | uint digit            { $.equal($1.times(10).plus($2));
                                      $.precision.equal(
                                        $1.precision.successor; };

  REAL fractional
       : digit                      { $.equal($1.times(10.inverted));
                                      $.precision.equal(1); }
       | digit fractional           { $.equal(
                                        $1.plus($2.times(10.inverted));
                                      $.precision.equal(
                                        $1.precision.successor); };

  INT digit : /[0-9]/               { $.equal($1); }
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyRGwio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyRt0So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyRt0Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-precision" name="precision" visibility="public">
        <ownedComment xmi:id="_OyXNYyo1Ed65BMwZ7dmx2w">
          <body> 
The number of significant digits of the decimal representation.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_OyZpoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Precision is formally defined based on the &lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;literal&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>
							&lt;/p>
							&lt;p>
The precision attribute is only the precision of a decimal digit
representation, &lt;code>not the accuracy of the real number
value&lt;/code>.
      &lt;/p>
							&lt;p>
The purpose of the precision property for the real number data type is
to faithfully capture the whole information presented to humans in a
number. The amount of decimal digits shown conveys information about
the uncertainty (i.e., precision and accuracy) of a measured value.
      &lt;/p>
							&lt;p>
The rules for what digits are significant are as follows:
      &lt;/p>
							&lt;ol>&lt;li>
									&lt;p>
All non-zero digits are significant.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
All zeroes to the right of a significant digit are significant.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
When all digits in the number are zero the zero-digit immediately left
to the decimal point is significant (and because of rule 2, all
following zeroes are thus significant too.)
          &lt;/p>
								&lt;/li>&lt;/ol>
							&lt;tablewidth=&quot;90%&quot; hl7id=&quot;table-REAL.precision.examples&quot; style=&quot;Requirement&quot;  >&lt;caption>Examples for the Precision of Real Number Literals.&lt;/caption>&lt;thead>&lt;tr>&lt;th>Literal&lt;/th>&lt;th>Number of Significant Digits&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>2000&lt;/td>&lt;td>has 4 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>2e3&lt;/td>&lt;td>has 1 significant digit, used if one would naturally say 
                  &quot;2000&quot; but precision is only 1.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0.001&lt;/td>&lt;td>has 1 significant digit.&lt;/td>&lt;/tr>&lt;tr>&lt;td>1e-3&lt;/td>&lt;td>has 1 significant digit, use this if one would naturally
                  say &quot;0.001&quot; but precision is only 1.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0&lt;/td>&lt;td>has 1 significant digit.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0.0&lt;/td>&lt;td>has 2 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>000.0&lt;/td>&lt;td>has 2 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0.00&lt;/td>&lt;td>has 3 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>4.10&lt;/td>&lt;td>has 3 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>4.09&lt;/td>&lt;td> has 3 significant digits.&lt;/td>&lt;/tr>&lt;tr>&lt;td>4.1&lt;/td>&lt;td>has 2 significant digits.&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
							&lt;p>
The precision of the representation &lt;code>should&lt;/code> match the
uncertainty of the value. However, precision of the representation and
uncertainty of the value are separate independent concepts. Refer to
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD_REAL&quot;/>&lt;/param>
								&lt;/object> for details about uncertain real numbers.
      &lt;/p>
							&lt;p>
For example &quot;0.123&quot; has 3 significant digits &lt;code>in the
representation&lt;/code>, but the &lt;code>uncertainty of the value&lt;/code>
may be in any digit shown or not shown, i.e., the uncertainty may be
0.123±0.0005, 0.123±0.005 or
0.123±0.00005, etc. Note that ITS representations
&lt;code>should&lt;/code> adjust their representational precision with the
uncertainty of the value. However, since the precision in the digit
string is granular to 0.5 the least significant digit, while
uncertainty may be anywhere between these &quot;grid lines&quot;,
0.123±0.005 would also be an adequate representation for the
value between 0.118 and 0.128.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_OyWmUio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyXNYCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyWmUyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-demotion" name="demotion" visibility="public">
        <ownedParameter xmi:id="_Oya3wio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oya3xCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oya3wyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="REAL-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_Oybe2Co1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_Oyd7ECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
						The &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object> and &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> data types are related by a
						homomorphism that maps every value in &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object> to a value
						in &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> whereby the algebraic properties of &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object>
						are preserved. This means, an integer can be promoted to a real and a
						real can be demoted to an integer by means of rounding off the
						fractional part.
					&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_Oybe0io1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oybe1Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oybe0yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_Oybe1So1Ed65BMwZ7dmx2w" name="x" type="INT"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETPQR" name="SET&lt;PQR>">
      <templateBinding xmi:id="SETPQR-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_OyuZwSo1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="PQR"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PQR" name="PQR" visibility="protected">
      <ownedComment xmi:id="_Oy7OHCo1Ed65BMwZ7dmx2w">
        <body> 
An extension of the coded value data type representating a physical
quantity using a unit from any code system. Used to show alternative
representation for a physical quantity.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_Oy-4cCo1Ed65BMwZ7dmx2w">
        <body>
protected type PhysicalQuantityRepresentation alias PQR specializes CV {
  REAL value;
};
    </body>
      </ownedComment>
      <generalization xmi:id="CV_PQR_generalization" general="CV"/>
      <ownedOperation xmi:id="PQR-value" name="value" visibility="public">
        <ownedComment xmi:id="_OyvA0io1Ed65BMwZ7dmx2w">
          <body> 
The magnitude of the measurement value in terms of the unit
specified by this code.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_OyuZxyo1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyuZySo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyuZyCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-code" name="code" visibility="public">
        <ownedParameter xmi:id="_OyyEISo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OyyrMSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OyyrMCo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_OyyrMio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-codeSystem" name="codeSystem" visibility="public">
        <ownedParameter xmi:id="_Oy5_8io1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oy5_9Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oy5_8yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-codeSystemName" name="codeSystemName" visibility="public">
        <ownedParameter xmi:id="_Oy5_-Co1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oy6nASo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oy6nACo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Oy6nAio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-codeSystemVersion" name="codeSystemVersion" visibility="public">
        <ownedParameter xmi:id="_Oy6nBio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oy6nCCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oy6nByo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Oy6nCSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-displayName" name="displayName" visibility="public">
        <ownedParameter xmi:id="_Oy6nDSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oy7OESo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oy7OECo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Oy7OEio1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PQR-originalText" name="originalText" visibility="public">
        <ownedParameter xmi:id="_Oy7OFio1Ed65BMwZ7dmx2w" type="ED" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Oy7OGCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Oy7OFyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_Oy7OGSo1Ed65BMwZ7dmx2w" type="ED">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="UID" name="UID" visibility="protected">
      <ownedComment xmi:id="_OyyrOSo1Ed65BMwZ7dmx2w">
        <body> 
A unique identifier string is a character string which identifies an
object in a globally unique and timeless manner. The allowable formats
and values and procedures of this data type are strictly controlled by
HL7. At this time, user-assigned identifiers may be certain character
representations of ISO Object Identifiers (OID) and DCE Universally
Unique Identifiers (UUID). HL7 also reserves the right to assign other
forms of UIDs, such as mnemonic identifiers for code systems.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_Oy2VkCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The sole purpose of the UID is to be a globally and timelessly unique
identifier. The form of the UID, whether it is an OID, an UUID or any
other form is entirely irrelevant. As far as HL7 is concerned, the
only thing one can do with a UID is denote to the object for which it
stands. Comparison of UIDs is literal, i.e. if two UIDs are literally
identical, they are assumed to denote to the same object. If two UIDs
are not literally identical they &lt;code>may&lt;/code> not denote to the
same object.
    &lt;/p>
						&lt;p>
No difference in semantics is recognized between the different
allowed forms of the UID. The different forms are not distinguished
by a component within or aside from the identifier string itself.
    &lt;/p>
						&lt;p>
Even though this specification recognizes no semantic difference
between the different forms of the unique identifier forms, there are
differences of how these identifiers are built and managed, which is
the sole reason to define subtypes to the UID for each of the
variants.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_Oy4KwSo1Ed65BMwZ7dmx2w">
        <body>
protected type UniqueIdentifierString alias UID specializes ST;
    </body>
      </ownedComment>
      <generalization xmi:id="ST_UID_generalization" general="ST"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="IVLTS" name="IVL&lt;TS>">
      <ownedComment xmi:id="_O1ARsSo1Ed65BMwZ7dmx2w">
        <body> 
A set of consecutive values of time-stamps.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O1D8ECo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The generic interval data type defines the interval of points in time
too. However, there are some special considerations about literal
representations and conversions of intervals of point in time, which
are specified in this section.
      &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O1FxQSo1Ed65BMwZ7dmx2w">
        <body>
type Interval&lt;PointInTime> alias IVL&lt;TS> specializes IVL&lt;T> {
  promotion IVL&lt;TS> (TS x);
};
      </body>
      </ownedComment>
      <templateBinding xmi:id="_O0xoNSo1Ed65BMwZ7dmx2w" signature="_Ot6LNSo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O0xoNio1Ed65BMwZ7dmx2w" formal="_Ot6LNio1Ed65BMwZ7dmx2w" actual="TS"/>
      </templateBinding>
      <ownedOperation xmi:id="IVLTS-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O0y2VCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O02gsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form for interval of point in time is exceptional.
        &lt;/p>
							&lt;ul>&lt;li>
									&lt;p>The &quot;dash form&quot; is not allowed for intervals of point in time&lt;/p>
								&lt;/li>&lt;li>
									&lt;p>A &quot;hull form&quot; is defined instead&lt;/p>
								&lt;/li>&lt;/ul>
							&lt;p>
In order to avoid syntactic conflicts with the timezone and slightly
different usage profiles of the ISO 8601 that occur on some ITS
platforms, &lt;code>the dash form of the interval is not
permitted for &lt;/code>
								&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>>. The
interval-form using square brackets is preferred.
        &lt;/p>
							&lt;p>
Example: May 12, 1987 from 8 to 9:30 PM is 
&quot;&lt;code>[198705122000;198705122130]&lt;/code>&quot;.
        &lt;/p>
							&lt;p>
The &quot;hull-form&quot; of the literal is defined as the convex hull (see
&lt;object name=&quot;propertyRef&quot;>
									&lt;param name=&quot;propertyName&quot; value=&quot;hull&quot;/>&lt;/param>
									&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
								&lt;/object>) of interval-promotions from two time
stamps.
        &lt;/p>
							&lt;p>
For example, &quot;&lt;code>19870901..19870930&lt;/code>&quot; is a valid literal
using the hull form. The value is equivalent to the interval form
&quot;&lt;code>[19870901;19871001[&lt;/code>&quot;.  &lt;object name=&quot;footnote&quot;> 
The hull form may appear superfluous for the simple interval all by
itself. However, the hull form will become important for the periodic
interval notation as it shortens the notation and (perhaps arguably)
makes the notation of more complex timing structures more intuitive.
            &lt;/object>
							&lt;/p>
							&lt;p>
The hull-form further allows an abbreviation, where the higher
timestamp literal does not need to repeat digits on the left that are
the same as for the lower timestamp literal. The two timestamps are
right-aligned and the digits to the left copied from the lower to the
higher timestamp literal. This is a simple string operation and is not
formally defined here.
        &lt;/p>
							&lt;p>
Example: May 12, 1987 to May, 23, 1987 is
&quot;&lt;code>19870512..23&lt;/code>&quot;. However, note that May 12, 1987 to June
2, 1987 is &quot;&lt;code>19870512..0602&lt;/code>&quot;, and not
&quot;&lt;code>20000512..02&lt;/code>&quot;.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O04V4So1Ed65BMwZ7dmx2w">
          <body>
  IVL&lt;TS> hull : TS &quot;..&quot; TS
    { $.equal(((IVL&lt;TS>)$1)
        .hull((IVL&lt;TS>)$3)); };
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O0yPQSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O0y2USo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O0y2UCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVLTS-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_O06yJCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O0-cgCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object> can be promoted to an &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
								&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>> whereby the low boundary is
the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object> value itself, and the width is inferred from
the precision of the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object> and the duration of the
least significant calendar period specified. The high boundary is
open. For example, the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object> literal &quot;200009&quot; is
converted to an &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>> with low
boundary 200009 and width 30 days, which is the interval
&quot;[200009;200010[&quot;.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O06LEio1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O06yICo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O06LEyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O06yISo1Ed65BMwZ7dmx2w" name="x" type="TS"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTIVL" name="LIST&lt;IVL>">
      <templateBinding xmi:id="LISTIVL-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O1JbpCo1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="IVLTS"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETCS" name="SET&lt;CS>">
      <templateBinding xmi:id="SETCS-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O1c9oio1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="CS"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETCD" name="SET&lt;CD>">
      <templateBinding xmi:id="SETCD-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O3b6oSo1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="CD"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTCR" name="LIST&lt;CR>">
      <templateBinding xmi:id="LISTCR-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O3gMECo1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="CR"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CR" name="CR" visibility="protected">
      <ownedComment xmi:id="_O3sZUSo1Ed65BMwZ7dmx2w">
        <body> 
A concept qualifier code with optionally named role.  Both qualifier
role and value codes must be defined by the coding system of the CD containing
the concept qualifier.  For example, if SNOMED RT defines a concept &quot;leg&quot;, a
role relation &quot;has-laterality&quot;, and another concept &quot;left&quot;, the concept role
relation allows to add the qualifier &quot;has-laterality: left&quot; to a
primary code &quot;leg&quot; to construct the meaning &quot;left leg&quot;.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O3u1kCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The use of qualifiers is strictly governed by the code system
used. The &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;CD&quot;/>&lt;/param>
							&lt;/object> data type does not permit using code
qualifiers with code systems that do not provide for qualifiers
(e.g. pre-coordinated systems, such as LOINC, ICD-10 PCS.)
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O3wDsSo1Ed65BMwZ7dmx2w">
        <body>
protected type ConceptRole alias CR specializes ANY {
  CV  name;
  CD  value;
  BN  inverted;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_CR_generalization" general="ANY"/>
      <ownedOperation xmi:id="CR-name" name="name" visibility="public">
        <ownedComment xmi:id="_O3gMHCo1Ed65BMwZ7dmx2w">
          <body> 
Specifies the manner in which the concept role value contributes to
the meaning of a code phrase.  For example, if SNOMED RT defines a
concept &quot;leg&quot;, a role relation &quot;has-laterality&quot;, and another concept
&quot;left&quot;, the concept role relation allows to add the qualifier
&quot;has-laterality: left&quot; to a primary code &quot;leg&quot; to construct the
meaning &quot;left leg&quot;.  In this example &quot;has-laterality&quot; is the CR.name.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3jPYCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
If the coding system of the CD containing the CR allows postcoordination
but no role names (e.g. SNOMED) the name attribute can be NULL.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3gMFio1Ed65BMwZ7dmx2w" type="CV" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3gMGCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3gMFyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3gMGSo1Ed65BMwZ7dmx2w" type="CV">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CR-value" name="value" visibility="public">
        <ownedComment xmi:id="_O3kdhyo1Ed65BMwZ7dmx2w">
          <body> 
The concept that modifies the primary code of a code phrase through
the role relation.  For example, if SNOMED RT defines a concept &quot;leg&quot;,
a role relation &quot;has-laterality&quot;, and another concept &quot;left&quot;, the
concept role relation allows adding the qualifier &quot;has-laterality:
left&quot; to a primary code &quot;leg&quot; to construct the meaning &quot;left leg&quot;.  In
this example &quot;left&quot; is the CR.value.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3m5wCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This property is of type concept descriptor and thus can in turn have
qualifiers. This allows qualifiers to nest. Qualifiers can only be
used as far as the underlying code system defines them. It is not
allowed to use any kind of qualifiers for code systems that do not
explicitly allow and regulate such use of qualifiers.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3kdgSo1Ed65BMwZ7dmx2w" type="CD" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3kdgyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3kdgio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3kdhCo1Ed65BMwZ7dmx2w" type="CD">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CR-inverted" name="inverted" visibility="public">
        <ownedComment xmi:id="_O3ou8So1Ed65BMwZ7dmx2w">
          <body> 
Indicates if the sense of the role name is inverted.  This can be used
in cases where the underlying code system defines inversion but does
not provide reciprocal pairs of role names. By default, inverted is
false.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O3rLMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example, a code system may define the role relation &quot;causes&quot;
besides the concepts &quot;Streptococcus pneumoniae&quot; and &quot;Pneumonia&quot;. If
that code system allows its roles to be inverted, one can construct
the post-coordinated concept &quot;Pneumococcus pneumonia&quot; through
&quot;Pneumonia - causes, inverted - Streptococcus pneumoniae.&quot;
      &lt;/p>
							&lt;p>
Roles may only be inverted if the underlying coding system allows such
inversion. Notably, if a coding system defines roles in inverse pairs
or intentionally does not define certain inversions, the appropriate
role code (e.g. &quot;caused-by&quot;) must be used rather than inversion. It
must be known whether the inverted property is &lt;code>true&lt;/code> or
&lt;code>false&lt;/code>, since if it is NULL, the role cannot be interpreted.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O3oH4io1Ed65BMwZ7dmx2w" type="BN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O3oH5Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O3oH4yo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O3oH5So1Ed65BMwZ7dmx2w" type="BN">
            <body>false</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CO" name="CO">
      <ownedComment xmi:id="_O5vAtSo1Ed65BMwZ7dmx2w">
        <body> 
Coded data, where the domain from which the codeset comes is ordered. The
Coded Ordinal data type adds semantics related to ordering so that models
that make use of such domains may introduce model elements that involve
statements about the order of the terms in a domain.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O5yrECo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The relative order of this type's values need not be independently
obvious in their literal representation. It is expected that an
application will look up the ordering of these values from some
table.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O50gQSo1Ed65BMwZ7dmx2w">
        <body>
type CodedOrdinal alias CO specializes CV {
  BL    lessOrEqual(CO o);
  BL    lessThan(CO o);
  BL    greaterThan(CO o);
  BL    greaterOrEqual(CO o);
};
    </body>
      </ownedComment>
      <generalization xmi:id="CV_CO_generalization" general="CV"/>
      <ownedOperation xmi:id="CO-lessOrEqual" name="lessOrEqual" visibility="public">
        <ownedComment xmi:id="_O5oTCyo1Ed65BMwZ7dmx2w">
          <body> 
The ordering relation is based on lessOrEqual which is taken as
primitive in this specification.
	 </body>
        </ownedComment>
        <ownedComment xmi:id="_O5skcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>All other order relations can be derived from this one.
Taking lessOrEqual as primitive accomodates partial orderings.&lt;/p>
							&lt;p>Order relationships typically hold only within a single coding 
system.&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O5oTBSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5oTByo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5oTBio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O5oTCCo1Ed65BMwZ7dmx2w" name="o" type="CO"/>
      </ownedOperation>
      <ownedOperation xmi:id="CO-lessThan" name="lessThan" visibility="public">
        <ownedParameter xmi:id="_O5tykio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5uZoSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5uZoCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O5uZoio1Ed65BMwZ7dmx2w" name="o" type="CO"/>
      </ownedOperation>
      <ownedOperation xmi:id="CO-greaterThan" name="greaterThan" visibility="public">
        <ownedParameter xmi:id="_O5uZpio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5uZqCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5uZpyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O5uZqSo1Ed65BMwZ7dmx2w" name="o" type="CO"/>
      </ownedOperation>
      <ownedOperation xmi:id="CO-greaterOrEqual" name="greaterOrEqual" visibility="public">
        <ownedParameter xmi:id="_O5uZrSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O5vAsSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O5vAsCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O5vAsio1Ed65BMwZ7dmx2w" name="o" type="CO"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SC" name="SC">
      <ownedComment xmi:id="_O56m4Co1Ed65BMwZ7dmx2w">
        <body> 
A character string that optionally may have a code attached. The text
must always be present if a code is present.  The code is often a
local code.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O5-RQCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
This data type is used in cases where coding is exceptional (e.g.,
user text messages are essentially text messages, and a printable
message is the important content. Yet, sometimes messages come from a
catalog of canned messages, which the SC allows to reference.  
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O5_fYSo1Ed65BMwZ7dmx2w">
        <body>
type CharacterStringWithCode alias SC specializes ST {
  CE code;
};
    </body>
      </ownedComment>
      <ownedRule xmi:id="_O6BUkSo1Ed65BMwZ7dmx2w" constrainedElement="SC">
        <name xsi:nil="true"/>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_O6B7oCo1Ed65BMwZ7dmx2w">
          <body> &#xA;invariant(SC x) where x.nonNull {&#xA;  x.code.nonNull.implies(x.notEmpty);&#xA;};&#xA;      &#xA;Any non-null SC value MAY have a code, however, a code MUST NOT be&#xA;given without the text.&#xA;      </body>
        </specification>
      </ownedRule>
      <generalization xmi:id="ST_SC_generalization" general="ST"/>
      <ownedOperation xmi:id="SC-code" name="code" visibility="public">
        <ownedComment xmi:id="_O528hCo1Ed65BMwZ7dmx2w">
          <body> 
A code representing the string data. For example, the string data may
be a user-message out of a message-catalog where the code represents
the identifier of the message in the message catalog.
     </body>
        </ownedComment>
        <ownedParameter xmi:id="_O52Vdio1Ed65BMwZ7dmx2w" type="CE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O528gSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O528gCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="OID" name="OID" visibility="protected">
      <ownedComment xmi:id="_O6LFkSo1Ed65BMwZ7dmx2w">
        <body> 
A globally unique string representing an ISO Object Identifier
(OID) in a form that consists only of numbers and dots (e.g.,
&quot;2.16.840.1.113883.3.1&quot;). According to ISO, OIDs are paths in a tree
structure, with the left-most number representing the root and the
right-most number representing a leaf.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O6Ov8Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Each branch under the root corresponds to an assigning authority. Each
of these assigning authorities may, in turn, designate its own set of
assigning authorities that work under its auspices, and so on down the
line. Eventually, one of these authorities assigns a unique (to it as
an assigning authority) number that corresponds to a leaf node on the
tree. The leaf may represent an assigning authority (in which case the
root OID identifies the authority), or an instance of an object. An
assigning authority owns a namespace, consisting of its sub-tree.
    &lt;/p>
						&lt;p>
OIDs are the preferred scheme for unique identifiers. OIDs should
always be used except if one of the inclusion criteria for other
schemes apply.
    &lt;/p>
						&lt;p>
ISO/IEC 8824:1990(E) clause 28 defines the Object Identifier as
    &lt;/p>
						&lt;blockquote>
							&lt;p>
								&lt;code>28.9&lt;/code> The semantics of an
object identifier value are defined by reference to an &lt;code>
object identifier tree&lt;/code>. An object identifier tree is a tree whose root
corresponds to [the ISO/IEC 8824 standard] and whose vertices [i.e. nodes]
correspond to administrative authorities responsible for allocating arcs [i.e.
branches] from that vertex. Each arc from that tree is labeled by an object
identifier component, which is [an integer number]. Each information object to
be identified is allocated precisely one vertex (normally a leaf) and no other
information object (of the same or a different type) is allocated to
that same vertex. Thus an information object is uniquely and
unambiguously identified by the sequence of [integer numbers] (object
identifier components) labeling the arcs in a path from the root to
the vertex allocated to the information object.
      &lt;/p>
							&lt;p>
								&lt;code>28.10&lt;/code> An object identifier value is
semantically an ordered list of object identifier component
values. Starting with the root of the object identifier tree, each
object identifier component value identifies an arc in the object
identifier tree. The last object identifier component value identifies
an arc leading to a vertex to which an information object has been
assigned. It is this information object, which is identified by the
object identifier value. [...]
      &lt;/p>
						&lt;/blockquote>
						&lt;p>
According to ISO/IEC 8824 an object identifier is a sequence of object
identifier component values, which are integer numbers. These
component values are ordered such that the root of the object
identifier tree is the head of the list followed by all the arcs down
to the leaf representing the information object identified by the
OID. The fact that OID specializes &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;LIST&quot;/>&lt;/param>
							&lt;/object>&lt;
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
							&lt;/object>> represents this path of object identifier component
values from the root to the leaf.
    &lt;/p>
						&lt;p>
The &lt;code>leaf&lt;/code> and &quot;&lt;code>butLeaf&lt;/code>&quot;
properties take the opposite view. The
leaf is the last object identifier component value in the list, and
the &quot;butLeaf&quot; property is all of the OID &lt;code>but&lt;/code> the
&lt;code>leaf&lt;/code>. In a sense, the leaf is the identifier value and
all of the OID but the leaf refers to the namespace in which the leaf
is unique and meaningful.
    &lt;/p>
						&lt;p>
However, what part of the OID is considered &lt;code>value&lt;/code>
and what is &lt;code>namespace&lt;/code> may be viewed differently. In
general, any OID component sequence to the left can be considered the namespace
in which the rest of the sequence to the right is defined as a
meaningful and unique identifier value. The value-property with a
namespace OID as its argument represents this point of view.&lt;object name=&quot;footnote&quot;>
The value/namespace view on ISO object identifiers has important
semantic relevance. It represents the notion of identifier value
versus identifier assigning authority (= namespace), which is common
in healthcare information systems in general, and HL7 v2.x in
particular.
        &lt;/object>
						&lt;/p>
						&lt;div title=&quot; HL7-Assigned OIDs &quot; >section-OID.procedures
HL7 shall establish an OID registry and assign OIDs in its branch for
HL7 users and vendors upon their request. HL7 shall also assign OIDs
to public identifier-assigning authorities both U.S. nationally (e.g.,
the U.S. State driver license bureaus, U.S. Social Security
Administration, HIPAA Provider ID registry, etc.) and internationally
(e.g., other countries Social Security Administrations, Citizen ID
registries, etc.) The HL7 registered OIDs must be used for these
organizations, regardless whether these organizations have other OIDs
assigned from other sources.
      
When assigning OIDs to third parties or entities, HL7 shall
investigate whether an OID is already assigned for such entities
through other sources. It this is the case, HL7 shall record such OID
in a catalog, but HL7 shall not assign a duplicate OID in the HL7
branch. If possible, HL7 shall notify a third party when an OID is
being assigned for that party in the HL7 branch.
      
Though HL7 shall exercise diligence before assigning an OID in the HL7
branch to third parties, given the lack of a global OID registry
mechanism, one cannot make absolutely certain that there is no
preexisting OID assignment for such third-party entity. Also, a
duplicate assignment can happen in the future through another
source. If such cases of supplicate assignment become known to HL7,
HL7 shall make efforts to resolve this situation. For continued
interoperability in the meantime, the HL7 assigned OID shall be the
preferred OID used.
      
While most owners of an OID will &quot;design&quot; their namespace sub-tree in
some meaningful way, there is no way to generally infer any meaning on
the parts of an OID. HL7 does not standardize or require any namespace
sub-structure. An OID owner, or anyone having knowledge about the
logical structure of part of an OID, may still use that knowledge to
infer information about the associated object; however, the techniques
cannot be generalized.
      
						Example for a tree of ISO object identifiers. HL7's OID
        is 2.16.840.1.113883.
						
					
						An HL7 interface must not rely on any
knowledge about the substructure of an OID for which it cannot control the
assignment policies.
					&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O6QlICo1Ed65BMwZ7dmx2w">
        <body>
protected type ObjectIdentifier alias OID specializes UID, LIST&lt;INT> {
  INT   leaf;
  OID   butLeaf;
  OID   value(OID namespace);
  literal ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="UID_OID_generalization" general="UID"/>
      <generalization xmi:id="LISTINT_OID_generalization" general="LISTINT"/>
      <ownedOperation xmi:id="OID-leaf" name="leaf" visibility="public">
        <ownedParameter xmi:id="_O6Cisio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6CitCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6Cisyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="OID-butLeaf" name="butLeaf" visibility="public">
        <ownedParameter xmi:id="_O6CiuCo1Ed65BMwZ7dmx2w" type="OID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6DJwCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6CiuSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="OID-value" name="value" visibility="public">
        <ownedParameter xmi:id="_O6DJxCo1Ed65BMwZ7dmx2w" type="OID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6DJxio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6DJxSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O6DJxyo1Ed65BMwZ7dmx2w" name="namespace" type="OID"/>
      </ownedOperation>
      <ownedOperation xmi:id="OID-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O6Dw0io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O6HbMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The structured definition of the OID is provided mostly to be faithful
to the OID specification. Within HL7, OIDs are used as UID strings
only, i.e., the literal string value is the only thing that is
communicated and is the only thing that a reciever should have to
consider when working with UIDs in the scope of the HL7 specification.
      &lt;/p>
							&lt;p>
For compatibility with the DICOM standard, the literal form of the OID
should not exceed 64 characters. (see DICOM part 5, section 9).
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O6IpUSo1Ed65BMwZ7dmx2w">
          <body>
OID.literal ST {
    OID : INT &quot;.&quot; OID { $.head.equal($1);
      $.tail.equal($3); }
        | INT   { $.head.equal($1);
      $.tail.isEmpty; }
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O6DJyyo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6DJzSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6DJzCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTINT" name="LIST&lt;INT>">
      <templateBinding xmi:id="LISTINT-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O6B7pyo1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="INT"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="UUID" name="UUID" visibility="protected">
      <ownedComment xmi:id="_O6tRECo1Ed65BMwZ7dmx2w">
        <body> 
A globally unique string representing a DCE Universal Unique
Identifier (UUID) in the common UUID format that consists of 5
hyphen-separated groups of hexadecimal digits having 8, 4, 4, 4,
and 12 places respectively.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O6w7cCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Both the UUID and its string representation are defined by the Open
Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
    &lt;/p>
						&lt;p>
UUIDs are assigned based on Ethernet MAC addresses, the point in time
of creation and some random component. This mix is believed to
generate sufficiently unique identifiers without any organizational
policy for identifier assignment (in fact this piggy-backs on the
organization of MAC address assignment.)
    &lt;/p>
						&lt;p>
UUIDs are &lt;code>not&lt;/code> the preferred identifier
scheme for use as HL7 UIDs. UUIDs may be used when identifiers are
issued to objects representing individuals (e.g., entity instance
identifiers, act event identifiers, etc.) For objects describing
classes of things or events (e.g., catalog items), OIDs are the
preferred identifier scheme.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O6yJkSo1Ed65BMwZ7dmx2w">
        <body>
protected type UniversalUniqueIdentifier alias UUID specializes UID {
  INT timeLow;
  INT timeMid;
  INT timeHighAndVersion;
  INT clockSequence;
  INT node;
   literal  ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="UID_UUID_generalization" general="UID"/>
      <ownedOperation xmi:id="UUID-timeLow" name="timeLow" visibility="public">
        <ownedComment xmi:id="_O6TBYCo1Ed65BMwZ7dmx2w">
          <body> 
						The low field of the timestamp.
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O6SaVio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6SaWCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6SaVyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="UUID-timeMid" name="timeMid" visibility="public">
        <ownedComment xmi:id="_O6Wrxio1Ed65BMwZ7dmx2w">
          <body> 
						The middle field of the timestamp.
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O6WrwSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6Wrwyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6Wrwio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="UUID-timeHighAndVersion" name="timeHighAndVersion" visibility="public">
        <ownedComment xmi:id="_O6aWJio1Ed65BMwZ7dmx2w">
          <body> 
						The high field of the timestamp multiplexed with the version number.
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O6aWISo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6aWIyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6aWIio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="UUID-clockSequence" name="clockSequence" visibility="public">
        <ownedComment xmi:id="_O6eAhio1Ed65BMwZ7dmx2w">
          <body> 
						The high field of the clock sequence multiplexed with the variant and the low field of the clock sequence.
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O6eAgSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6eAgyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6eAgio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="UUID-node" name="node" visibility="public">
        <ownedComment xmi:id="_O6iR8io1Ed65BMwZ7dmx2w">
          <body> 
						The spatially unique node identifier (usually the host address). 
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O6hq4So1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6hq4yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6hq4io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="UUID-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O6l8VCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O6pmsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The structured definition of the UUID is provided mostly to be
faithful to the UUID specification. Within HL7, UUIDs are used as UID
strings only, i.e., the literal string value is the only thing that is
communicated and is the only thing that a reciever should have to
consider when working with UIDs in the scope of the HL7 specification.
      &lt;/p>
							&lt;p>
The literal form for the UUID is defined according to the original
specification of the UUID. However, because the HL7 UIDs are case
sensitive, for use with HL7, the hexadecimal digits A-F in UUIDs
must be converted to upper case.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O6q00So1Ed65BMwZ7dmx2w">
          <body>
UUID.literal ST {
  UUID : hex8 &quot;-&quot; hex4 &quot;-&quot; hex4 &quot;-&quot; hex4 &quot;-&quot; hex12 {
          $.timeLow.equal($1);
          $.timeMid.equal($3);
          $.timeHighAndVersion.equal($5);
          $.clockSequence.equal($7);
          $.node.equal($9);
  }

  INT hex4 :  hexDigit hexDigit hexDigit hexDigit {
          $.equal($1.times(16).plus($2)
	             .times(16).plus($3)
		     .times(16).plus($4);
  }

  INT hex8 :  hexDigit hexDigit hexDigit hexDigit
              hexDigit hexDigit hexDigit hexDigit {
          $.equal($1.times(16).plus($2)
	             .times(16).plus($3)
		     .times(16).plus($4)
	             .times(16).plus($5)
		     .times(16).plus($6)
	             .times(16).plus($7)
		     .times(16).plus($8);
  }

  INT hex12 : hexDigit hexDigit hexDigit hexDigit
              hexDigit hexDigit hexDigit hexDigit
              hexDigit hexDigit hexDigit hexDigit {
          $.equal($1.times(16).plus($2)
	             .times(16).plus($3)
		     .times(16).plus($4)
	             .times(16).plus($5)
		     .times(16).plus($6)
	             .times(16).plus($7)
		     .times(16).plus($8)
		     .times(16).plus($9)
	             .times(16).plus($10)
		     .times(16).plus($11)
		     .times(16).plus($12);
  }

  INT hexDigit
  : &quot;0&quot; { $.equal(0); }
  | &quot;1&quot; { $.equal(1); }
  | &quot;2&quot; { $.equal(2); }
  | &quot;3&quot; { $.equal(3); }
  | &quot;4&quot; { $.equal(4); }
  | &quot;5&quot; { $.equal(5); }
  | &quot;6&quot; { $.equal(6); }
  | &quot;7&quot; { $.equal(7); }
  | &quot;8&quot; { $.equal(8); }
  | &quot;9&quot; { $.equal(9); }
  | &quot;A&quot; { $.equal(10); }
  | &quot;B&quot; { $.equal(11); }
  | &quot;C&quot; { $.equal(12); }
  | &quot;D&quot; { $.equal(13); }
  | &quot;E&quot; { $.equal(14); }
  | &quot;F&quot; { $.equal(15); }
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O6lVQSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O6l8USo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O6l8UCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="RUID" name="RUID" visibility="protected">
      <ownedComment xmi:id="_O60l1Co1Ed65BMwZ7dmx2w">
        <body> 
A globally unique string defined exclusively by HL7. Identifiers in
this scheme are only defined by balloted HL7 specifications. Local
communities or systems must never use such reserved identifiers based
on bilateral negotiations.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O64QMCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
HL7 reserved identifiers are strings that consist only of (US-ASCII)
letters, digits and hyphens, where the first character must be a
letter. HL7 may assign these reserved identifiers as mnemonic
identifiers for major concepts of interest to HL7.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O66FYSo1Ed65BMwZ7dmx2w">
        <body>
protected type HL7ReservedIdentifierScheme alias RUID specializes UID;</body>
      </ownedComment>
      <generalization xmi:id="UID_RUID_generalization" general="UID"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="II" name="II">
      <ownedComment xmi:id="_O7O1gSo1Ed65BMwZ7dmx2w">
        <body> 
An identifier that uniquely identifies a thing or object. Examples
are object identifier for HL7 RIM objects, medical record number,
order id, service catalog item id, Vehicle Identification Number
(VIN), etc. Instance identifiers are defined based on ISO object
identifiers.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O7RRwCo1Ed65BMwZ7dmx2w">
        <body>
type InstanceIdentifier alias II specializes ANY {
  UID     root;
  ST      extension;
  ST      assigningAuthorityName;
  BL      displayable;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ANY_II_generalization" general="ANY"/>
      <ownedOperation xmi:id="II-root" name="root" visibility="public">
        <ownedComment xmi:id="_O68hpCo1Ed65BMwZ7dmx2w">
          <body> 
A unique identifier that guarantees the global uniqueness of the
instance identifier. The root alone may be the entire instance
identifier.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O7AMACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
In the presence of a non-null extension, the root is commonly
interpreted as the &quot;assigning authority&quot;, that is, it is supposed that
the root somehow refers to an organization that assigns identifiers
sent in the extension. However, the root does not have to be an
organizational UID, it can also be a UID specifically registered for
an identifier scheme.&lt;object name=&quot;footnote&quot;>
DICOM objects are identified by UID only. For the purpose of DICOM/HL7
integration, it would be awkward if HL7 required the extension to be
mandatory and to consider the UID only as an assigning
authority. Since UID values are simpler and do not contain the risks
of containing meaningless decoration, we do encourage systems to use
simple UID identifiers as external references to their objects.
          &lt;/object>
							&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O676lio1Ed65BMwZ7dmx2w" type="UID" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O68hoSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O68hoCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="II-extension" name="extension" visibility="public">
        <ownedComment xmi:id="_O7BaKCo1Ed65BMwZ7dmx2w">
          <body> 
A character string as a unique identifier within the scope of the
identifier root.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O7EdcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The extension is a character string that is unique in the namespace
designated by the root. If a non-NULL extension is exists, the root
specifies a namespace (sometimes called &quot;assigning authority&quot; or
&quot;identifier type&quot;.)  The extension property may be NULL in which case
the root OID is the complete unique identifier.
      &lt;/p>
							&lt;p>
The root and extension scheme effectively means that the concatenation
of root and extension must be a globally unique identifier for the
item that this II value identifies.
      &lt;/p>
							&lt;p>
It is recommended that systems use the OID scheme for external
identifiers of their communicated objects. The extension property is
mainly provided to accommodate legacy alphanumeric identifier schemes.
      &lt;/p>
							&lt;p>
Some identifier schemes define certain style options to their code
values. For example, the U.S. Social Security Number (SSN) is normally
written with dashes that group the digits into a pattern
&quot;123-12-1234&quot;. However, the dashes are not meaningful and a SSN can
just as well be represented as &quot;123121234&quot; without the dashes.
      &lt;/p>
							&lt;p>
In the case where identifier schemes provide for multiple
representations, HL7 shall make a ruling about which is the preferred
form. HL7 shall document that ruling where that respective external
identifier scheme is recognized. HL7 shall decide upon the preferred
form based on criteria of practicality and common use. In absence of
clear criteria of practicality and common use, the safest, most
extensible, and least stylized (the least decorated) form shall be
given preference.&lt;object name=&quot;footnote&quot;>
This ruling at design-time is necessary to prevent HL7 interfaces from
being burdened by identifier literal style conversions at
runtime. This is notwithstanding the fact that some applications may
require mapping from one form into another if that application has
settled with the representation option that was not chosen by HL7.
          
From practical experience it is recommended that II.extensions as
an alphanumeric identifier not contain leading zero digits (if any
zeroes at all), for these are often erroneously stripped. &quot;000123&quot;
and &quot;123&quot; would be different extension values, but this is prone
to be misunderstood, leading to false non-matches and duplicate
record entries. However applications should maintain any leading zero
digits encountered in II extensions. Leading zero digits are
prohibited in OID's, but may occur in UUID's, where they must be
maintained.
	  
There is no separate check digit property. Check digits are used
for human purpose and work best if kept completely transparent.
II.extensions MAY contain check digits anywhere, and the
particular check digit scheme (if any) would be implied by the
II.root. However, a separate check digit property is intentionally
not recognized by this specification.
	  &lt;/object>
							&lt;/p>
							&lt;p>
HL7 may also decide to map common external identifiers to the value
portion of the II.root OID. For example, the U.S. SSN could be
represented as 2.16.840.1.113883.4.1.123121234. The criteria of
practicality and common use will guide HL7's decision on each
individual case.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O7BaIio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7BaJCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7BaIyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O7BaJSo1Ed65BMwZ7dmx2w" type="ST">
            <body>NullFlavor.NI</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="II-assigningAuthorityName" name="assigningAuthorityName" visibility="public">
        <ownedComment xmi:id="_O7Frlyo1Ed65BMwZ7dmx2w">
          <body> 
A human readable name or mnemonic for the assigning authority. The Assigning
Authority Name has no computational value. The purpose of a Assigning Authority
Name is to assist an unaided human interpreter of an II value to interpret
the authority. Note: no automated processing must depend on the assigning
authority name to be present in any form.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O7Frkio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7FrlCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7Frkyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="II-displayable" name="displayable" visibility="public">
        <ownedComment xmi:id="_O7Iu4io1Ed65BMwZ7dmx2w">
          <body> 
Specifies if the identifier is intended for human
display and data entry (displayable = true) as opposed to pure machine
interoperation (displayable = false).
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O7IH0So1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7IH0yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7IH0io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="II-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O7LLJyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O7NnYCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two instance identifiers are equal if and only if their root and extension
properties are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O7LLISo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7LLIyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7LLIio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O7LLJCo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="ADXP" name="ADXP" visibility="protected">
      <ownedComment xmi:id="_O7WxUCo1Ed65BMwZ7dmx2w">
        <body> 
A character string that may have a type-tag signifying its role in the
address. Typical parts that exist in about every address are street,
house number, or post box, postal code, city, country but other roles
may be defined regionally, nationally, or on an enterprise level
(e.g. in military addresses). Addresses are usually broken up into
lines, which are indicated by special line-breaking delimiter elements
(e.g., DEL).
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O7absCo1Ed65BMwZ7dmx2w">
        <body>
protected type AddressPart alias ADXP specializes ST {
  CS  partType;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ST_ADXP_generalization" general="ST"/>
      <ownedOperation xmi:id="ADXP-partType" name="partType" visibility="public">
        <ownedComment xmi:id="_O7TG9io1Ed65BMwZ7dmx2w">
          <body> 
Specifies whether an address part names the street, city, country,
postal code, post box, etc. If the type is NULL the address part is
unclassified and would simply appear on an address label as is.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O7TG8So1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7TG8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7TG8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="AD" name="AD">
      <ownedComment xmi:id="_O71ScSo1Ed65BMwZ7dmx2w">
        <body> 
Mailing and home or office addresses. A sequence of address parts,
such as street or post office Box, city, postal code, country, etc.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O7480Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> is primarily used to communicate data that will allow
printing mail labels, that will allow a person to physically visit
that address. The postal address data type is not supposed to be a
container for additional information that might be useful for finding
geographic locations (e.g., GPS coordinates) or for performing
epidemiological studies. Such additional information is captured by
other, more appropriate HL7 elements.
    &lt;/p>
						&lt;p>
Addresses are conceptualized as text with added logical mark-up. The
mark-up may break the address into lines and may describe in detail
the role of each address part if it is known. Address parts occur in
the address in the order in which they would be printed on a mailing
label. The approach is similar to HTML or XML markup of text (but it
is not technically limited to XML representations.)
    &lt;/p>
						&lt;p>
Addresses are essentially sequences of address parts, but add a &quot;use&quot;
code and a valid time range for information about if and when the
address can be used for a given purpose.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O76yASo1Ed65BMwZ7dmx2w">
        <body>
type PostalAddress alias AD specializes LIST&lt;ADXP> {
  SET&lt;CS>   use;
  GTS useablePeriod;
  BL  isNotOrdered;
  ST  formatted;
};
    </body>
      </ownedComment>
      <generalization xmi:id="LISTADXP_AD_generalization" general="LISTADXP"/>
      <ownedOperation xmi:id="AD-use" name="use" visibility="public">
        <ownedComment xmi:id="_O7c39yo1Ed65BMwZ7dmx2w">
          <body> 
A set of codes advising a system or user which address in a set of
like addresses to select for a given purpose.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O7giUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
An address without specific use code might be a default address useful
for any purpose, but an address with a specific use code would be
preferred for that respective purpose.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O7c38io1Ed65BMwZ7dmx2w" type="SETCS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7c39Co1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7c38yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="AD-useablePeriod" name="useablePeriod" visibility="public">
        <ownedComment xmi:id="_O7i-kCo1Ed65BMwZ7dmx2w">
          <body> 
A General Timing Specification (GTS) specifying the periods of time
during which the address can be used.  This is used to specify
different addresses for different times of the week or year.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O7iXgio1Ed65BMwZ7dmx2w" type="GTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7iXhCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7iXgyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="AD-isNotOrdered" name="isNotOrdered" visibility="public">
        <ownedComment xmi:id="_O7mo9io1Ed65BMwZ7dmx2w">
          <body> 
A boolean value specifying whether the order of the address parts is known
or not. While the address parts are always a Sequence, the order in which
they are presented may or may not be known. Where this matters, the
isNotOrdered property can be used to convey this information.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O7mo8So1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7mo8yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7mo8io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="AD-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O7qTVyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O7t9sCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two address values are considered equal if both contain the same
address parts, independent of ordering. Use code and valid time are
excluded from the equality test.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O7qTUSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7qTUyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7qTUio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O7qTVCo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="AD-formatted" name="formatted" visibility="public">
        <ownedComment xmi:id="_O7vy5yo1Ed65BMwZ7dmx2w">
          <body> 
A character string value with the address formatted in lines and with
proper spacing. This is only a semantic property to define the
function of some of the address part types.&lt;object name=&quot;footnote&quot;>
Remember that semantic properties are bare of all control flow
semantics. The  could be implemented
as a &quot;procedure&quot; that would &quot;return&quot; the formatted address, but it
would not usually be a variable to which one could assign a formatted
address. However, HL7 does not define applications but only the
semantics of exchanged data values. Hence, the semantic model
abstracts from concepts like &quot;procedure&quot;, &quot;return&quot;, and &quot;assignment&quot;
but speaks only of property and value.
          &lt;/object>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O70EUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> data type's main purpose is to capture postal addresses,
such that one can visit that address or send mail to it. Humans will
look at addresses in printed form, such as on a mailing label. The
&lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> data type defines precise rules of how its data is
formatted.&lt;object name=&quot;footnote&quot;>
These rules for formatting addresses are part of the semantics of
addresses because addresses are primarily defined as text displayed or
printed and consumed by humans. Other uses (e.g., epidemiology) are
secondary — although not forbidden, the 
data type might not serve these other use cases very well, and HL7
defines better ways to handle these use cases. Note that these
formatting rules are not ITS issues, since this formatting applies
to presentations for humans whereas ITS specifications are
presentations for computer interchange.
          &lt;/object>
							&lt;/p>
							&lt;p>
Addresses are ordered lists of address parts. Each address part is
printed in the order of the list from left to right and top to bottom
(or in any other language-specific reading direction, which to
determine is outside the scope of this specification.)  Every address
part value is printed. Most address parts are framed by white
space. The following six rules govern the setting of whitespace.
      &lt;/p>
							&lt;ol>&lt;li>
									&lt;p>
Whitespace never accumulates, i.e. two subsequent spaces are the same
as one. Subsequent line breaks can be reduced to one. Whitespace
around a line break is not significant.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Literals may contain explicit whitespace, subject to the same white
space reduction rules. There is no notion of a literal line break
within the text of a single address part.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Leading and trailing explicit whitespace is insignificant in all
address parts, except for delimiter (DEL) address parts.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
By default, an address part is surrounded by implicit whitespace.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Delimiter (DEL) address parts are not surrounded by any implicit white
space.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Leading and trailing explicit whitespace is significant in delimiter
(DEL) address parts.
          &lt;/p>
								&lt;/li>&lt;/ol>
							&lt;p>
This means that all address parts are generally surrounded by white
space, but whitespace does never accumulate. Delimiters are never
surrounded by implicit whitespace and every whitespace contributed
by preceding or succeeding address parts is discarded, whether it was
implicit or explicit.
      &lt;/p>
							&lt;p>
The following shows examples of addresses in the XML ITS form.
      &lt;/p>
							&lt;blockquote>
								&lt;p>
1050 W Wishard Blvd,&lt;/br>
RG 5th floor,&lt;/br>
Indianapolis, IN 46240.
        &lt;/p>
							&lt;/blockquote>
							&lt;p>
Can be encoded in any of the following forms:&lt;object name=&quot;footnote&quot;>
The XML encoding shown here is according to the XML ITS only in order
to avoid introducing another instance notation. This does not imply
that the function would only work in XML, nor even that XML is the
preferred representation.
          &lt;/object>
							&lt;/p>
							&lt;p>
The first form would result from a system that only stores addresses
as free text or in a list of fields line1, line2, etc.:
&lt;/p>
							&lt;p>
The second form is more specific about the role of the address parts
than the first one:
&lt;/p>
							&lt;p>
This form is the typical form seen in the U.S., where street address
is sometimes separated, and city, state and ZIP code are always
separated.
&lt;/p>
							&lt;p>
The third is even more specific:
&lt;/p>
							&lt;p>
The latter form above is not used in the USA. However, it is useful
in Germany, where many systems keep house number as a distinct
field. For example, the German address:
&lt;/p>
							&lt;blockquote>&lt;/blockquote>
							&lt;p>
would most likely be encoded as follows:&lt;object name=&quot;footnote&quot;>
This example shows the strength of the mark-up approach to
addresses. A typical German system that stores house number and street
name in separate fields would print the address with street name first
followed by the house number. For U.S. addresses, this would be wrong
as the house number in the U.S. is written before the street name. The
marked-up address allows keeping the natural order of address parts
and still understanding their role.
    &lt;/object>
							&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O7vy4io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O7vy5Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O7vy4yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTADXP" name="LIST&lt;ADXP>">
      <templateBinding xmi:id="LISTADXP-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O7cQ5io1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="ADXP"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="ENXP" name="ENXP" visibility="protected">
      <ownedComment xmi:id="_O8EjACo1Ed65BMwZ7dmx2w">
        <body> 
A character string token representing a part of a name. May have a
type code signifying the role of the part in the whole entity name,
and a qualifier code for more detail about the name part type.
Typical name parts for person names are given names, and family names,
titles, etc.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O8HmUCo1Ed65BMwZ7dmx2w">
        <body>
protected type EntityNamePart alias ENXP specializes ST {
  CS  partType;
  SET&lt;CS>   qualifier;
};
    </body>
      </ownedComment>
      <generalization xmi:id="ST_ENXP_generalization" general="ST"/>
      <ownedOperation xmi:id="ENXP-partType" name="partType" visibility="public">
        <ownedComment xmi:id="_O79ORSo1Ed65BMwZ7dmx2w">
          <body> 
Indicates whether the name part is a given name, family name, prefix,
suffix, etc.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O7_qgCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Not every name part must have a type code, if the type code is
unknown, not applicable, or simply undefined this is expressed by a
NULL value (type.isNull). For example, a name may be &quot;Rogan Sulma&quot; and
it may not be clear which one is a given name or which is a last name,
or whether Rogan may be a title.
      &lt;/p>
							&lt;p>
Entity names are conceptualized as text with added mark-up. The
mark-up may describe in detail the role of each name part if it is
known. Name parts occur in the order in which they would be printed on
a mailing label. The model is similar to HTML or XML markup of text.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O79OQCo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O79OQio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O79OQSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="ENXP-qualifier" name="qualifier" visibility="public">
        <ownedComment xmi:id="_O8A4pyo1Ed65BMwZ7dmx2w">
          <body> 
The qualifier is a set of codes each of which specifies a certain
subcategory of the name part in addition to the main name part type.
For example, a given name may be flagged as a nickname, a family name
may be a pseudonym or a name of public records.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O8A4oio1Ed65BMwZ7dmx2w" type="SETCS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8A4pCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8A4oyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="EN" name="EN">
      <ownedComment xmi:id="_O8hO8So1Ed65BMwZ7dmx2w">
        <body> 
A name for a person, organization, place or thing. A sequence of name
parts, such as given name or family name, prefix, suffix, etc.
Examples for entity name values are &quot;Jim Bob Walton, Jr.&quot;, &quot;Health
Level Seven, Inc.&quot;, &quot;Lake Tahoe&quot;, etc. An entity name may be as simple
as a character string or may consist of several entity name parts,
such as, &quot;Jim&quot;, &quot;Bob&quot;, &quot;Walton&quot;, and &quot;Jr.&quot;, &quot;Health Level Seven&quot; and
&quot;Inc.&quot;, &quot;Lake&quot; and &quot;Tahoe&quot;.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O8k5UCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Entity names are conceptualized as text with added logical mark-up.
Name parts occur in a natural order in which they would be displayed,
as opposed to in a order detemined by name part. The ordeing of the
name parts is significant a feature that replaces the need for a
separate &quot;display name&quot; property. Applications may change that
ordering of name parts to account for their user's customary ordering
of name parts. The approach is similar to HTML or XML markup of text
(but it is not technically limited to XML representations.)
    &lt;/p>
						&lt;p>
Entity names are essentially sequences of entity name parts, but add a
&quot;use&quot; code and a valid time range for information about when the name
was used and how to choose between multiple aliases that may be valid
at the same point in time.
    &lt;/p>
						&lt;p>
Three restrictions to Entity Name are defined in order to allow making
specific constraints for certain kinds of entities, trivial name
(&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;TN&quot;/>&lt;/param>
							&lt;/object>), person name (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PN&quot;/>&lt;/param>
							&lt;/object>), and
organization name (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ON&quot;/>&lt;/param>
							&lt;/object>).
    &lt;/p>
						&lt;div title=&quot; Examples &quot; >
A very simple encoding of  &quot;Adam A. Everyman&quot; would be:
      

  Adam
  A.
  Everyman

					
None of the special qualifiers need to be mentioned if they are
unknown or irrelevant. The next example shows extensive use of
multiple given names, prefixes, suffixes, for academic degrees,
nobility titles, vorvoegsels (&quot;van&quot;), and professional
designations.
      

  Dr. phil. 
  Regina
  Johanna
  Maria
  Gräfin 
  Hochheim-Weilenfels
  NCFSA


The next example is an organization name, &quot;Health Level Seven, Inc.&quot;
in simple string form:
      
Health Level Seven, Inc.
					
and as a fully parsed name
      
Health Level Seven, Inc.

					
The following example shows a Japanese name in the three forms:
ideographic (Kanji), syllabic (Hiragana), and alphabetic (Romaji).
      

  木村
  通男


  きむら
  みちお


  KIMURA
  MICHIO

					&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O8mugSo1Ed65BMwZ7dmx2w">
        <body>
type EntityName alias EN specializes LIST&lt;ENXP> {
  SET&lt;CS> use;
  IVL&lt;TS> validTime;
  ST  formatted;
};
    </body>
      </ownedComment>
      <generalization xmi:id="LISTENXP_EN_generalization" general="LISTENXP"/>
      <ownedOperation xmi:id="EN-use" name="use" visibility="public">
        <ownedComment xmi:id="_O8Kpoyo1Ed65BMwZ7dmx2w">
          <body> 
A set of codes advising a system or user which name in a set of
names to select for a given purpose.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O8OUACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A name without specific use code might be a default name useful for
any purpose, but a name with a specific use code would be preferred
for that respective purpose.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O8KClSo1Ed65BMwZ7dmx2w" type="SETCS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8KpoCo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8KClio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="EN-validTime" name="validTime" visibility="public">
        <ownedComment xmi:id="_O8QJNyo1Ed65BMwZ7dmx2w">
          <body> 
An interval of time specifying the time during which the name is or
was used for the entity. This accomodates the fact that people change
names for people, places and things.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O8TzkCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> conforms to the history item data type extension (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
								&lt;/object>).
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O8QJMio1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8QJNCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8QJMyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="EN-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O8WP0So1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O8Z6MCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two name values are considered equal if both conatain the same name
parts, independent of ordering. Use code and valid time are excluded
from the equality test.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O8Vowio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8VoxCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8Vowyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O8VoxSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="EN-formatted" name="formatted" visibility="public">
        <ownedComment xmi:id="_O8bvZCo1Ed65BMwZ7dmx2w">
          <body> 
A character string value with the entity name formatted with
proper spacing. This is only a semantic property to define the
function of some of the name part types.&lt;object name=&quot;footnote&quot;>
Remember that semantic properties are bare of all control flow
semantics. The  could be implemented
as a &quot;procedure&quot; that would &quot;return&quot; the formatted name, but it would
not usually be a variable to which one could assign a formatted
name. However, HL7 does not define applications but only the semantics
of exchanged data values. Hence, the semantic model abstracts from
concepts like &quot;procedure&quot;, &quot;return&quot;, and &quot;assignment&quot; but speaks only
of property and value.
          &lt;/object>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O8fZwCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> data type's main purpose is to capture names of people,
places, and things (entities), so that one can address and refer to
these entities in speech and writing. Humans will look at names in
printed form, such as on a mailing label. The &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> data type
therefore defines precise rules of how its data is
formatted.&lt;object name=&quot;footnote&quot;>
These rules for formatting names are part of the semantics of names
because the name parts have been designed with the important use case
of displaying and rendering on labels. Note that these formatting
rules are not ITS issues, since this formatting applies to
presentations for humans whereas ITS specifications are presentations
for computer interchange.
          &lt;/object>
							&lt;/p>
							&lt;p>
Entity names are ordered lists of entity name parts. Each entity name
part is printed in the order of the list from left to right (or in any
other language-specific reading direction.)  Every entity name part
(except for those marked &quot;invisible&quot;) is printed. Most entity name
parts are framed by whitespace. The following six rules govern the
setting of whitespace.
      &lt;/p>
							&lt;ol>&lt;li>
									&lt;p>
Whitespace never accumulates, i.e. two subsequent spaces are the same
as one.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Literals may contain explicit whitespace subject to the same white
space reduction rules.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Except for &lt;code>prefix&lt;/code>, &lt;code>suffix&lt;/code> and
&lt;code>delimiter&lt;/code> name parts, every name part is surrounded by
implicit whitespace. Leading and trailing explicit whitespace is
insignificant in all those name parts.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Delimiter name parts are not surrounded by any implicit white
space. Leading and trailing explicit whitespace is significant in
delimiter name parts.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Prefix name parts only have implicit leading whitespace but no
implicit trailing whitespace. Trailing explicit whitespace is
significant in prefix name parts.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Suffix name parts only have implicit trailing whitespace but no
implicit leading whitespace. Leading explicit whitespace is
significant in suffix name parts.
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
This means that all entity name parts are generally surrounded by
whitespace, but whitespace does never accumulate. Delimiters are never
surrounded by implicit whitespace, prefixes are not followed by
implicit whitespace and suffixes are not preceded by implicit white
space. Every whitespace contributed by preceding or succeeding name
parts around those special name parts is discarded, whether it was
implicit or explicit.
          &lt;/p>
								&lt;/li>&lt;/ol>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O8bIUio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8bvYSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8bvYCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="LISTENXP" name="LIST&lt;ENXP>">
      <templateBinding xmi:id="LISTENXP-_templateBinding.0" signature="_Oplr6So1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O8KCkio1Ed65BMwZ7dmx2w" formal="_Oplr6io1Ed65BMwZ7dmx2w" actual="ENXP"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="TN" name="TN">
      <ownedComment xmi:id="_O8q_-yo1Ed65BMwZ7dmx2w">
        <body> 
A restriction of entity name that is effectively a simple string used
for a simple name for things and places.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O8vRYCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> is a &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;EN&quot;/>&lt;/param>
							&lt;/object> that consists of only one name
part without any name part type or qualifier. The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object>, and its
single name part are therefore equivalent to a simple character
string. This equivalence is expressed by a defined demotion to
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
							&lt;/object> and promotion from &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;ST&quot;/>&lt;/param>
							&lt;/object>.
    &lt;/p>
						&lt;p>
Trivial names are typically used for places and things, such as
&lt;code>Lake Erie&lt;/code> or &lt;code>Reagan National Airport&lt;/code>:
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O8wfgSo1Ed65BMwZ7dmx2w">
        <body>
type TrivialName alias TN specializes EN {
 demotion ST;
 promotion  TN  (ST x);
};
</body>
      </ownedComment>
      <generalization xmi:id="EN_TN_generalization" general="EN"/>
      <ownedOperation xmi:id="TN-demotion" name="demotion" visibility="public">
        <ownedParameter xmi:id="_O8qY4io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8q_8So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8q_8Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="TN-promotion" name="promotion" visibility="public">
        <ownedParameter xmi:id="_O8q_9So1Ed65BMwZ7dmx2w" type="TN" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O8q_9yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O8q_9io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O8q_-Co1Ed65BMwZ7dmx2w" name="x" type="ST"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PN" name="PN">
      <ownedComment xmi:id="_O8zi0So1Ed65BMwZ7dmx2w">
        <body> 
An &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;EN&quot;/>&lt;/param>
						&lt;/object> used when the named Entity
is a Person. A sequence of name parts, such as given name or
family name, prefix, suffix, etc. A name part is a restriction of
entity name part that only allows those entity name parts qualifiers
applicable to person names. Since the structure of entity name is
mostly determined by the requirements of person name, the restriction
is very minor.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O82mICo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Since most of the functionality of entity name is in support of person
names, the person name (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PN&quot;/>&lt;/param>
							&lt;/object>) is only a very minor
restriction on the entity name part qualifier.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O830QSo1Ed65BMwZ7dmx2w">
        <body>
type PersonName alias PN specializes EN;
</body>
      </ownedComment>
      <generalization xmi:id="EN_PN_generalization" general="EN"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="ON" name="ON">
      <ownedComment xmi:id="_O863kSo1Ed65BMwZ7dmx2w">
        <body> 
An &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;EN&quot;/>&lt;/param>
						&lt;/object> used when the named Entity
is an Organization. A sequence of name parts.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O89T0Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
A name for an organization, such as &quot;Health Level Seven, Inc.&quot;  An
organization name consists only of untyped name parts, prefixes,
suffixes, and delimiters.
    &lt;/p>
						&lt;div title=&quot; Examples &quot; >
The following is the organization name, &quot;Health Level Seven, Inc.&quot; in
a simple string form:
      
Health Level Seven, Inc.;

And with the legal status &quot;Inc.&quot; as a distinguished name part:
      
Health Level Seven, Inc.

					&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O8-h8So1Ed65BMwZ7dmx2w">
        <body>
type OrganizationName alias ON specializes EN;
</body>
      </ownedComment>
      <generalization xmi:id="EN_ON_generalization" general="EN"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="RTO" name="RTO">
      <ownedComment xmi:id="_O9LWQSo1Ed65BMwZ7dmx2w">
        <body> 
A quantity constructed as the quotient of a numerator quantity divided
by a denominator quantity. Common factors in the numerator and
denominator are not automatically cancelled out.  The &lt;object name=&quot;itemName&quot;>
							&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
						&lt;/object> data
type supports titers (e.g., &quot;1:128&quot;) and other quantities produced by
laboratories that truly represent ratios. Ratios are not simply
&quot;structured numerics&quot;, particularly blood pressure measurements
(e.g. &quot;120/60&quot;) are not ratios. In many cases the &lt;object name=&quot;datatypeRef&quot;>
							&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
						&lt;/object>
should be used instead of the &lt;object name=&quot;itemName&quot;>
							&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
						&lt;/object>.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O9NygCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
Ratios are different from rational numbers, i.e., in ratios common
factors in the numerator and denominator never cancel out.  A ratio of
two real or integer numbers is not automatically reduced to a real
number.
    &lt;/p>
						&lt;p>
The default value for both numerator and denominator is the integer
number 1 (one.) The denominator may not be zero.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O9PAoSo1Ed65BMwZ7dmx2w">
        <body>
template&lt;QTY N, QTY D>
type Ratio&lt;N, D> alias RTO&lt;N, D> specializes QTY {
  N numerator;
  D denominator;
 literal ST;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O9AXIio1Ed65BMwZ7dmx2w" parameter="_O9AXIyo1Ed65BMwZ7dmx2w _O9AXJSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O9AXIyo1Ed65BMwZ7dmx2w" parameteredElement="_O9AXJCo1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O9AXJCo1Ed65BMwZ7dmx2w" name="N" templateParameter="_O9AXIyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O9AXJSo1Ed65BMwZ7dmx2w" parameteredElement="_O9AXJio1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O9AXJio1Ed65BMwZ7dmx2w" name="D" templateParameter="_O9AXJSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="QTY_RTO_generalization" general="QTY"/>
      <ownedOperation xmi:id="RTO-numerator" name="numerator" visibility="public">
        <ownedComment xmi:id="_O9AXLyo1Ed65BMwZ7dmx2w">
          <body> 
The quantity that is being divided in the ratio.  The default is the
integer number 1 (one.)
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9AXKSo1Ed65BMwZ7dmx2w" type="_O9AXJCo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9AXKyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9AXKio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O9AXLCo1Ed65BMwZ7dmx2w" type="_O9AXJCo1Ed65BMwZ7dmx2w">
            <body>1</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="RTO-denominator" name="denominator" visibility="public">
        <ownedComment xmi:id="_O9Dadyo1Ed65BMwZ7dmx2w">
          <body> 
The quantity that devides the numerator in the ratio.  The default is
the integer number 1 (one.)  The denominator must not be zero.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9DacSo1Ed65BMwZ7dmx2w" type="_O9AXJio1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9Dacyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9Dacio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O9DadCo1Ed65BMwZ7dmx2w" type="_O9AXJio1Ed65BMwZ7dmx2w">
            <body>1</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="RTO-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O9Gdwio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O9I6ACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A ratio literal form exists for all ratios where both numerator and
denominators have literal forms. A ratio is simply the numerator
literal a colon as separator followed by the denominator literal. When
the colon and denominator are missing, the integer number 1 is assumed
as the denominator.
     &lt;/p>
							&lt;p>
For example, the rubella virus antibody titer value 1:64 could be
represented using the literal &quot;1:64&quot;.
     &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O9KIISo1Ed65BMwZ7dmx2w">
          <body>
RTO.literal ST {
  RTO : QTY          { $.numerator.equal($1);
                       $.denominator.equal((INT)1); };
      | QTY &quot;:&quot; QTY  { $.numerator.equal($1);
                       $.denominator.equal($3); };
};
     </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9F2sSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9F2syo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9F2sio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="MO" name="MO">
      <ownedComment xmi:id="_O91dkSo1Ed65BMwZ7dmx2w">
        <body> 
A monetary amount is a quantity expressing the amount of money in some
currency. Currencies are the units in which monetary amounts are
denominated in different economic regions. While the monetary amount
is a single kind of quantity (money) the exchange rates between the
different units are variable.  This is the principle difference
between physical quantity and monetary amounts, and the reason why
currency units are not physical units.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O94g4Co1Ed65BMwZ7dmx2w">
        <body>
type MonetaryAmount alias MO specializes QTY {
          REAL value;
          CS   currency;
          MO plus(MO x);
          MO   times(REAL x);
  literal ST;
};
    </body>
      </ownedComment>
      <generalization xmi:id="QTY_MO_generalization" general="QTY"/>
      <ownedOperation xmi:id="MO-value" name="value" visibility="public">
        <ownedComment xmi:id="_O9Q12So1Ed65BMwZ7dmx2w">
          <body> 
The magnitude of the monetary amount in terms of the currency unit.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O9TSECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The precision attribute of the real number type is the precision of
the decimal representation, not the precision of the value. The real
number type has no notion of uncertainty or accuracy. For example,
&quot;1.99 USD&quot; (precision 3) times 7 is &quot;13.93 USD&quot; (precision 4) and
should not be rounded to &quot;13.9&quot; to keep the precision constant.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O9Q11Co1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9Q11io1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9Q11So1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="MO-currency" name="currency" visibility="public">
        <ownedComment xmi:id="_O9VHQyo1Ed65BMwZ7dmx2w">
          <body> 
The currency unit as defined in ISO 4217.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O9XjgCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This table only shows a representative subset of the 
codes defined by ISO 4217. All codes from ISO 4127 are 
valid for this attribute
&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O9UgMio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9VHQCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9UgMyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="MO-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O9YxqCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O9b08Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> values are equal if each their values and their
currency units are equal.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O9Yxoio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9YxpCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9Yxoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O9YxpSo1Ed65BMwZ7dmx2w" name="x" type="ANY"/>
      </ownedOperation>
      <ownedOperation xmi:id="MO-compares" name="compares" visibility="public">
        <ownedComment xmi:id="_O9dDFio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O9ffUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Two &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> values compare each other (and have an ordering and
difference) if their currency units are equal.
      &lt;/p>
							&lt;p>
If the currencies are not equal, the amounts cannot be
compared. Conversion between the currencies is outside the scope of
this specification. In practice, foreign exchange rates are highly
variable not only over long and short amounts of time, but also
depending on location and access to currency trade markets.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O9dDECo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9dDEio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9dDESo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O9dDEyo1Ed65BMwZ7dmx2w" name="x" type="QTY"/>
      </ownedOperation>
      <ownedOperation xmi:id="MO-diffType" name="diffType" visibility="public">
        <ownedComment xmi:id="_O9gtdyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O9kX0Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
      The difference between 2 monetary amounts is another monetary amount
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O9gtcio1Ed65BMwZ7dmx2w" type="TYPE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9gtdCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9gtcyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="MO-plus" name="plus" visibility="public">
        <ownedComment xmi:id="_O9m0Eyo1Ed65BMwZ7dmx2w">
          <body> 
Two monetary amounts can be added if they are denominated in the same
currency.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9mNAio1Ed65BMwZ7dmx2w" type="MO" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9mNBCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9mNAyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O9m0ECo1Ed65BMwZ7dmx2w" name="x" type="MO"/>
      </ownedOperation>
      <ownedOperation xmi:id="MO-times" name="times" visibility="public">
        <ownedComment xmi:id="_O9qedyo1Ed65BMwZ7dmx2w">
          <body> 
Multiplication with a real number to forms a scaled quantity. A scaled
quantity is comparable to its original quantity.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9qecSo1Ed65BMwZ7dmx2w" type="MO" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9qecyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9qecio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O9qedCo1Ed65BMwZ7dmx2w" name="x" type="REAL"/>
      </ownedOperation>
      <ownedOperation xmi:id="MO-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_O9uv4So1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O9xzMCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form for a monetary amount consists of the currency code string,
optional whitespace, and &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> literal amount.
      &lt;/p>
							&lt;p>
For example, &quot;USD189.95&quot; is the literal for 189.95 U.S. Dollar.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_O9zoYSo1Ed65BMwZ7dmx2w">
          <body>
MO.literal ST {
  MO : currency value  { $.currency.equal($1); }
                         $.value.equal($2);
  CS currency : ST     { $.currency.value.equal($1);
                         $.currency.codeSystem
                            .equal(2.16.840.1.113883.6.9); }
  REAL value : REAL    { $.value.equal($1); }
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O9uI0So1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O9uI0yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O9uI0io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CAL" name="CAL" visibility="private">
      <ownedComment xmi:id="_O-K0wCo1Ed65BMwZ7dmx2w">
        <body> 
A calendar is a concept of measuring time in various cycles. Such
cycles are years, months, days, hours, minutes, seconds, and
weeks. Some of these cycles are synchronized and some are not (e.g.,
weeks and months are not synchronized.)
      </body>
      </ownedComment>
      <ownedComment xmi:id="_O-OfICo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
After &quot;rolling the time axis&quot; into these cycles (See the figure)
a calendar expresses a point in time as a sequence
of integer counts of cycles, e.g., for year, month, day, hour,
etc. The calendar is rooted in some conventional start point, called
the &quot;epoch.&quot;
      &lt;/p>
						
						&lt;p>
A calendar &quot;rolls&quot; the time axis into a complex convolute according to
the calendar periods year (blue), month (yellow), day (green), hour
(red), etc. The cycles need not be aligned, for example, the week (not
shown) is not aligned to the month.&lt;object name=&quot;footnote&quot;>
Imagine a special clock that measures those cycles, where the pointers
are not all stacked on a common axis but each pointer is attached to
the end of the pointer measuring the next larger cycle.
            &lt;/object>
						&lt;/p>
						&lt;p>
Calendar is defined as a set of calendar cycles, and has a name and a
code. The head of the Calendar is the largest CalendarCycle appearing
right most in the calendar expression. The epoch is the beginning of
that calendar, i.e., the point in time where all calendar cycles are
zero.
      &lt;/p>
						&lt;p>
The calendar definition can be shown as in &lt;object name=&quot;conceptDomainRef&quot;>
								&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
							&lt;/object>
for the modern Gregorian calendar. The calendar definition table lists a
calendar cycle in each row. The calendar units are dependent on each other and
defined in the value column. The sequence column shows the relationship through
the next property. The other columns are as in the formal calendar cycle
definition.&lt;object name=&quot;footnote&quot;> 
At present, the CalendarCycle properties sum and value are not
formally defined. The computation of calendar digits involves some
complex computation which to specify here would be hard to understand
and evaluate for correctness. Unfortunately, no standard exists that
would formally define the relationship between calendar expressions
and elapsed time since an epoch. ASN.1, the XML Schema Data Type
specification and SQL92 all refer to ISO 8601, however, ISO 8601 does
only specify the syntax of Gregorian calendar expressions, but not
their semantics. In this standard, we define the syntax and semantics
formally, however, we presume the semantics of the sum-, and
value-properties to be defined elsewhere.  
          &lt;/object>
						&lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O-QUUSo1Ed65BMwZ7dmx2w">
        <body>
private type Calendar alias CAL specializes SET&lt;CLCY>  {
  CS   name;
  CLCY head;
  TS   epoch;
};
</body>
      </ownedComment>
      <generalization xmi:id="SETCLCY_CAL_generalization" general="SETCLCY"/>
      <ownedOperation xmi:id="CAL-name" name="name" visibility="public">
        <ownedParameter xmi:id="_O-F8Qyo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-GjUSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-GjUCo1Ed65BMwZ7dmx2w" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CAL-head" name="head" visibility="public">
        <ownedParameter xmi:id="_O-GjVSo1Ed65BMwZ7dmx2w" type="CLCY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-GjVyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-GjVio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CAL-epoch" name="epoch" visibility="public">
        <ownedParameter xmi:id="_O-GjWyo1Ed65BMwZ7dmx2w" type="TS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-HKYCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-GjXCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CAL-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O-HKaio1Ed65BMwZ7dmx2w">
          <body> 
						The definition of equality for &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> is taken from the &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;DSET&quot;/>&lt;/param>
							&lt;/object> data type.&lt;object name=&quot;footnote&quot;>
								This means that values of the type CAL and DSET&lt;CLCY> may be equal.
							&lt;/object>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O-HKZCo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-HKZio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-HKZSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O-HKZyo1Ed65BMwZ7dmx2w" name="x" type="CAL"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETCLCY" name="SET&lt;CLCY>">
      <templateBinding xmi:id="SETCLCY-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O95vBio1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="CLCY"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="CLCY" name="CLCY" visibility="private">
      <ownedComment xmi:id="_O9-ngCo1Ed65BMwZ7dmx2w">
        <body>     
A calendar cycle defines one group of decimal digits in the calendar
expression. Examples for calendar cycles are year, month, day, hour,
minute, second, and week.
      </body>
      </ownedComment>
      <ownedComment xmi:id="_O-CR4Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
A calendar cycle has a name and two codes, a one-letter code and a
two-letter code. The property &lt;code>ndigits&lt;/code> is the number of
decimal digits occupied in the calendar expression. The property
&lt;code>start&lt;/code> specifies where counting starts (i.e., at 0 or 1.)
The &lt;code>next&lt;/code> property is the next lower cycle in the order of
the calendar expression. The max(&lt;code>t&lt;/code>) property is the
maximum number of cycles at time &lt;code>t&lt;/code> (max depends on the
time &lt;code>t&lt;/code> to account for leap years and leap seconds.)  The
property value(&lt;code>t&lt;/code>) is the integer number of cycles shown
in the calendar expression of time &lt;code>t&lt;/code>. The property
sum(&lt;code>t&lt;/code>, &lt;code>n&lt;/code>) is the sum of &lt;code>n&lt;/code>
calendar cycles added to the time &lt;code>t&lt;/code>.
      &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O-EHESo1Ed65BMwZ7dmx2w">
        <body>
private type CalendarCycle alias CLCY specializes ANY {
  CE    name;
  INT   ndigits;
  INT   start;
  CLCY next;
  INT   max(TS t);
  TS    sum(TS t, REAL r);
  INT   value(TS t);
};
</body>
      </ownedComment>
      <generalization xmi:id="ANY_CLCY_generalization" general="ANY"/>
      <ownedOperation xmi:id="CLCY-name" name="name" visibility="public">
        <ownedParameter xmi:id="_O96WESo1Ed65BMwZ7dmx2w" type="CE" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O96WEyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O96WEio1Ed65BMwZ7dmx2w" value="1"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-ndigits" name="ndigits" visibility="public">
        <ownedParameter xmi:id="_O96WFyo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O96WGSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O96WGCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-start" name="start" visibility="public">
        <ownedParameter xmi:id="_O96WHSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O96WHyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O96WHio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-next" name="next" visibility="public">
        <ownedParameter xmi:id="_O969Iio1Ed65BMwZ7dmx2w" type="CLCY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O969JCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O969Iyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-max" name="max" visibility="public">
        <ownedParameter xmi:id="_O969KCo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O969Kio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O969KSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O969Kyo1Ed65BMwZ7dmx2w" name="t" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-sum" name="sum" visibility="public">
        <ownedParameter xmi:id="_O969Lyo1Ed65BMwZ7dmx2w" type="TS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O969MSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O969MCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O97kMCo1Ed65BMwZ7dmx2w" name="t" type="TS"/>
        <ownedParameter xmi:id="_O97kMSo1Ed65BMwZ7dmx2w" name="r" type="REAL"/>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-value" name="value" visibility="public">
        <ownedParameter xmi:id="_O97kNSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O97kNyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O97kNio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O97kOCo1Ed65BMwZ7dmx2w" name="t" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="CLCY-equal" name="equal" visibility="public">
        <ownedComment xmi:id="_O98LQCo1Ed65BMwZ7dmx2w">
          <body> 
						Two nonNull &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object>s are equal if they have the same ndigits, start, and next.
					</body>
        </ownedComment>
        <ownedParameter xmi:id="_O97kPCo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O97kPio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O97kPSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O97kPyo1Ed65BMwZ7dmx2w" name="x" type="CLCY"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="GLIST" name="GLIST">
      <ownedComment xmi:id="_O-oHwSo1Ed65BMwZ7dmx2w">
        <body> 
A periodic or monotone sequence of values generated from a few
parameters, rather than being enumerated. Used to specify regular
sampling points for biosignals.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O-qkACo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The item at a certain index in the list is calculated by performing an
integer division on the index () with the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;denominator&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;GLIST&quot;/>&lt;/param>
							&lt;/object> () and then take that
value's remainder with the &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;period&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;GLIST&quot;/>&lt;/param>
							&lt;/object>
(). Multiply this value with the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;increment&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;GLIST&quot;/>&lt;/param>
							&lt;/object> () and add to the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;head&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;GLIST&quot;/>&lt;/param>
							&lt;/object> (
							&lt;sub>0&lt;/sub>.)
    &lt;/p>
						&lt;blockquote>
							&lt;p>
								
								&lt;sub>
									
								&lt;/sub>
=

								&lt;sub>0&lt;/sub>
+

×
(/)
mod 
							&lt;/p>
						&lt;/blockquote>
						&lt;tablewidth=&quot;90%&quot; hl7id=&quot;table-GLIST.example&quot; style=&quot;Requirement&quot;  >&lt;caption>Examples for Generated Sequences&lt;/caption>&lt;thead>&lt;tr>&lt;th>head&lt;/th>&lt;th>increment&lt;/th>&lt;th>denominator&lt;/th>&lt;th>period&lt;/th>&lt;th>meaning&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>0&lt;/td>&lt;td>1&lt;/td>&lt;td>1&lt;/td>&lt;td>∞&lt;/td>&lt;td>The identity-sequence where each item is equal to its index.&lt;/td>&lt;/tr>&lt;tr>&lt;td>198706052000&lt;/td>&lt;td>2 hour&lt;/td>&lt;td>1&lt;/td>&lt;td>∞&lt;/td>&lt;td>Sequence starting on June 5, 1987 at 7 PM and
          incrementing every two hours: 9 PM, 11 PM, 1 AM (June 6), 3
          AM, 5 AM, and so on.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0 V&lt;/td>&lt;td>1 mV&lt;/td>&lt;td>1&lt;/td>&lt;td>100&lt;/td>&lt;td>The x-wave of a digital oscillograph scanning between
          0 and 100 mV in 100 steps of 1 mV. The frequency is unknown
          from these data as we do not know how much time elapses
          between each step of the index.&lt;/td>&lt;/tr>&lt;tr>&lt;td>2002072920300&lt;/td>&lt;td>100
          us&lt;/td>&lt;td>1&lt;/td>&lt;td>∞&lt;/td>&lt;td>A timebase from June 29,
          2002 at 8:30 PM with 100 us between each steps of the
          index. If combined with the previous generator as a second
          sampling dimension this would now describe our digital
          oscilloscope's x-timebase as 1 mV per 100 us. At 100 steps
          per period, the period is 10 ms, which is equal to a
          frequency of 100 Hz.&lt;/td>&lt;/tr>&lt;tr>&lt;td>0 V&lt;/td>&lt;td>1 mV&lt;/td>&lt;td>100&lt;/td>&lt;td>100&lt;/td>&lt;td>Combining this generator to the previous two generators
          could describe a three-dimensional sampling space with two
          voltages and time. This generator also steps at 1 mV and has
          100 steps per period, however, it only steps every 100 index
          increments, so, the first voltage generator makes one full
          cycle before this generator is incremented. One can think of
          the two voltages as &quot;rows&quot; and &quot;columns&quot; of a &quot;sampling
          frame&quot;. With the previous generator as the timebase, this
          results in a scan of sampling frames of 100 mV × 100
          mV with a framerate of 1 Hz.&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O-ryISo1Ed65BMwZ7dmx2w">
        <body>
template&lt;QTY T>
type GeneratedSequence&lt;T> alias GLIST&lt;T> specializes LIST&lt;T> {
        QTY     increment;
        INT     period;
	    INT     denominator;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O-SJhCo1Ed65BMwZ7dmx2w" parameter="_O-SwkCo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O-SwkCo1Ed65BMwZ7dmx2w" parameteredElement="_O-SwkSo1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O-SwkSo1Ed65BMwZ7dmx2w" name="T" templateParameter="_O-SwkCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="LIST_GLIST_generalization" general="LIST"/>
      <ownedOperation xmi:id="GLIST-head" name="head" visibility="public">
        <ownedComment xmi:id="_O-VM0io1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O-Y3MCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This is the start-value of the generated list.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O-Ulwio1Ed65BMwZ7dmx2w" type="_O-SwkSo1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-UlxCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-Ulwyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="GLIST-increment" name="increment" visibility="public">
        <ownedComment xmi:id="_O-asZSo1Ed65BMwZ7dmx2w">
          <body> 
The difference between one value and its previous different value.
For example, to generate the sequence (1; 4; 7; 10; 13; ...) the
increment is 3; likewise to generate the sequence (1; 1; 4; 4; 7; 7;
10; 10; 13; 13; ...) the increment is also 3.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O-asYCo1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-asYio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-asYSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="GLIST-period" name="period" visibility="public">
        <ownedComment xmi:id="_O-e90Co1Ed65BMwZ7dmx2w">
          <body> 
If non-NULL, specifies that the sequence alternates, i.e., after this
many increments, the sequence item values roll over to start from the
initial sequence item value. For example, the sequence (1; 2; 3; 1; 2;
3; 1; 2; 3; ...) has period 3; also the sequence (1; 1; 2; 2; 3; 3; 1;
1; 2; 2; 3; 3; ...) has period 3 too.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O-iBICo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The period allows to repeatedly sample the same sample space.  The
&quot;waveform&quot; of this periodic generator is always a &quot;saw&quot;, just like the
x-function of your oscilloscope.&lt;object name=&quot;footnote&quot;>
Note the difference to the . The  is
a generator for a &lt;> not for a
&lt;>.  A sequence of discrete
values from a continuous domain makes not much sense other than in sampling
applications. The &lt;>, however,
can be thought of as a sequence of 
&lt;>, which still is different from a
&lt;>.
          ]&lt;/object>
							&lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O-eWwSo1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-eWwyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-eWwio1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O-eWxCo1Ed65BMwZ7dmx2w" type="INT">
            <body>∞</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="GLIST-denominator" name="denominator" visibility="public">
        <ownedComment xmi:id="_O-j2WCo1Ed65BMwZ7dmx2w">
          <body> 
The the integer by which the index for the sequence is divided,
effectively the number of times the sequence generates the same
sequence item value before incrementing to the next sequence item
value. For example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
3; ...)  the denominator is 3.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O-m5oCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The use of the denominator is to allow multiple generated sequences to
periodically scan a multidimensional space. For example, an (abstract)
TV screen uses 2 such generators for the columns and rows of
pixels. For instance, if there are 200 scan lines and 320 raster
colunmns, the column-generator would have denominator 1 and the
line-generator would have denominator 320.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O-j2Uio1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-j2VCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-j2Uyo1Ed65BMwZ7dmx2w"/>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="_O-j2VSo1Ed65BMwZ7dmx2w" type="INT">
            <body>1</body>
          </defaultValue>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SLIST" name="SLIST">
      <ownedComment xmi:id="_O-3_YCo1Ed65BMwZ7dmx2w">
        <body> 
A sequence of sampled values scaled and translated from a list of
integer values.  Used to specify sampled biosignals.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O-6boCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The item at a certain index () in the list is calculated
by multiplying the item at the same index in the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;digits&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;SLIST&quot;/>&lt;/param>
							&lt;/object> sequence
(
							&lt;sub>
								
							&lt;/sub>) with the &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;scale&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;SLIST&quot;/>&lt;/param>
							&lt;/object> ()
          and then add that value to the &lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;origin&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;SLIST&quot;/>&lt;/param>
							&lt;/object>
(
							&lt;sub>
								
							&lt;/sub> ).
    &lt;/p>
						&lt;blockquote>
							&lt;p>
								
								&lt;sub>
									
								&lt;/sub>
=

								&lt;sub>
									
								&lt;/sub>
+

×

								&lt;sub>
									
								&lt;/sub>
							&lt;/p>
						&lt;/blockquote>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O-7pwSo1Ed65BMwZ7dmx2w">
        <body>
template&lt;QTY T>
type SampledSequence&lt;T> alias SLIST&lt;T> specializes LIST&lt;T> {
  T         origin;
  QTY       scale;
  LIST&lt;INT> digits;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O-tnVCo1Ed65BMwZ7dmx2w" parameter="_O-tnVSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O-tnVSo1Ed65BMwZ7dmx2w" parameteredElement="_O-tnVio1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O-tnVio1Ed65BMwZ7dmx2w" name="T" templateParameter="_O-tnVSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="LIST_SLIST_generalization" general="LIST"/>
      <ownedOperation xmi:id="SLIST-origin" name="origin" visibility="public">
        <ownedComment xmi:id="_O-vchyo1Ed65BMwZ7dmx2w">
          <body> 
The origin of the list item value scale, i.e., the physical quantity
that a zero-digit in the sequence would represent.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O-vcgio1Ed65BMwZ7dmx2w" type="_O-tnVio1Ed65BMwZ7dmx2w" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-vchCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-vcgyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SLIST-scale" name="scale" visibility="public">
        <ownedComment xmi:id="_O-yf1io1Ed65BMwZ7dmx2w">
          <body> 
A ratio-scale quantity that is factored out of the digit sequence.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O-yf0So1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-yf0yo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-yf0io1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="SLIST-digits" name="digits" visibility="public">
        <ownedComment xmi:id="_O-08Fio1Ed65BMwZ7dmx2w">
          <body> 
Ah sequence of raw digits for the sample values. This is typically the
raw output of an A/D converter.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O-08ESo1Ed65BMwZ7dmx2w" type="LISTINT" isOrdered="true" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-08Eyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-08Eio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="BAG" name="BAG">
      <ownedComment xmi:id="_O_S2ISo1Ed65BMwZ7dmx2w">
        <body> 
An unordered collection of values, where each value can be contained
more than once in the collection.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O_WggCo1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type Bag&lt;T> alias BAG&lt;T> specializes ANY {
            INT     contains(T kind);
            BL      isEmpty;
	    BL	    notEmpty;
            BAG&lt;T>  plus(BAG&lt;T> x);
            BAG&lt;T>  minus(BAG&lt;T> x);
  promotion BAG&lt;T>  (T x);
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O-835Co1Ed65BMwZ7dmx2w" parameter="_O-835So1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O-835So1Ed65BMwZ7dmx2w" parameteredElement="_O-835io1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O-835io1Ed65BMwZ7dmx2w" name="T" templateParameter="_O-835So1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="ANY_BAG_generalization" general="ANY"/>
      <ownedOperation xmi:id="BAG-contains" name="contains" visibility="public">
        <ownedComment xmi:id="_O-9e9So1Ed65BMwZ7dmx2w">
          <body>   
The number of items in this bag with the given item value.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_O-_7MCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
This is the primitive semantic property of a bag, based on which all
other properties are defined. 
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O-836So1Ed65BMwZ7dmx2w" type="INT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O-9e8So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O-9e8Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O-9e8io1Ed65BMwZ7dmx2w" name="kind" type="_O-835io1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
      <ownedOperation xmi:id="BAG-isEmpty" name="isEmpty" visibility="public">
        <ownedComment xmi:id="_O_BwZyo1Ed65BMwZ7dmx2w">
          <body>           
A predicate indicating that this bag has no elements (negation of the
&lt;object name=&quot;propertyRef&quot;>
								&lt;param name=&quot;propertyName&quot; value=&quot;notEmpty&quot;/>&lt;/param>
								&lt;param name=&quot;datatypeName&quot; value=&quot;BAG&quot;/>&lt;/param>
							&lt;/object> predicate. The empty bag is a
proper set value, &lt;code>not&lt;/code> an exceptional (NULL) value.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_BwYio1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_BwZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_BwYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="BAG-notEmpty" name="notEmpty" visibility="public">
        <ownedComment xmi:id="_O_Eztio1Ed65BMwZ7dmx2w">
          <body>  
A predicate indicating that this bag contains item.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_EzsSo1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_Ezsyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_Ezsio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="BAG-plus" name="plus" visibility="public">
        <ownedComment xmi:id="_O_H3Cio1Ed65BMwZ7dmx2w">
          <body>           
A bag that contains all items of the operand bags, i.e. the number of
items of each item value are added.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_H3BCo1Ed65BMwZ7dmx2w" type="BAGT" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_H3Bio1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_H3BSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O_H3Byo1Ed65BMwZ7dmx2w" name="x" type="BAGT"/>
      </ownedOperation>
      <ownedOperation xmi:id="BAG-minus" name="minus" visibility="public">
        <ownedComment xmi:id="_O_K6VSo1Ed65BMwZ7dmx2w">
          <body>           
A bags that contains all items of this bag (minuend) diminished by the
items in the other bag (subtrahend). Bags cannot carry deficits. When
the subtrahend contains more items of one value than the minuend, the
difference contais zero items of that value.
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_KTQSo1Ed65BMwZ7dmx2w" type="BAGT" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_K6USo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_K6UCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O_K6Uio1Ed65BMwZ7dmx2w" name="x" type="BAGT"/>
      </ownedOperation>
      <ownedOperation xmi:id="BAG-promotion" name="promotion" visibility="public">
        <ownedComment xmi:id="_O_NWlyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O_RA8Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A data value of type T can be promoted into a trivial bag of type T
with that data value as its only item.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O_NWkSo1Ed65BMwZ7dmx2w" type="BAGT" isUnique="false" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_NWkyo1Ed65BMwZ7dmx2w" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_NWkio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_O_NWlCo1Ed65BMwZ7dmx2w" name="x" type="_O-835io1Ed65BMwZ7dmx2w"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="BAGT" name="BAG&lt;T>">
      <templateBinding xmi:id="BAGT-_templateBinding.0" signature="_O-835Co1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_H3Aio1Ed65BMwZ7dmx2w" formal="_O-835So1Ed65BMwZ7dmx2w" actual="_O-835io1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="IVLPQ" name="IVL&lt;PQ>">
      <ownedComment xmi:id="_O_Zj1Co1Ed65BMwZ7dmx2w">
        <body> 
A set of consecutive values of physical quantities.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O_dOMCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
An interval of physical quantities is constructed from the generic
interval type. However, recognizing that the unit can be factored from
the boundaries, we add additional semantics and a separate literal
form. The additional view of an interval of physical quantities is an
interval of real numbers with one unit.
      &lt;/p>
						&lt;p>
The unit applies to both low and high boundary.
      &lt;/p>
						&lt;p>
The special literal form is simply an interval of real numbers a space
and the unit.
      &lt;/p>
						&lt;p>
For example: &quot;[0;5] mmol/L&quot; or &quot;&lt;20 mg/dL&quot; are valid literal forms
of intervals of physical quantities. The generic interval form, e.g.,
&quot;[50 nm; 2 m]&quot; is also allowed.
      &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O_fDYSo1Ed65BMwZ7dmx2w">
        <body>
type Interval&lt;PhysicalQuantity> alias IVL&lt;PQ> specializes IVL&lt;T> {
  IVL&lt;REAL> value;
  CS  unit;
};
      </body>
      </ownedComment>
      <templateBinding xmi:id="_O_YVtCo1Ed65BMwZ7dmx2w" signature="_Ot6LNSo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_YVtSo1Ed65BMwZ7dmx2w" formal="_Ot6LNio1Ed65BMwZ7dmx2w" actual="PQ"/>
      </templateBinding>
      <ownedOperation xmi:id="IVLPQ-value" name="value" visibility="public">
        <ownedParameter xmi:id="_O_Y8xCo1Ed65BMwZ7dmx2w" type="IVLREAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_Y8xio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_Y8xSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="IVLPQ-unit" name="unit" visibility="public">
        <ownedParameter xmi:id="_O_Y8yio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_Zj0So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_Zj0Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="IVLREAL" name="IVL&lt;REAL>">
      <templateBinding xmi:id="IVLREAL-_templateBinding.0" signature="_Ot6LNSo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_Y8wio1Ed65BMwZ7dmx2w" formal="_Ot6LNio1Ed65BMwZ7dmx2w" actual="REAL"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="HXIT" name="HXIT" visibility="protected">
      <ownedComment xmi:id="_O_lKACo1Ed65BMwZ7dmx2w">
        <body> 
A generic data type extension that tags a time range to any data value
of any data type.  The time range is the time in which the information
represented by the value is (was) valid.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_O_o0YCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
If the base type T does not possess a validTime property, the
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
							&lt;/object> adds that property to the base type. If, however,
the base type T does have a valid time property (currently only EN),
that property is mapped to the valid time property of the
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
							&lt;/object>.&lt;object name=&quot;footnote&quot;>
Note that data types are specifications of abstract properties of
values. This specification does not mandate how these values are
represented in an ITS or implemented in an application. Specifically,
it does not mandate how the represented components are named or
positioned. In addition, the semantic generalization hierarchy may be
different from a class hierarchy chosen for implementation (if the
implementation technology has inheritance.)  Keep the distinction
between a type (interface) and an implementation (concrete data
structure, class) in mind. The ITS must contain a mapping of ITS
defined features of any data type to the semantic properties defined
here.&lt;/object>
						&lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_O_qpkSo1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
protected type HistoryItem&lt;T> alias HXIT&lt;T> specializes T {
    IVL&lt;TS> validTime;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O_g4lCo1Ed65BMwZ7dmx2w" parameter="_O_g4lSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O_g4lSo1Ed65BMwZ7dmx2w" parameteredElement="_O_g4lio1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O_g4lio1Ed65BMwZ7dmx2w" name="T" templateParameter="_O_g4lSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="_O_g4lio1Ed65BMwZ7dmx2w_HXIT_generalization" general="_O_g4lio1Ed65BMwZ7dmx2w"/>
      <ownedOperation xmi:id="HXIT-validTime" name="validTime" visibility="public">
        <ownedComment xmi:id="_O_hfpyo1Ed65BMwZ7dmx2w">
          <body> 
The time interval during which the given information was, is, or is
expected to be valid. The interval can be open or closed infinite or
undefined on either side.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_hfoio1Ed65BMwZ7dmx2w" type="IVLTS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_hfpCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_hfoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="HIST" name="HIST">
      <ownedComment xmi:id="_O_-LkSo1Ed65BMwZ7dmx2w">
        <body> 
A set of data values that have a a valid-time property and thus
conform to the history item (HXIT) type. The history information is
not limited to the past; expected future values can also appear.
      </body>
      </ownedComment>
      <ownedComment xmi:id="_PABO4Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The intent of the HIST data type is to capture the true historical
(and future) values of an item, rather than the audit trail of
values any given system has held for the item
      &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PACdASo1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type History&lt;T> alias HIST&lt;T> specializes SET&lt;HXIT&lt;T>> {
             HXIT&lt;T>   earliest;
             HIST&lt;T>      exceptEarliest;
             HXIT&lt;T>   latest;
             HIST&lt;T>      exceptLatest;
  demotion   HXIT&lt;T>;
};
      </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_O_sexCo1Ed65BMwZ7dmx2w" parameter="_O_sexSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_O_sexSo1Ed65BMwZ7dmx2w" parameteredElement="_O_sexio1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_O_sexio1Ed65BMwZ7dmx2w" name="T" templateParameter="_O_sexSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="SETHXIT_HIST_generalization" general="SETHXIT"/>
      <ownedOperation xmi:id="HIST-earliest" name="earliest" visibility="public">
        <ownedComment xmi:id="_O_ts6Co1Ed65BMwZ7dmx2w">
          <body> 
The item in the set whose valid time's low boundary (validity start
time) is less or equal (i.e. before) that of any other history item in
the set.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_ts4yo1Ed65BMwZ7dmx2w" type="HXITT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_ts5So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_ts5Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="HIST-exceptEarliest" name="exceptEarliest" visibility="public">
        <ownedComment xmi:id="_O_x-WCo1Ed65BMwZ7dmx2w">
          <body> 	  
The derived history that has the earliest item excluded.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_x-Uyo1Ed65BMwZ7dmx2w" type="HISTT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_x-VSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_x-VCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="HIST-latest" name="latest" visibility="public">
        <ownedComment xmi:id="_O_1Boyo1Ed65BMwZ7dmx2w">
          <body> 
The item in the set whose valid time's high boundary (validity end
time) is greater or equal (i.e. after) that of any other history item
in the set.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_0akSo1Ed65BMwZ7dmx2w" type="HXITT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_1BoCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_0akio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="HIST-exceptLatest" name="exceptLatest" visibility="public">
        <ownedComment xmi:id="_O_4E9Co1Ed65BMwZ7dmx2w">
          <body> 	  
The derived history that has the latest item excluded.
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_O_3d4So1Ed65BMwZ7dmx2w" type="HISTT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_4E8So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_4E8Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="HIST-demotion" name="demotion" visibility="public">
        <ownedComment xmi:id="_O_6hNio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_O_89cCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A type conversion between an entire history &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HIST&quot;/>&lt;/param>
								&lt;/object>&lt;T>
and a single history item &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
								&lt;/object>&lt;T>. This conversion
takes the latest data from the history.
        &lt;/p>
							&lt;p>
The purpose of this conversion is to allow an information producer to
produce a history of any value instead of sending just one value. An
information-consumer, who does not expect a history but a simple
value, will convert the history to the latest value.
        &lt;/p>
							&lt;p>
Note from the definition of history item (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
								&lt;/object>) that
&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
								&lt;/object> semantically specializes T. This means, that the
information-consumer expecting a T but given an &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;HXIT&quot;/>&lt;/param>
								&lt;/object>
extension of T will not recognize any difference (substitutability of
specializations.)
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_O_6hMSo1Ed65BMwZ7dmx2w" type="HXITT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_O_6hMyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_O_6hMio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETHXIT" name="SET&lt;HXIT>">
      <templateBinding xmi:id="SETHXIT-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_tF0io1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="HXITT"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="HXITT" name="HXIT&lt;T>">
      <templateBinding xmi:id="HXITT-_templateBinding.0" signature="_O_g4lCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_ts4Co1Ed65BMwZ7dmx2w" formal="_O_g4lSo1Ed65BMwZ7dmx2w" actual="_O_sexio1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="HISTT" name="HIST&lt;T>">
      <templateBinding xmi:id="HISTT-_templateBinding.0" signature="_O_sexCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_O_x-USo1Ed65BMwZ7dmx2w" formal="_O_sexSo1Ed65BMwZ7dmx2w" actual="_O_sexio1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="UVP" name="UVP">
      <ownedComment xmi:id="_PAH8kSo1Ed65BMwZ7dmx2w">
        <body> 
A generic data type extension used to specify a probability expressing
the information producer's belief that the given value holds.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_PAKY0Co1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
How the probability number was arrived at is outside the scope of this
specification.
    &lt;/p>
						&lt;p>
Probabilities are subjective and (as any data value) must be
interpreted in their individual context, for example, when new
information is found the probability might change. Thus, for any
message (document, or other information representation) the
information — and particularly the probabilities — reflect
what the information producer believed was appropriate for the purpose
and at the time the message (document) was created.
    &lt;/p>
						&lt;p>
For example, at the beginning of the 2000 baseball season (May), the
Las Vegas odds makers may have given the New York Yankees a
probability of 1 in 10 (0.100) of winning the World Series. At the
time of this writing, the Yankees and Mets have won their respective
pennants, but the World Series has yet to begin. The probability of
the Yankees winning the World Series is obviously significantly
greater at this point in time, perhaps 6 in 10 (0.600). The context,
and in particular the time of year, made all the difference in the
world.
    &lt;/p>
						&lt;p>
Since probabilities are subjective measures of belief, they can be
stated without being &quot;correct&quot; or &quot;incorrect&quot; per se, let alone
&quot;precise&quot; or &quot;imprecise&quot;. Notably, one does not have to conduct
experiments to measure a frequency of some outcome in order to specify
a probability. In fact, whenever statements about individual people or
events are made, it is not possible to confirm such probabilities with
&quot;frequentists&quot; experiments.
    &lt;/p>
						&lt;p>
Returning to our example, the Las Vegas odds makers can not insist on
the Yankees and Mets playing 1000 trial games prior to the Series;
even if they could, they would not have the fervor of the real Series
and therefore not be accurate. Instead, the odds makers must derive
the probability from past history, player statistics, injuries, etc.
    &lt;/p>
						&lt;p>
The type T is not formally constrained. In theory, discrete
probabilities can only be stated for discrete data values. Thus,
generally &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> should not be used with &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
							&lt;/object>,
&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
							&lt;/object>, or &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;MO&quot;/>&lt;/param>
							&lt;/object> values. 
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PALm8So1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type UncertainValueProbabilistic&lt;T> alias UVP&lt;T> specializes T {
    REAL  probability;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_PADrJCo1Ed65BMwZ7dmx2w" parameter="_PADrJSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_PADrJSo1Ed65BMwZ7dmx2w" parameteredElement="_PADrJio1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_PADrJio1Ed65BMwZ7dmx2w" name="T" templateParameter="_PADrJSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="_PADrJio1Ed65BMwZ7dmx2w_UVP_generalization" general="_PADrJio1Ed65BMwZ7dmx2w"/>
      <ownedOperation xmi:id="UVP-probability" name="probability" visibility="public">
        <ownedComment xmi:id="_PAESNCo1Ed65BMwZ7dmx2w">
          <body> 
The probability assigned to the value, a decimal number between 0
(very uncertain) and 1 (certain).
      </body>
        </ownedComment>
        <ownedComment xmi:id="_PAGucCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
There is no &quot;default probability&quot; that one can assume when the
probability is unstated. Therefore, it is impossible to make any
semantic difference between an &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> of T without probability and
a simple T. &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object> of T does not mean &quot;uncertain&quot;, and a simple T
does not mean &quot;certain&quot;. In fact, the probability of the &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object>
could be 0.999 or 1, which is quite certain, where a simple T value
could be a very vague guess.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PADrKSo1Ed65BMwZ7dmx2w" type="REAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAESMSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAESMCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="NPPD" name="NPPD">
      <ownedComment xmi:id="_PAPRUyo1Ed65BMwZ7dmx2w">
        <body> 
A set of uncertain values with probabilities (also known as
histogram.) All the elements in the set are considered alternatives
and are rated each with its probability expressing the belief (or
frequency) that each given value holds.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_PAS7sCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The purpose of the non-parametric probability distribution is chiefly
to support statistical data reporting as it occurs in measurements
taken from many subjects and consolidated in a histogram. This occurs
in epidemiology, veterinary medicine, laboratory medicine, but also in
cost controlling and business process engineering.
    &lt;/p>
						&lt;p>
Semantically, the information of a stated value exists in contrast to
the complement set of unstated possible values. Thus, semantically, a
non-parametric probability distribution contains &lt;code>all&lt;/code>
possible values and assigns probabilities to each of them.
    &lt;/p>
						&lt;p>
The easiest way to visualize this is a bar chart as shown in
    &lt;/p>
						
						&lt;p>
This example illustrates the probability of selected major league
baseball teams winning the World Series (prior to the season
start). Each team is mutually exclusive, and were we to include all of
the teams, the sum of the probabilities would equal 1 (i.e., it is
certain that one of the teams will win).
    &lt;/p>
						&lt;p>
Just as with &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;UVP&quot;/>&lt;/param>
							&lt;/object>, the type T is not formally
constrained, even though there are reasonable and unreasonable
uses. Typically one would use the &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> for unordered types, if
only a &quot;small&quot; set of possible values is assigned explicit
probabilities, or if the probability distribution cannot (or should
not) be approximated with parametric methods. For other cases, one may
prefer &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
							&lt;/object>.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PAUw4Co1Ed65BMwZ7dmx2w">
        <body>
template&lt;ANY T>
type NonParametricProbabilityDistribution&lt;T> alias NPPD&lt;T>
              specializes SET&lt;UVP&lt;T>> {
    UVP&lt;T> mostLikely(INT n);
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_PANcJCo1Ed65BMwZ7dmx2w" parameter="_PANcJSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_PANcJSo1Ed65BMwZ7dmx2w" parameteredElement="_PANcJio1Ed65BMwZ7dmx2w" constrainingClassifier="ANY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_PANcJio1Ed65BMwZ7dmx2w" name="T" templateParameter="_PANcJSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="SETUVP_NPPD_generalization" general="SETUVP"/>
      <ownedOperation xmi:id="NPPD-mostLikely" name="mostLikely" visibility="public">
        <ownedParameter xmi:id="_PAOqRCo1Ed65BMwZ7dmx2w" type="UVPT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAOqRio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAOqRSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_PAPRUCo1Ed65BMwZ7dmx2w" name="n" type="INT"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="SETUVP" name="SET&lt;UVP>">
      <templateBinding xmi:id="SETUVP-_templateBinding.0" signature="_OtD2pio1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_PAODMio1Ed65BMwZ7dmx2w" formal="_OtD2pyo1Ed65BMwZ7dmx2w" actual="UVPT"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="UVPT" name="UVP&lt;T>">
      <templateBinding xmi:id="UVPT-_templateBinding.0" signature="_PADrJCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_PAOqQSo1Ed65BMwZ7dmx2w" formal="_PADrJSo1Ed65BMwZ7dmx2w" actual="_PANcJio1Ed65BMwZ7dmx2w"/>
      </templateBinding>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PIVL" name="PIVL">
      <ownedComment xmi:id="_PA1uQSo1Ed65BMwZ7dmx2w">
        <body> 
An interval of time that recurs periodically. Periodic intervals have
two properties, phase and period. The phase specifies the &quot;interval
prototype&quot; that is repeated every period.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_PA5YoCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
For example, &quot;every eight hours for two minutes&quot; is a periodic
interval where the interval's width equals 2 minutes and the period
at which the interval recurs equals 8 hours.
    &lt;/p>
						&lt;p>
The phase also marks the anchor point in time for the entire series of
periodically recurring intervals. The recurrence of a periodic interval has no
beginning or ending, but is infinite in both future and past.
    &lt;/p>
						&lt;p>
A periodic interval is fully specified when both the period and the
phase are fully specified. The interval may be only partially
specified where either only the width or only one boundary is
specified.
    &lt;/p>
						&lt;p>
For example: &quot;every eight hours for two minutes&quot; specifies only the
period and the phase's width but no boundary of the phase. Conversely,
&quot;every eight hours starting at 4 o'clock&quot; specifies only the period
and the phase's low boundary but not the phase's high boundary. &quot;Every
eight hours for two minutes starting at 4 o'clock&quot; is fully specified
since the period, and both the phase's low boundary and width are
specified (low boundary and width implies the high boundary.)
    &lt;/p>
						&lt;p>
The periodic interval of time is a generic type extension whose type
parameter T is restricted to the point in time (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
							&lt;/object>)
data type and its extensions. The parametric probability distribution
of point in time (&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
							&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
							&lt;/object>>) is
an extension of point in time and therefore can be used to form
periodic intervals of probability distributions of point in time
(&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PIVL&quot;/>&lt;/param>
							&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
							&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
							&lt;/object>>>) values (uncertain periodic interval.)
    &lt;/p>
						&lt;p>
Oftentimes repeating schedules are only approximately specified. For
instance &quot;three times a day for ten minutes each&quot; does not usually
mean a period of precisely 8 hours and does often not mean exactly 10
minutes intervals. Rather the distance between each occurrence may
vary as much as between 3 and 12 hours and the width of the interval
may be less than 5 minutes or more than 15 minutes. An uncertain
periodic interval can be used to indicate how much leeway is allowed
or how &quot;timing-critical&quot; the specification is.
    &lt;/p>
						&lt;div title=&quot; Periodic Intervals as Sets &quot; >
The essential property of a set is that it contains elements. For
non-aligned periodic intervals, the contains-property is
defined as follows. A point in time t is contained in the
periodic interval of time if and only if there is an integer
i for which t plus the period times
i is an element of the phase interval.
      
invariant (PIVL&lt;TS> x, TS t)
    where x.nonNull.and(x.alignment.isNull) {
  x.contains(t).equal(exists(INT i) {
       x.phase.contains(t.plus(x.period.times(i)));
     });
};
      
For calendar-aligned periodic intervals the contains
property is defined using the calendar-cycle's sum(t,
n) property that adds n such calendar cycles
to the time t.
      
invariant (PIVL&lt;TS> x, TS t, CalendarCycle c)
    where x.nonNull.and(c.equal(x.alignment)) {
  x.contains(t).equal(exists(INT i) {
        x.phase.contains(c.sum(t, i));
     });
};
      &lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PA7N0So1Ed65BMwZ7dmx2w">
        <body>
template&lt;TS T>
type PeriodicIntervalOfTime&lt;T> alias PIVL&lt;T> specializes SET&lt;T> {
            IVL&lt;T>  phase;
            PQ      period;
            CS      alignment;
            BL      institutionSpecifiedTime;
  literal   ST;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_PAWmFCo1Ed65BMwZ7dmx2w" parameter="_PAWmFSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_PAWmFSo1Ed65BMwZ7dmx2w" parameteredElement="_PAWmFio1Ed65BMwZ7dmx2w" constrainingClassifier="TS">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_PAWmFio1Ed65BMwZ7dmx2w" name="T" templateParameter="_PAWmFSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="SET_PIVL_generalization" general="SET"/>
      <ownedOperation xmi:id="PIVL-phase" name="phase" visibility="public">
        <ownedComment xmi:id="_PAXNJSo1Ed65BMwZ7dmx2w">
          <body> 
A prototype of the repeating interval, specifying the duration of
each occurrence and anchors the periodic interval sequence at a
certain point in time.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_PAa3gCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The phase also marks the anchor point in time for the entire series of
periodically recurring intervals. The recurrence of a periodic
interval has no begin or end but is infinite in both future and
past. The width of the phase must be less or equal the period.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PAXNICo1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAXNIio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAXNISo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PIVL-period" name="period" visibility="public">
        <ownedComment xmi:id="_PAcstyo1Ed65BMwZ7dmx2w">
          <body> 
A time duration specifying as a reciprocal measure of the frequency at
which the periodic interval repeats.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_PAgXECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The period is a physical quantity in the dimension of time (TS.diffType.)
For an uncertain periodic interval the period is a probability
distribution over elapsed time.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PAcssio1Ed65BMwZ7dmx2w" type="PQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAcstCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAcssyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PIVL-alignment" name="alignment" visibility="public">
        <ownedComment xmi:id="_PAiMRyo1Ed65BMwZ7dmx2w">
          <body> 
Specifies if and how the repetitions are aligned to the cycles 
of the underlying calendar (e.g., to distinguish every 30 days
from &quot;the 5th of every month&quot;.) A non-aligned periodic interval recurs
independently from the calendar. An aligned periodic interval is
synchronized with the calendar.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_PAmdsCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example, &quot;every 5th of the month&quot; is a calendar aligned periodic
interval. The period spans 28 to 31 days depending on the calendar
month. Conversely, &quot;every 30 days&quot; is an independent period that will
fall on a different date each month.
        &lt;/p>
							&lt;p>
The calendar alignment specifies a calendar cycle to which the
periodic interval is aligned. The even flow of time will then be
partitioned by the calendar cycle. The partitioning is called the
calendar &quot;grid&quot; generated by the aligned-to calendar cycle. The
boundaries of each occurrence interval will then have equal distance
from the earliest point in each partition. In other words, the
distance from the next lower grid-line to the beginning of the
interval is constant.
        &lt;/p>
							&lt;p>
For example, with “every 5th of the month” the alignment
calendar cycle would be month of the year (&lt;code>MY&lt;/code>).  The even
flow of time is partitioned in months of the year. The distance
between the beginning of each month and the beginning of its
occurrence interval is 4 days (4 days because day of month (DM) starts
counting with 1.)  Thus, as months differ in their number of days, the
distances between the recurring intervals will vary slightly, so that
the interval occurs always on the 5th.
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PAiMQio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAiMRCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAiMQyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PIVL-institutionSpecifiedTime" name="institutionSpecifiedTime" visibility="public">
        <ownedComment xmi:id="_PAoS5Co1Ed65BMwZ7dmx2w">
          <body> 
Indicates whether the exact timing is up to the party executing the
schedule (e.g., to distinguish &quot;every 8 hours&quot; from &quot;3 times a day&quot;.)
      </body>
        </ownedComment>
        <ownedComment xmi:id="_PAr9QCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example, with a schedule &quot;three times a day&quot; the average time
between repetitions is 8 hours, however, with institution specified
time indicator &lt;code>true&lt;/code>, the timing could follow some rule
made by the executing person or organization (&quot;institution&quot;), that,
e.g., three times a day schedules are executed at 7 am, noon, and 7
pm.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PAnr0io1Ed65BMwZ7dmx2w" type="BL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAoS4So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAoS4Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PIVL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_PAtydyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_PAyD4Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
								&lt;code>Generic Literal Form&lt;/code>. The generic 
literal form for periodic intervals of time is as follows:
      &lt;/p>
							&lt;p>
(&lt;code>phase&lt;/code> : IVL&lt;T>( &lt;code>/&lt;/code>
(&lt;code>period&lt;/code> : QTY  ( [ &lt;code>@&lt;/code>
(&lt;code>alignment&lt;/code>( ] [ &lt;code>IST&lt;/code> ].
      &lt;/p>
							&lt;p>
For example, &quot;&lt;code>[200004181100;200004181110]/(7 d)@DW&lt;/code>&quot;
specifies every Tuesday from 11:00 to 11:10 AM. Conversely,
&quot;&lt;code>[200004181100;200004181110]/(1 mo)@DM&lt;/code>&quot; specifies every
18th of the month 11:00 to 11:10 AM.
      &lt;/p>
							&lt;p>
See &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object> for calendar-period codes
defined for the Gregorian calendar. There are 1-character and
2-character symbols. The 2-character symbols are preferred for the
alignment period identifier.
      &lt;/p>
							&lt;p>
								&lt;code>Calendar Pattern Form&lt;/code>. This form is
used to specify calendar-aligned timing more intuitively using &quot;calendar
patterns.&quot;  The calendar pattern syntax is (semi-formally) defined as
follows:
      &lt;/p>
							&lt;p>
(&lt;code>anchor&lt;/code>( [ (&lt;code>calendar digits&lt;/code>(
 [ &lt;code>..&lt;/code> (&lt;code>calendar digits&lt;/code>( ]]
&lt;code>/&lt;/code> (&lt;code>number&lt;/code>
 : INT( [ &lt;code>IST&lt;/code> ]
      &lt;/p>
							&lt;p>
A calendar pattern is a calendar date where the higher significant
digits (e.g., year and month) are omitted. In order to interpret the
digits, a period identifier is prefixed that identifies the calendar
period of the left-most digits. This calendar period identifier
&lt;code>anchors&lt;/code> the calendar digits following to the right.
      &lt;/p>
							&lt;p>
See &lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;CalendarCycle&quot;/>&lt;/param>
								&lt;/object> for calendar-period codes
defined for the Gregorian calendar. There are 1-character and
2-character symbols. The 1-character symbols are preferred for the
calendar pattern anchor.
      &lt;/p>
							&lt;p>
For example: &quot;&lt;code>M0219&lt;/code>&quot; is February 19 the entire day every
year. This periodic interval has the February 19 of any year as its
phase (e.g., &quot;&lt;code>[19690219;19690220[&lt;/code>&quot; ), a period of one
year, and alignment month of the year (M). The alignment
calendar-cycle is the same as the anchor (e.g., in this example, month
of the year.)
      &lt;/p>
							&lt;p>
The calendar digits may also omit digits on the right. When digits are
omitted on the right, this means the interval from lowest to highest
for these digits. For example, &quot;&lt;code>M0219&lt;/code>&quot; is February 19 the
entire day; &quot;&lt;code>M021918&lt;/code>&quot; is February 19, the entire hour
between 6 and 7 PM.
      &lt;/p>
							&lt;p>
In absence of a formal definition for this, the rules for parsing a
calendar pattern are as follows (example is &quot;&lt;code>M021918..21&lt;/code>&quot;)
      &lt;/p>
							&lt;ol>&lt;li>
									&lt;p>
Read the anchoring period identifier (e.g. &quot;&lt;code>M&lt;/code>&quot;)
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
the PIVL's alignment is equal to this calendar period (e.g. month of
the year)
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
use the current point in time and format a literal exact to the next
higher significant calendar period from the anchoring calendar period
(e.g. year, &quot;&lt;code>2000&lt;/code>&quot;, constructing
&quot;&lt;code>2000021918&lt;/code>&quot;); this is the &quot;stem literal&quot;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Read this constructed literal (e.g., &quot;&lt;code>2000021918&lt;/code>&quot;) into a
&lt;object name=&quot;datatypeRef&quot;>
											&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
										&lt;/object> value and convert that value to an interval
according to &lt;object name=&quot;propertyRef&quot;>
											&lt;param name=&quot;propertyName&quot; value=&quot;promotionTS&quot;/>&lt;/param>
											&lt;param name=&quot;datatypeName&quot; value=&quot;IVL_TS&quot;/>&lt;/param>
										&lt;/object> (e.g.,
&quot;[2000021918;2000021919[&quot;) this is the &quot;low interval.&quot;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
If the hull-operator token &quot;..&quot; follows, read the following calendar
digits (e.g., &quot;21&quot;)
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Right-align the stem literal and the calendar digits just read
								&lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
and copy all digits from the stem literal that are missing to the left
of the calendar digits just read (e.g., yields &quot;&lt;code>2000021921&lt;/code>&quot;.)
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
Read this constructed literal (e.g., &quot;&lt;code>2000021918&lt;/code>&quot;) into a
&lt;object name=&quot;datatypeRef&quot;>
											&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
										&lt;/object> value and convert that value to an &lt;object name=&quot;datatypeRef&quot;>
											&lt;param name=&quot;datatypeName&quot; value=&quot;IVL&quot;/>&lt;/param>
										&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
											&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
										&lt;/object>> according to &lt;object name=&quot;propertyRef&quot;>
											&lt;param name=&quot;propertyName&quot; value=&quot;promotionTS&quot;/>&lt;/param>
											&lt;param name=&quot;datatypeName&quot; value=&quot;IVL_TS&quot;/>&lt;/param>
										&lt;/object>
(e.g., &quot;&lt;code>[2000021921;2000021922[&lt;/code>&quot;) this is the &quot;high interval.&quot;
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
The phase interval is the convex hull of the low interval and the high
interval (e.g., &quot;&lt;code>[2000021918;2000021922[&lt;/code>&quot;).
          &lt;/p>
								&lt;/li>&lt;li>
									&lt;p>
If the hull-operator was not present, the phase is simply the low interval.
          &lt;/p>
								&lt;/li>&lt;/ol>
							&lt;p>
								&lt;code>Interleave.&lt;/code> A calendar pattern
followed by a slash and an integer number &lt;code>n&lt;/code> indicates that the
given calendar pattern is to apply every nth time.
      &lt;/p>
							&lt;p>
For example: &quot;&lt;code>D19/2&lt;/code>&quot; is the 19th of every second month.
      &lt;/p>
							&lt;p>
A calendar pattern expression is evaluated at the time the pattern is
first enacted. At this time, the calendar digits missing from the left
are completed using the earliest date matching the pattern (and
following a preceding pattern in a combination of time sets).
      &lt;/p>
							&lt;p>
For example: &quot;&lt;code>D19/2&lt;/code>&quot; is the 19th of every second
month. If this expression is evaluated on March 14, 2000 the phase is
completed to: &quot;&lt;code>[20000319;20000320[/(2 mo)@DM&lt;/code>&quot; and thus
the two-months cycle begins with March 19, followed by May 19, etc. If
the expression were evaluated by March 20, the cycle would begin at
April 19, followed by June 19, etc.
      &lt;/p>
							&lt;p>
If no calendar digits follow after the calendar period identifier, the
pattern matches any date. The integer number following the slash
indicates the length of the cycle. The phase interval in these cases
has only the width specified to be the duration of the anchoring
calendar-cycle (e.g., in this example 1 day.)
      &lt;/p>
							&lt;p>
For example: &quot;&lt;code>CD/2&lt;/code>&quot; is every other day,
&quot;&lt;code>H/8&lt;/code>&quot; is every 8th hour, for the duration of one hour.
      &lt;/p>
							&lt;p>
								&lt;code>Institution Specified Time.&lt;/code> Both a 
generic periodic interval literal and a calendar pattern may be followed by
the three letters &quot;IST&quot; to indicate that within the larger calendar
cycle (e.g., for &quot;hour of the day&quot; the larger calendar cycle is &quot;day&quot;)
the repeating events are to be appointed at institution specified
times. This is used to specify such schedules as &quot;three times a day&quot;
where the periods between two subsequent events may vary well between
4 hours (between breakfast and lunch) and 10 hours (over night.)
      &lt;/p>
							&lt;tablewidth=&quot;90%&quot; hl7id=&quot;examples-PIVL.literal&quot; style=&quot;Requirement&quot;  >&lt;caption>Examples for literal expressions for periodic intervals 
              of time&lt;/caption>&lt;thead>&lt;tr>&lt;th>Generic Form&lt;/th>&lt;th>Calendar Pattern Form&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>&lt;/thead>&lt;tbody>&lt;tr>&lt;td>[198709;198710[/(1 a)@MY&lt;/td>&lt;td>M09&lt;/td>&lt;td>September, the entire month, every year (note that in 
                  the year 1987 in the generic form is irrelevant since the
                  periodic interval recurs every year past and future.)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870915;19870916[/(1 a)@DM&lt;/td>&lt;td>M0915&lt;/td>&lt;td>September 15, the entire day, every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1987091516;1987091517[/(1 a)@DM&lt;/td>&lt;td>M091516&lt;/td>&lt;td>September 15 at 4 PM, the entire hour, every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[198709151630;198709151710]/(1 a)@DM&lt;/td>&lt;td>M09151630..1710&lt;/td>&lt;td>September 15 at 4:30 5:10 PM, every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1987091516;[/(1 a)@DM&lt;/td>&lt;td> &lt;/td>&lt;td>September 15 at 4 PM, end time explicitly unknown, every 
                  year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[198709151630;198709151631[/(1 a)@DM&lt;/td>&lt;td>M09151630&lt;/td>&lt;td>September 15 at 4:30 PM, the entire minute, every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1987091516;1987091517[/(1 mo)@DM&lt;/td>&lt;td>D1516..17&lt;/td>&lt;td>every 15th day of the month at 4 to 5 PM&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1987091516;1987091517[/(1 mo)&lt;/td>&lt;td> &lt;/td>&lt;td>September 15, 1987 from 4 to 5 PM and then every 730.5 
                  hours continuously (this example has little practical value 
                  beyond comparing the unaligned with the aligned form in the 
                  preceding row.)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1987091516;1987091517[/(1 mo)@HD&lt;/td>&lt;td> &lt;/td>&lt;td>September 15, 1987 from 4 to 5 PM and then every 30.4375
                  days, but aligned to the hour of the day.&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1 mo]/(2 mo)@MY&lt;/td>&lt;td>M/2&lt;/td>&lt;td>every other month of the year; (Jan, Mar, ...) vs. (Feb, 
                  Apr, ...) is undefined&lt;/td>&lt;/tr>&lt;tr>&lt;td>[198701;197502[/(2 mo)@MY&lt;/td>&lt;td>M01..12/2&lt;/td>&lt;td>every other month of the year, Jan, Mar, ...&lt;/td>&lt;/tr>&lt;tr>&lt;td>[198702;197503[/(2 mo)@MY&lt;/td>&lt;td>M02..12/2&lt;/td>&lt;td>every other month of the year, Feb, Apr, ...&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870401;19870930[/(1 a)@DM&lt;/td>&lt;td>M04..09&lt;/td>&lt;td>April 1until (and including) September 30&lt;/td>&lt;/tr>&lt;tr>&lt;td>19870401-0930/(1 a)@DM&lt;/td>&lt;td>M0401..0930&lt;/td>&lt;td>April 1 to September 30 (the generic form uses the 
                  dash-form for the phase interval)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[20001202;20001203[/(1 wk)@DW&lt;/td>&lt;td>J6&lt;/td>&lt;td>every Saturday&lt;/td>&lt;/tr>&lt;tr>&lt;td>[20001202;20001203[/(2 wk)@DW&lt;/td>&lt;td>J6/2&lt;/td>&lt;td>every other Saturday&lt;/td>&lt;/tr>&lt;tr>&lt;td>[20001202;20001203[/(3 wk)@DW&lt;/td>&lt;td>J6/3&lt;/td>&lt;td>every third Saturday&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1 d]/(2 d)@DW&lt;/td>&lt;td>J/2&lt;/td>&lt;td>every other day of the week; (Mon, Wed, Fri, ...) vs. 
                  (Tue, Thu, Sat, ...)  is undefined&lt;/td>&lt;/tr>&lt;tr>&lt;td>[20001204;20001205[/(2 d)@DW&lt;/td>&lt;td>J2..6/2&lt;/td>&lt;td>every other day of the week (Tue, Thu, Sat, Tue, Thu, 
                  Sat, ...)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[20001204;20001205[/(2 d)&lt;/td>&lt;td>D/2&lt;/td>&lt;td>every other day (Tue, Thu, Sat, Mon, Wed, Fri, Sun, 
                  Tue, ...)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870601;19870606[/(1 wk)@DW&lt;/td>&lt;td>J1..5&lt;/td>&lt;td>Monday to Friday every week&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870601;19870608[/(2 wk)&lt;/td>&lt;td>W/2&lt;/td>&lt;td>every other week (continuous)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870101;19870105[/(2 wk)@WY&lt;/td>&lt;td>WY/2&lt;/td>&lt;td>every other week of the year (a blunt example on the 
                  impact of the calendar alignment: the phase interval spans 
                  only 4 days and yet it represents an entire week in the 
                  calendar alignment &quot;week of the year&quot;.)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870406;19870413[/(1 a)@WY&lt;/td>&lt;td>WY15&lt;/td>&lt;td>the 15th calendar week of every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870105;19870112[/(1 mo)@WM&lt;/td>&lt;td>WM2&lt;/td>&lt;td>the second week of the month, every month&lt;/td>&lt;/tr>&lt;tr>&lt;td>[19870508;19870509[/(1 a)@DY&lt;/td>&lt;td>DY128&lt;/td>&lt;td>the 128th day of the year, every year&lt;/td>&lt;/tr>&lt;tr>&lt;td>[10 min]/(2 d)&lt;/td>&lt;td> &lt;/td>&lt;td>every other day for 10 minutes (only width of repeating 
                  interval is known)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1 h]/(8 h)&lt;/td>&lt;td>H/8&lt;/td>&lt;td>every eighth hour (each time a 60 minutes interval)&lt;/td>&lt;/tr>&lt;tr>&lt;td>[1 h]/(8 h) IST&lt;/td>&lt;td>H/8 IST&lt;/td>&lt;td>three times a day at institution specified times (each 
                  time a 60 minutes interval)&lt;/td>&lt;/tr>&lt;tr>&lt;td>/(8 h) IST&lt;/td>&lt;td> &lt;/td>&lt;td>three times a day at institution specified times. 
                  Nothing about the repeating interval is known i.e., this 
                  includes only a period (frequency), while the phase is left 
                  undefined&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_PAz5ESo1Ed65BMwZ7dmx2w">
          <body>
PIVL&lt;T>.literal ST {
  PIVL&lt;T>
  : S2                     { $.equal($1); }
  | S2 &quot;IST&quot;               { $.phase.equal($1.phase);
                             $.period.equal($1.period);
                             $.institutionSpecified.equal(true); };
  PIVL&lt;T> S2
  : S1                     { $.equal($1); }
  | S1 &quot;@&quot; &quot;(&quot; ST &quot;)&quot;      { $.phase.equal($1.phase);
                             $.period.equal($1.period);
                             $.alignment.equal($4); };
  PIVL&lt;T> S1
  : IVL&lt;T> &quot;/&quot; &quot;(&quot; QTY &quot;)&quot; { $.phase.equal($1);
                                $.period.equal($3); }
  |        &quot;/&quot; &quot;(&quot; QTY &quot;)&quot; { $.period.equal($2); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_PAtycio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PAtydCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PAtycyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="EIVL" name="EIVL">
      <ownedComment xmi:id="_PBUPYSo1Ed65BMwZ7dmx2w">
        <body> 
Specifies a periodic interval of time where the recurrence is based on
activities of daily living or other important events that are
time-related but not fully determined by time.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_PBX5wCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
For example, &quot;one hour after breakfast&quot; specifies the beginning of the
interval at one hour after breakfast is finished. Breakfast is assumed
to occur before lunch but is not determined to occur at any specific
time.
    &lt;/p>
						&lt;div title=&quot; Resolving the Event-Relatedness &quot; >
An event-related periodic interval of time is a set of time, that is,
one can test whether a particular time or time interval is an element
of the set. Whether an event-related periodic interval of time
contains a given interval of time is decided using a relation event
χ time referred to as EVENT(event,
time). The property occurrenceAt(t) is the
occurrence interval that would exist if the event occurred at time
t.
      
invariant(EIVL&lt;T> x, T eventTime, IVL&lt;T> v)
     where v.equal(x.occurrenceAt(eventTime)) {
  v.low.equal(eventTime.plus(x.offset.low));
  v.high.equal(eventTime.plus(x.offset.high));
  v.lowClosed.equal(x.offset.lowClosed);
  v.highClosed.equal(x.offset.highClosed);
};
      
Thus, an event related interval of time contains a point in time
t if there is an event time e with an
occurrence interval v such that v contains
t.
      
invariant(EIVL&lt;T> x, T y) {
  x.contains(y).equal(exists(T e, IVL&lt;T> v)
                           where EVENT(x.event, y)
                            .and(v.resolvedAt(y)) {
                         v.contains(y);
                       });
};
      &lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PBZu8So1Ed65BMwZ7dmx2w">
        <body>
template&lt;TS T>
type EventRelatedPeriodicInterval&lt;T> alias EIVL&lt;T>
         specializes SET&lt;T> {
            CS          event;
            IVL&lt;PQ> offset;
            IVL&lt;T>      occurrenceAt(TS eventTime);
  literal   ST;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_PA9DBCo1Ed65BMwZ7dmx2w" parameter="_PA9DBSo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_PA9DBSo1Ed65BMwZ7dmx2w" parameteredElement="_PA9qECo1Ed65BMwZ7dmx2w" constrainingClassifier="TS">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_PA9qECo1Ed65BMwZ7dmx2w" name="T" templateParameter="_PA9DBSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="SET_EIVL_generalization" general="SET"/>
      <ownedOperation xmi:id="EIVL-event" name="event" visibility="public">
        <ownedComment xmi:id="_PA9qGCo1Ed65BMwZ7dmx2w">
          <body> 
A code for a common (periodical) activity of daily living based on
which the event related periodic interval is specified.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_PBBUcCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Such events qualify for being adopted in the domain of this
attribute for which all of the following is true:
        &lt;/p>
							&lt;ul>&lt;li>
									&lt;p>the event commonly occurs on a regular basis,&lt;/p>
								&lt;/li>&lt;li>
									&lt;p>the event is being used for timing activities, and&lt;/p>
								&lt;/li>&lt;li>
									&lt;p>the event is not entirely determined by time.&lt;/p>
								&lt;/li>&lt;/ul>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PA9qEyo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PA9qFSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PA9qFCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="EIVL-offset" name="offset" visibility="public">
        <ownedComment xmi:id="_PBDwsio1Ed65BMwZ7dmx2w">
          <body> 
An interval of elapsed time (duration, not absolute point in time)
that marks the offsets for the beginning, width and end of
the event-related periodic interval measured from the time each such
event actually occurred.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_PBHbECo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
For example: if the specification is &quot;one hour before breakfast for 10
minutes&quot; the offset's low boundary is (1 h and the offset's width is
10 min (consequently the offset's high boundary is (50 min.)
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PBDJoio1Ed65BMwZ7dmx2w" type="IVLPQ" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBDJpCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBDJoyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="EIVL-occurrenceAt" name="occurrenceAt" visibility="public">
        <ownedComment xmi:id="_PBJQRio1Ed65BMwZ7dmx2w">
          <body> 
							The &lt;code>intervalAt&lt;/code>- property maps value &lt;code>x&lt;/code> to
							the greatest continuous subset &lt;code>v&lt;/code> (an &quot;occurrence interval&quot;) of
							the &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> value &lt;code>S&lt;/code>, where &lt;code>v&lt;/code> includes &lt;code>x&lt;/code>.
							If there is no occurrence interval that includes v, intervalAt(x) will be null.
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PBJQQCo1Ed65BMwZ7dmx2w" type="IVLT" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBJQQio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBJQQSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
        <ownedParameter xmi:id="_PBJQQyo1Ed65BMwZ7dmx2w" name="eventTime" type="TS"/>
      </ownedOperation>
      <ownedOperation xmi:id="EIVL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_PBNhsio1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_PBQlACo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The literal form for an event related interval begins with the event
code followed by an optional interval of the time-difference.
      &lt;/p>
							&lt;p>
For example, one hour after meal would be
&quot;&lt;code>PC+[1h;1h]&lt;/code>&quot;. One hour before bedtime for 10 minutes:
&quot;&lt;code>HS-[50min;1h]&lt;/code>&quot;.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_PBSaMSo1Ed65BMwZ7dmx2w">
          <body>
EIVL&lt;TS>.literal ST {
  EIVL&lt;TS> : event    { $.event.equal($1); }
  | event offset      { $.event.equal($1); $.offset.equal($2); };
  CS event : ST       { $.code.equal($1);
                        $.codeSystem.equal(2.16.840.1.113883.5.1019); }
  IVL&lt;PQ> offset
  : &quot;+&quot; IVL&lt;PQ>  { $.equal($2); }
  | &quot;-&quot; IVL&lt;PQ>  { $.low.equal($2.high.negate);
                        $.high.equal($2.low.negate);
                        $.width.equal($2.width);
                        $.lowClosed($2.highClosed);
                        $.highClosed($2.lowClosed); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_PBM6oSo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBM6oyo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBM6oio1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PPD" name="PPD">
      <ownedComment xmi:id="_PBvGISo1Ed65BMwZ7dmx2w">
        <body> 
A generic data type extension specifying uncertainty of quantitative
data using a distribution function and its parameters. Aside from the 
specific parameters of the distribution, a mean (expected value) and 
standard deviation is always given to help maintain a minimum layer
of interoperability if receiving applications cannot deal with a
certain probability distribution.
    </body>
      </ownedComment>
      <ownedComment xmi:id="_PBywgCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
For example, the most common college entrance exam in the United
States is the SAT, which is comprised of two parts: verbal and
math. Each part has a minimum score of 400 (no questions answered
correctly) and a perfect score of 800. In 1998, according to the
College Board, 1,172,779 college-bound seniors took the test. The mean
score for the math portion of the test was 512, and the standard
deviation 112. These parameter values (512, 112), tagged as the normal
distribution parameters, paint a pretty good picture of test score
distribution. In most cases, there is no need to specify all
1-million+ points of data when just 2 parameters will do!
    &lt;/p>
						
						&lt;p>
Note that the normal distribution is only one of several distributions
defined for HL7.
    &lt;/p>
						&lt;p>Since a &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> specializes its parameter type T, a simple T value is
the mean (expected value or first moment) of the probability
distribution. Applications that cannot deal with distributions will
take the simple T value neglecting the uncertainty. That simple value
of type T is also used to standardize the data for computing the
distribution.
    &lt;/p>
						&lt;p>
Probability distributions are defined over integer or real numbers and
normalized to a certain reference point (typically zero) and reference
unit (e.g., standard deviation = 1). When other quantities defined in
this specification are used as base types, the mean and the standard
deviation are used to scale the probability distribution. For example,
if a &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> of PQ for a length is given with mean 20 ft
and a standard deviation of 2 in, the normalized distribution function
() that maps a real number 
to a probability density would be translated to
′(′) that maps a length
′ to a probability density as
′(′) =
((′ - μ ) / σ).
    &lt;/p>
						&lt;p>
Where applicable, the &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
							&lt;/object> specification conforms to
the ISO &lt;code>Guide to the Expression of Uncertainty in
Measurement&lt;/code> (GUM) as reflected by NIST publication 1297
&lt;code>Guidelines for Evaluating and Expressing the Uncertainty of NIST
Measurement Results&lt;/code>. The &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object> specification does not
describe how uncertainty is to be evaluated but only how it is
expressed. The concept of &quot;standard uncertainty&quot; as set forth by the
ISO GUM corresponds to the &quot;standard deviation&quot; property of the &lt;object name=&quot;itemName&quot;>
								&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
							&lt;/object>.
    &lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PB0lsSo1Ed65BMwZ7dmx2w">
        <body>
template&lt;QTY T>
type ParametricProbabilityDistribution&lt;T> alias PPD&lt;T>
                 specializes T {
            QTY     standardDeviation;
            CS      distributionType;
    literal ST;
};
    </body>
      </ownedComment>
      <ownedTemplateSignature xmi:type="uml:RedefinableTemplateSignature" xmi:id="_PBbkJCo1Ed65BMwZ7dmx2w" parameter="_PBcLMCo1Ed65BMwZ7dmx2w">
        <ownedParameter xmi:type="uml:ClassifierTemplateParameter" xmi:id="_PBcLMCo1Ed65BMwZ7dmx2w" parameteredElement="_PBcLMSo1Ed65BMwZ7dmx2w" constrainingClassifier="QTY">
          <ownedParameteredElement xmi:type="uml:Interface" xmi:id="_PBcLMSo1Ed65BMwZ7dmx2w" name="T" templateParameter="_PBcLMCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedTemplateSignature>
      <generalization xmi:id="_PBcLMSo1Ed65BMwZ7dmx2w_PPD_generalization" general="_PBcLMSo1Ed65BMwZ7dmx2w"/>
      <ownedOperation xmi:id="PPD-standardDeviation" name="standardDeviation" visibility="public">
        <ownedComment xmi:id="_PBcLOSo1Ed65BMwZ7dmx2w">
          <body> 
The primary measure of variance/uncertainty of the value (the square
root of the sum of the squares of the differences between all data
points and the mean). The standard deviation is used to normalize the
data for computing the distribution function. Applications that cannot
deal with probability distributions can still get an idea about the
confidence level by looking at the standard deviation.
        </body>
        </ownedComment>
        <ownedComment xmi:id="_PBgcoCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The standard deviation of a probability distribution over a type T is
a specialisation of QTY (from T.diffType) that expresses differences
between values of type T. If T is &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> or &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object>,
T.diffType is also &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> or &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;INT&quot;/>&lt;/param>
								&lt;/object>
respectively. However if T is a point in time (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>),
T.diffType is a physical quantity (&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>) in the dimension
of time.
        &lt;/p>
							&lt;p>
The standard deviation is what ISO GUM calls &quot;standard uncertainty.&quot;
        &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PBcLNCo1Ed65BMwZ7dmx2w" type="QTY" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBcLNio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBcLNSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PPD-distributionType" name="distributionType" visibility="public">
        <ownedComment xmi:id="_PBiR1Co1Ed65BMwZ7dmx2w">
          <body> 
A code specifying the type of probability distribution. Possible
values are as shown in the attached table. The NULL value (unknown)
for the type code indicates that the probability distribution type is
unknown. In that case, the standard deviation has the meaning of an
informal guess.
      </body>
        </ownedComment>
        <ownedComment xmi:id="_PBl8MCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
								&lt;object name=&quot;conceptDomainRef&quot;>
									&lt;param name=&quot;domain&quot; value=&quot;ProbabilityDistributionType&quot;/>&lt;/param>
								&lt;/object> 
lists the defined
probability distributions. Many distribution types are defined in
terms of special parameters (e.g., the parameters α and β
for the γ-distribution, number of degrees of freedom for the
&lt;code>t&lt;/code>-distribution, etc.)  For all distribution types,
however, the mean and standard deviation are defined. 

						&lt;/p>
							&lt;p>
The three distribution-types &lt;code>unknown&lt;/code> (NULL),
&lt;code>uniform&lt;/code> and &lt;code>normal&lt;/code> must be supported by
every system that claims to support &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object>. All other distribution
types are optional. When a system interpreting a &lt;object name=&quot;itemName&quot;>
									&lt;param name=&quot;item&quot; value=&quot;datatype&quot;/>&lt;/param>
								&lt;/object>
representation encounters a distribution type that it does not
recognize, it maps this type to the unknown (NULL) distribution-type.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedParameter xmi:id="_PBhqwio1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBiR0So1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBiR0Co1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PPD-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_PBnxZyo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_PBrbwCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
The parametric probability distribution has a literal form. The
general syntax is as follows:
      &lt;/p>
							&lt;p>
Examples: an example for a &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>>
is &quot;1.23(N0.005)&quot; for a normal distribution of a real
number around 1.23 with a standard deviation of 0.005. An example for
a &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>> is &quot;1.23 m (5 mm)&quot; for
a distribution of unknown type around the length 1.23 meter with a
standard deviation of 5 millimeter. An example for a &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;TS&quot;/>&lt;/param>
								&lt;/object>> is &quot;2000041113(U4 h)&quot; for a
uniform distribution around April 11, 2000 at 1pm with standard
deviation of 4 hours.
      &lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_PBtQ8So1Ed65BMwZ7dmx2w">
          <body>
PPD&lt;T>.literal ST {
  PPD&lt;T> : T &quot;(&quot; type QTY &quot;)&quot;  { ((T)$).equal($1);
                                    $.distributionType.equal($3);
                                    $.standardDeviation.equal($4); };
  CV type : ST     { $.value.equal($1);
                     $.codeSystem.equal(2.16.840.1.113883.5.1020); };
};
      </body>
        </ownedComment>
        <ownedParameter xmi:id="_PBnxYio1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PBnxZCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PBnxYyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PPDREAL" name="PPD&lt;REAL>">
      <ownedComment xmi:id="_PB-WsSo1Ed65BMwZ7dmx2w">
        <body> </body>
      </ownedComment>
      <ownedComment xmi:id="_PCCBECo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The parametric probability distribution of real numbers is fully defined by
the generic data type.
&lt;/p>
						&lt;p>
However, there are some special considerations about literal representations
and conversions of probability distributions over real numbers, which are
specified in this section.
&lt;/p>
						&lt;div title=&quot; Converting a real number (REAL) to an uncertain real number
          (PPD&lt;REAL>) &quot; >
When converting a  into a ,
the standard deviation is calculated from the  value's
order of magnitude and precision (number of significant digits).
Let x be a real number with precision n. We can
determine the order of magnitude e of x as
e = log10 |x| where e is rounded to
the next integer that is closer to zero (special case: if x
is zero, e is zero.)  The value of least significant digit
l is then l = 10e-n
and the standard deviation σ is σ = l /
2.
Examples of standard deviations computed from precision p and order of magnitude eRepresentationxepe - p + 1lσ00(0)1010.51101010.52201010.59901010.5101012010.510010023010.51e+1101111051e+21002121005010e+11002211051.11.102-10.10.0510.110.113-10.10.051.1e+21102211051.1e-20.011-22-30.0010.00051.1e-40.00011-42-50.000010.00000510.1e-40.00101-33-50.000010.0000050.1e-10.01-21-20.010.0050.01e-10.001-31-30.0010.00050.01e-20.0001-41-40.00010.000050.000(0)3-20.010.005&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PCD2QSo1Ed65BMwZ7dmx2w">
        <body>
type ParametricProbabilityDistribution&lt;RealNumber> alias PPD&lt;REAL> specializes PPD&lt;T>;
      </body>
      </ownedComment>
      <templateBinding xmi:id="_PB2a5Co1Ed65BMwZ7dmx2w" signature="_PBbkJCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_PB3B8Co1Ed65BMwZ7dmx2w" formal="_PBcLMCo1Ed65BMwZ7dmx2w" actual="REAL"/>
      </templateBinding>
      <ownedOperation xmi:id="PPDREAL-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_PB3B9yo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_PB6sUCo1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
Besides the generic literal form of the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>, a
concise literal form is defined for &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object> over real
numbers. This concise literal form is defined such that the standard
deviation can be expressed in terms of the least significant digit in
the mantissa. This literal is defined as an extension of the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> literal:
        &lt;/p>
							&lt;p>
Examples: &quot;1.23e-3 (U5e-6)&quot; is the uniform distribution around 1.23
× 10&lt;sup>-3&lt;/sup> with 5 × 10&lt;sup>-6&lt;/sup> standard
deviation in generic literal form. &quot;1.230(U5)e-3&quot; is the same value in
concise literal form.
&lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_PB8hgSo1Ed65BMwZ7dmx2w">
          <body>
PPD&lt;REAL>.literal ST {
  PPD&lt;REAL> mantissa
  : REAL.mantissa &quot;(&quot; type QTY &quot;)&quot; { ((T)$).equal($1);
                                        $.distributionType.equal($3);
                                        $.standardDeviation.equal($4); }
  | REAL.mantissa                     { $.equal($1);
                                        $.distributionType.equal($3);
       $.standardDeviation.equal($1.leastSignificantDigit.times(0.5)); };
  CS type : ST                        { $.value.equal($1);
       $.system.equal(2.16.840.1.113883.5.1019); };
};
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_PB3B8io1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PB3B9Co1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PB3B8yo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PPDPQ" name="PPD&lt;PQ>">
      <ownedComment xmi:id="_PCOOUSo1Ed65BMwZ7dmx2w">
        <body> </body>
      </ownedComment>
      <ownedComment xmi:id="_PCR4sCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
A parametric probability distribution over physical quantities is
constructed from the generic &lt;object name=&quot;datatypeRef&quot;>
								&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
							&lt;/object> type. However,
recognizing that the unit can be factored from the boundaries, we add
additional semantics and a separate literal form. The additional view
of a probability distribution over physical quantities is a
probability distribution over real numbers with one unit.
&lt;/p>
						&lt;p>
The unit applies to both mean and standard deviation.
&lt;/p>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PCTt4So1Ed65BMwZ7dmx2w">
        <body>
type ParametricProbabilityDistribution&lt;PhysicalQuantity> alias PPD&lt;PQ> specializes PPD&lt;T> {
   PPD&lt;REAL> value;
   CS  unit;
};</body>
      </ownedComment>
      <templateBinding xmi:id="_PCFrdCo1Ed65BMwZ7dmx2w" signature="_PBbkJCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_PCGSgCo1Ed65BMwZ7dmx2w" formal="_PBcLMCo1Ed65BMwZ7dmx2w" actual="PQ"/>
      </templateBinding>
      <ownedOperation xmi:id="PPDPQ-value" name="value" visibility="public">
        <ownedParameter xmi:id="_PCGSgio1Ed65BMwZ7dmx2w" type="PPDREAL" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PCGShCo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PCGSgyo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PPDPQ-unit" name="unit" visibility="public">
        <ownedParameter xmi:id="_PCGSiCo1Ed65BMwZ7dmx2w" type="CS" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PCGSiio1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PCGSiSo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="PPDPQ-literal" name="literal" visibility="public">
        <ownedComment xmi:id="_PCG5mCo1Ed65BMwZ7dmx2w">
          <body> </body>
        </ownedComment>
        <ownedComment xmi:id="_PCKj8Co1Ed65BMwZ7dmx2w">
          <body> 
							&lt;p>
A concise literal form for probability distributions of physical
quantities is defined based on the concise literal form of &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>
&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>> where &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object> is the value. This
literal is defined as an extension of the &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object> literal.
        &lt;/p>
							&lt;p>
Examples: &quot;1.23e-3 m (N5e-6 m)&quot; is the normal-distributed length of
1.23 × 10&lt;sup>-3&lt;/sup> m with 5 × 10&lt;sup>-6&lt;/sup> m
standard deviation in generic literal
form. &quot;1.230(N5)e-3 m&quot; is the same value in concise literal
form. &quot;1.23e-3(N0.005e-3) m &quot; is also valid; it is the concise literal
form for &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PQ&quot;/>&lt;/param>
								&lt;/object>> combined with the
generic literal form for &lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;PPD&quot;/>&lt;/param>
								&lt;/object>&lt;&lt;object name=&quot;datatypeRef&quot;>
									&lt;param name=&quot;datatypeName&quot; value=&quot;REAL&quot;/>&lt;/param>
								&lt;/object>>.
&lt;/p>
						</body>
        </ownedComment>
        <ownedComment xmi:id="_PCMZISo1Ed65BMwZ7dmx2w">
          <body>
PPD&lt;PQ>.literal ST {
  PPD&lt;PQ> : PPD&lt;REAL> &quot; &quot; unit  { $.value.equal($1);
            $.unit.equal($3); }
};
        </body>
        </ownedComment>
        <ownedParameter xmi:id="_PCG5kyo1Ed65BMwZ7dmx2w" type="ST" direction="return">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_PCG5lSo1Ed65BMwZ7dmx2w" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_PCG5lCo1Ed65BMwZ7dmx2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="PPDTS" name="PPD&lt;TS>">
      <ownedComment xmi:id="_PCXYQSo1Ed65BMwZ7dmx2w">
        <body> </body>
      </ownedComment>
      <ownedComment xmi:id="_PCbCoCo1Ed65BMwZ7dmx2w">
        <body> 
						&lt;p>
The parametric probability distribution over time points is fully defined by
the generic data type.
&lt;/p>
						&lt;p>
The standard deviation is of type TS.diffType, which is a duration (a physical
quantity in the dimension of time.)
&lt;/p>
						&lt;div title=&quot; Converting a point in time (TS) to an uncertain point in
          time &quot; >
When converting a  into a 
&lt;>, the standard deviation is
calculated from the  value's order of magnitude
and precision (number of significant digits) such that two standard
deviations span the maximal time range of the digits not
specified. For example, in 20000609 the unspecified digits are hour of
the day and lower. All these digits together span a duration of 24
hours, and thus, the standard deviation ( is( = 12 h from
20000609000000.0000... up to 20000609999999.9999... (= 20000610)

This rule is different from real numbers in that the range of uncertainty lies 
above the time value specified. This is to go with the common sense judgment 
that June 9th spans all day of June 9th with noon as the center, not midnight.
&lt;/div>
					</body>
      </ownedComment>
      <ownedComment xmi:id="_PCc30So1Ed65BMwZ7dmx2w">
        <body>
type ParametricProbabilityDistribution&lt;PointInTime> alias PPD&lt;TS> specializes PPD&lt;T>;</body>
      </ownedComment>
      <templateBinding xmi:id="_PCWxMio1Ed65BMwZ7dmx2w" signature="_PBbkJCo1Ed65BMwZ7dmx2w">
        <parameterSubstitution xmi:id="_PCXYQCo1Ed65BMwZ7dmx2w" formal="_PBcLMCo1Ed65BMwZ7dmx2w" actual="TS"/>
      </templateBinding>
    </packagedElement>
    <profileApplication xmi:id="_OllVpCo1Ed65BMwZ7dmx2w">
      <eAnnotations xmi:id="_Oll8sCo1Ed65BMwZ7dmx2w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://HL7_PROFILES/HDF.profile.uml#_DSlhUCDHEd6sKM9UDPqlTg"/>
      </eAnnotations>
      <appliedProfile href="pathmap://HL7_PROFILES/HDF.profile.uml#_XQSZwERPEdyoutEhWTC49A"/>
    </profileApplication>
    <profileApplication xmi:id="_ZxQsACrGEd6fcNpyhmQLTQ">
      <eAnnotations xmi:id="_ZxQsASrGEd6fcNpyhmQLTQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
  </uml:Package>
  <HDF:HDFPackage xmi:id="_OpjPoCo1Ed65BMwZ7dmx2w" base_Package="_0" realmNamespace="UV" artifact="DT" root="DEFN" combinedId="DEFN=UV=DT=1.0" version="1.0"/>
  <HDF:Definition xmi:id="_OpoIICo1Ed65BMwZ7dmx2w" base_Comment="_OpmS9io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OpsZkCo1Ed65BMwZ7dmx2w" base_Comment="_OpqkaCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Opvc4Co1Ed65BMwZ7dmx2w" base_Comment="_OpuOySo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Opx5ICo1Ed65BMwZ7dmx2w" base_Comment="_OpwrACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OpzuUCo1Ed65BMwZ7dmx2w" base_Comment="_OpygNCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Op2KkCo1Ed65BMwZ7dmx2w" base_Comment="_Op08cCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Op3YsCo1Ed65BMwZ7dmx2w" base_Comment="_Op2KmCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Op6cACo1Ed65BMwZ7dmx2w" base_Comment="_Op5N4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Op7qICo1Ed65BMwZ7dmx2w" base_Comment="_Op6cCCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Op-GYCo1Ed65BMwZ7dmx2w" base_Comment="_Op84QCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Op_7kCo1Ed65BMwZ7dmx2w" base_Comment="_Op-tcyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqCX0Co1Ed65BMwZ7dmx2w" base_Comment="_OqBJsCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OqDl8Co1Ed65BMwZ7dmx2w" base_Comment="_OqCX0So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqFbICo1Ed65BMwZ7dmx2w" base_Comment="_OqDl9yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqH3YCo1Ed65BMwZ7dmx2w" base_Comment="_OqGpQCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqJFgCo1Ed65BMwZ7dmx2w" base_Comment="_OqH3YSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqMv4Co1Ed65BMwZ7dmx2w" base_Comment="_OqK6sCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OqOlECo1Ed65BMwZ7dmx2w" base_Comment="_OqMv4So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqQaQCo1Ed65BMwZ7dmx2w" base_Comment="_OqOlFyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqUEoCo1Ed65BMwZ7dmx2w" base_Comment="_OqSPcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqWg4Co1Ed65BMwZ7dmx2w" base_Comment="_OqUrsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqayUCo1Ed65BMwZ7dmx2w" base_Comment="_OqY9Jyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqecsCo1Ed65BMwZ7dmx2w" base_Comment="_OqcngCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oqg48Co1Ed65BMwZ7dmx2w" base_Comment="_OqfDxCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqkjUCo1Ed65BMwZ7dmx2w" base_Comment="_OqiuICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqmYgCo1Ed65BMwZ7dmx2w" base_Comment="_OqkjVyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oqpb0Co1Ed65BMwZ7dmx2w" base_Comment="_OqoNsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqrRACo1Ed65BMwZ7dmx2w" base_Comment="_Oqpb2Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqttQCo1Ed65BMwZ7dmx2w" base_Comment="_OqsfICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oqu7YCo1Ed65BMwZ7dmx2w" base_Comment="_OqttSCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OqxXoCo1Ed65BMwZ7dmx2w" base_Comment="_OqwJgCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OqzM0Co1Ed65BMwZ7dmx2w" base_Comment="_Oqx-tCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oq2QICo1Ed65BMwZ7dmx2w" base_Comment="_Oq1CAyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oq4sYCo1Ed65BMwZ7dmx2w" base_Comment="_Oq3eRyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oq7IoCo1Ed65BMwZ7dmx2w" base_Comment="_Oq6hkCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oq9k4Co1Ed65BMwZ7dmx2w" base_Comment="_Oq890Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OrAoMCo1Ed65BMwZ7dmx2w" base_Comment="_Oq_aECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrB2UCo1Ed65BMwZ7dmx2w" base_Comment="_OrAoOCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrE5oCo1Ed65BMwZ7dmx2w" base_Comment="_OrDrgyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OrHV4Co1Ed65BMwZ7dmx2w" base_Comment="_OrGHwCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrJLECo1Ed65BMwZ7dmx2w" base_Comment="_OrHV7yo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrLnUCo1Ed65BMwZ7dmx2w" base_Comment="_OrKZNio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrODkCo1Ed65BMwZ7dmx2w" base_Comment="_OrM1dio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrSVACo1Ed65BMwZ7dmx2w" base_Comment="_OrQf1Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrV_YCo1Ed65BMwZ7dmx2w" base_Comment="_OrUKNio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrZpwCo1Ed65BMwZ7dmx2w" base_Comment="_OrX0lyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrdUICo1Ed65BMwZ7dmx2w" base_Comment="_Orbe9yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Org-gCo1Ed65BMwZ7dmx2w" base_Comment="_OrfJUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrizsCo1Ed65BMwZ7dmx2w" base_Comment="_Org-hyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Orl3ACo1Ed65BMwZ7dmx2w" base_Comment="_Orko5io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OroTQCo1Ed65BMwZ7dmx2w" base_Comment="_OrnFICo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OrphYCo1Ed65BMwZ7dmx2w" base_Comment="_OroTQSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrrWkCo1Ed65BMwZ7dmx2w" base_Comment="_OrqIcCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Orty0Co1Ed65BMwZ7dmx2w" base_Comment="_OrsksCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OrvoACo1Ed65BMwZ7dmx2w" base_Comment="_OruZ4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OrxdMCo1Ed65BMwZ7dmx2w" base_Comment="_OrvoBCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Orz5cCo1Ed65BMwZ7dmx2w" base_Comment="_OryrVyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Or2VsCo1Ed65BMwZ7dmx2w" base_Comment="_Or1Hlio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Or5ZACo1Ed65BMwZ7dmx2w" base_Comment="_Or4K5So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Or71QCo1Ed65BMwZ7dmx2w" base_Comment="_Or6nICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Or9DYCo1Ed65BMwZ7dmx2w" base_Comment="_Or71Ryo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Or_foCo1Ed65BMwZ7dmx2w" base_Comment="_Or-4kCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OsBU0Co1Ed65BMwZ7dmx2w" base_Comment="_OsAGsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsCi8Co1Ed65BMwZ7dmx2w" base_Comment="_OsBU2Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsE_MCo1Ed65BMwZ7dmx2w" base_Comment="_OsDxECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsGNUCo1Ed65BMwZ7dmx2w" base_Comment="_OsE_MSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsIpkCo1Ed65BMwZ7dmx2w" base_Comment="_OsICgCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OsKewCo1Ed65BMwZ7dmx2w" base_Comment="_OsJQoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsMT8Co1Ed65BMwZ7dmx2w" base_Comment="_OsKezSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OsOwMCo1Ed65BMwZ7dmx2w" base_Comment="_OsNiECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsP-UCo1Ed65BMwZ7dmx2w" base_Comment="_OsOwMio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsSakCo1Ed65BMwZ7dmx2w" base_Comment="_OsRMcCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OsTosCo1Ed65BMwZ7dmx2w" base_Comment="_OsSakSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsVd4Co1Ed65BMwZ7dmx2w" base_Comment="_OsUPxSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsX6ICo1Ed65BMwZ7dmx2w" base_Comment="_OsWsACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsZvUCo1Ed65BMwZ7dmx2w" base_Comment="_OsYhMio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OscyoCo1Ed65BMwZ7dmx2w" base_Comment="_Osa9cCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Osen0Co1Ed65BMwZ7dmx2w" base_Comment="_Oscypyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsiSMCo1Ed65BMwZ7dmx2w" base_Comment="_OsgdACo1Ed65BMwZ7dmx2w"/>
  <HDF:Rationale xmi:id="_OskHYCo1Ed65BMwZ7dmx2w" base_Comment="_OsiSMSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsmjoCo1Ed65BMwZ7dmx2w" base_Comment="_OskudSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsqOACo1Ed65BMwZ7dmx2w" base_Comment="_OsoY0Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OssqQCo1Ed65BMwZ7dmx2w" base_Comment="_Osq1FSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OsvtkCo1Ed65BMwZ7dmx2w" base_Comment="_OsufcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OsxiwCo1Ed65BMwZ7dmx2w" base_Comment="_Osvtlyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Os1NICo1Ed65BMwZ7dmx2w" base_Comment="_OszX9io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Os43gCo1Ed65BMwZ7dmx2w" base_Comment="_Os3CUCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Os6ssCo1Ed65BMwZ7dmx2w" base_Comment="_Os43gSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Os8h4Co1Ed65BMwZ7dmx2w" base_Comment="_Os6ssSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Os-XECo1Ed65BMwZ7dmx2w" base_Comment="_Os8h4So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OtBaYCo1Ed65BMwZ7dmx2w" base_Comment="_OtAMQCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OtDPkCo1Ed65BMwZ7dmx2w" base_Comment="_OtBaYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtGS4Co1Ed65BMwZ7dmx2w" base_Comment="_OtEdtio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OtJ9QCo1Ed65BMwZ7dmx2w" base_Comment="_OtIIECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtMZgCo1Ed65BMwZ7dmx2w" base_Comment="_OtKkVSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OtQD4Co1Ed65BMwZ7dmx2w" base_Comment="_OtOOsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtR5ECo1Ed65BMwZ7dmx2w" base_Comment="_OtQD5yo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtWKgCo1Ed65BMwZ7dmx2w" base_Comment="_OtUVVCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtZ04Co1Ed65BMwZ7dmx2w" base_Comment="_OtX_tio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OtdfQCo1Ed65BMwZ7dmx2w" base_Comment="_OtbqECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtfUcCo1Ed65BMwZ7dmx2w" base_Comment="_OtdfSCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Otjl4Co1Ed65BMwZ7dmx2w" base_Comment="_OthwtCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtnQQCo1Ed65BMwZ7dmx2w" base_Comment="_OtlbFyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtpsgCo1Ed65BMwZ7dmx2w" base_Comment="_OtoeZyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Otsv0Co1Ed65BMwZ7dmx2w" base_Comment="_OtrhtCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OtvMECo1Ed65BMwZ7dmx2w" base_Comment="_Ott99io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OtyPYCo1Ed65BMwZ7dmx2w" base_Comment="_OtxBQCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Ot0EkCo1Ed65BMwZ7dmx2w" base_Comment="_OtyPYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ot2g0Co1Ed65BMwZ7dmx2w" base_Comment="_Ot0rpio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Ot6LMCo1Ed65BMwZ7dmx2w" base_Comment="_Ot4WACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ot8ncCo1Ed65BMwZ7dmx2w" base_Comment="_Ot6yRyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuA44Co1Ed65BMwZ7dmx2w" base_Comment="_Ot_DtCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuEjQCo1Ed65BMwZ7dmx2w" base_Comment="_OuCuFio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuINoCo1Ed65BMwZ7dmx2w" base_Comment="_OuGYdyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuL4ACo1Ed65BMwZ7dmx2w" base_Comment="_OuKC1io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OuPiYCo1Ed65BMwZ7dmx2w" base_Comment="_OuNtMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuRXkCo1Ed65BMwZ7dmx2w" base_Comment="_OuPiZyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OuVB8Co1Ed65BMwZ7dmx2w" base_Comment="_OuTMwCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OuXeMCo1Ed65BMwZ7dmx2w" base_Comment="_OuVpBCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OubIkCo1Ed65BMwZ7dmx2w" base_Comment="_OuZTYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ouc9wCo1Ed65BMwZ7dmx2w" base_Comment="_OubIlyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OugoICo1Ed65BMwZ7dmx2w" base_Comment="_Ouey8Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OuidUCo1Ed65BMwZ7dmx2w" base_Comment="_OugoISo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OujrcCo1Ed65BMwZ7dmx2w" base_Comment="_OuidWCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OumHsCo1Ed65BMwZ7dmx2w" base_Comment="_Ouk5kCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oun84Co1Ed65BMwZ7dmx2w" base_Comment="_Oumuwio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OxayMCo1Ed65BMwZ7dmx2w" base_Comment="_OxY9ACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OxdOcCo1Ed65BMwZ7dmx2w" base_Comment="_OxbZQyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oxg40Co1Ed65BMwZ7dmx2w" base_Comment="_OxfDoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OxiuACo1Ed65BMwZ7dmx2w" base_Comment="_Oxg40So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OxmYYCo1Ed65BMwZ7dmx2w" base_Comment="_OxkjMCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OxoNkCo1Ed65BMwZ7dmx2w" base_Comment="_OxmYYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oxqp0Co1Ed65BMwZ7dmx2w" base_Comment="_Oxo0oio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OxuUMCo1Ed65BMwZ7dmx2w" base_Comment="_OxsfACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OxwJYCo1Ed65BMwZ7dmx2w" base_Comment="_OxuUMSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OxzzwCo1Ed65BMwZ7dmx2w" base_Comment="_Oxx-kCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ox23ECo1Ed65BMwZ7dmx2w" base_Comment="_Ox1B4io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Ox56YCo1Ed65BMwZ7dmx2w" base_Comment="_Ox4sQCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ox8WoCo1Ed65BMwZ7dmx2w" base_Comment="_Ox6hdSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OyABACo1Ed65BMwZ7dmx2w" base_Comment="_Ox-L0Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyCdQCo1Ed65BMwZ7dmx2w" base_Comment="_OyAoEyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyGHoCo1Ed65BMwZ7dmx2w" base_Comment="_OyESdio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyJK8Co1Ed65BMwZ7dmx2w" base_Comment="_OyIj4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyMOQCo1Ed65BMwZ7dmx2w" base_Comment="_OyLAJio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyOqgCo1Ed65BMwZ7dmx2w" base_Comment="_OyNcZyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OyRGwCo1Ed65BMwZ7dmx2w" base_Comment="_OyP4oCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyS78Co1Ed65BMwZ7dmx2w" base_Comment="_OyRt1Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OyVYMCo1Ed65BMwZ7dmx2w" base_Comment="_OyUKECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OyWmUCo1Ed65BMwZ7dmx2w" base_Comment="_OyVYMSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyYbgCo1Ed65BMwZ7dmx2w" base_Comment="_OyXNYyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oya3wCo1Ed65BMwZ7dmx2w" base_Comment="_OyZpoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oycs8Co1Ed65BMwZ7dmx2w" base_Comment="_Oybe2Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OyfJMCo1Ed65BMwZ7dmx2w" base_Comment="_Oyd7ECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OygXUCo1Ed65BMwZ7dmx2w" base_Comment="_OyfJMSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OykBsCo1Ed65BMwZ7dmx2w" base_Comment="_OyiMgCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Oyl24Co1Ed65BMwZ7dmx2w" base_Comment="_OykBsSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OyoTICo1Ed65BMwZ7dmx2w" base_Comment="_Oymd9Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oyr9gCo1Ed65BMwZ7dmx2w" base_Comment="_OyqvYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OywO8Co1Ed65BMwZ7dmx2w" base_Comment="_OyvA0io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oy0gYCo1Ed65BMwZ7dmx2w" base_Comment="_OyyrOSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oy4KwCo1Ed65BMwZ7dmx2w" base_Comment="_Oy2VkCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Oy5_8Co1Ed65BMwZ7dmx2w" base_Comment="_Oy4KwSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oy9DQCo1Ed65BMwZ7dmx2w" base_Comment="_Oy7OHCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_OzAtoCo1Ed65BMwZ7dmx2w" base_Comment="_Oy-4cCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzDJ4Co1Ed65BMwZ7dmx2w" base_Comment="_OzBUsyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzG0QCo1Ed65BMwZ7dmx2w" base_Comment="_OzE_Fio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OzKeoCo1Ed65BMwZ7dmx2w" base_Comment="_OzIpcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzMT0Co1Ed65BMwZ7dmx2w" base_Comment="_OzKeqCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OzP-MCo1Ed65BMwZ7dmx2w" base_Comment="_OzOJACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzSacCo1Ed65BMwZ7dmx2w" base_Comment="_OzQlQyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OzWE0Co1Ed65BMwZ7dmx2w" base_Comment="_OzUPoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzX6ACo1Ed65BMwZ7dmx2w" base_Comment="_OzWE1yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_OzbkYCo1Ed65BMwZ7dmx2w" base_Comment="_OzZvMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzdZkCo1Ed65BMwZ7dmx2w" base_Comment="_OzbkZyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzhrACo1Ed65BMwZ7dmx2w" base_Comment="_Ozf11So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzlVYCo1Ed65BMwZ7dmx2w" base_Comment="_OzjgNyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Ozo_wCo1Ed65BMwZ7dmx2w" base_Comment="_OznKkCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Ozq08Co1Ed65BMwZ7dmx2w" base_Comment="_Ozo_xyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzvGYCo1Ed65BMwZ7dmx2w" base_Comment="_OztRNSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_OzywwCo1Ed65BMwZ7dmx2w" base_Comment="_Ozw7lyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oz2bICo1Ed65BMwZ7dmx2w" base_Comment="_Oz0l9io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oz43YCo1Ed65BMwZ7dmx2w" base_Comment="_Oz3pQCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_Oz6FgCo1Ed65BMwZ7dmx2w" base_Comment="_Oz43YSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oz76sCo1Ed65BMwZ7dmx2w" base_Comment="_Oz6slCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_Oz-W8Co1Ed65BMwZ7dmx2w" base_Comment="_Oz9I0Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_Oz_lECo1Ed65BMwZ7dmx2w" base_Comment="_Oz-W8So1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O0CBUCo1Ed65BMwZ7dmx2w" base_Comment="_O0AzMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0D2gCo1Ed65BMwZ7dmx2w" base_Comment="_O0CoYCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0GSwCo1Ed65BMwZ7dmx2w" base_Comment="_O0FEoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0Hg4Co1Ed65BMwZ7dmx2w" base_Comment="_O0GSyCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0KkMCo1Ed65BMwZ7dmx2w" base_Comment="_O0JWECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0LyUCo1Ed65BMwZ7dmx2w" base_Comment="_O0KkOCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0OOkCo1Ed65BMwZ7dmx2w" base_Comment="_O0NAcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0QDwCo1Ed65BMwZ7dmx2w" base_Comment="_O0O1oyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0TuICo1Ed65BMwZ7dmx2w" base_Comment="_O0R48Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0WKYCo1Ed65BMwZ7dmx2w" base_Comment="_O0UVNCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0Z0wCo1Ed65BMwZ7dmx2w" base_Comment="_O0X_kCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0bp8Co1Ed65BMwZ7dmx2w" base_Comment="_O0Z0xyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0eGMCo1Ed65BMwZ7dmx2w" base_Comment="_O0c4ECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0f7YCo1Ed65BMwZ7dmx2w" base_Comment="_O0etQCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0iXoCo1Ed65BMwZ7dmx2w" base_Comment="_O0hJhyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0kz4Co1Ed65BMwZ7dmx2w" base_Comment="_O0kM0io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0oeQCo1Ed65BMwZ7dmx2w" base_Comment="_O0mpECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O0qTcCo1Ed65BMwZ7dmx2w" base_Comment="_O0oeQSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O0sIoCo1Ed65BMwZ7dmx2w" base_Comment="_O0qTcSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O0vL8Co1Ed65BMwZ7dmx2w" base_Comment="_O0t90Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O0xoMCo1Ed65BMwZ7dmx2w" base_Comment="_O0vzACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O00rgCo1Ed65BMwZ7dmx2w" base_Comment="_O0y2VCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O04V4Co1Ed65BMwZ7dmx2w" base_Comment="_O02gsCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O06LECo1Ed65BMwZ7dmx2w" base_Comment="_O04V4So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O08nUCo1Ed65BMwZ7dmx2w" base_Comment="_O06yJCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1ARsCo1Ed65BMwZ7dmx2w" base_Comment="_O0-cgCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1CG4Co1Ed65BMwZ7dmx2w" base_Comment="_O1ARsSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1FxQCo1Ed65BMwZ7dmx2w" base_Comment="_O1D8ECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O1HmcCo1Ed65BMwZ7dmx2w" base_Comment="_O1FxQSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1L34Co1Ed65BMwZ7dmx2w" base_Comment="_O1KCtyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1PiQCo1Ed65BMwZ7dmx2w" base_Comment="_O1NtECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O1RXcCo1Ed65BMwZ7dmx2w" base_Comment="_O1PiQSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1TMoCo1Ed65BMwZ7dmx2w" base_Comment="_O1RXcSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1W3ACo1Ed65BMwZ7dmx2w" base_Comment="_O1VB0Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O1YsMCo1Ed65BMwZ7dmx2w" base_Comment="_O1W3ASo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1bIcCo1Ed65BMwZ7dmx2w" base_Comment="_O1ZTRSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1fZ4Co1Ed65BMwZ7dmx2w" base_Comment="_O1dktio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1jEQCo1Ed65BMwZ7dmx2w" base_Comment="_O1hPECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1k5cCo1Ed65BMwZ7dmx2w" base_Comment="_O1jESCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1oj0Co1Ed65BMwZ7dmx2w" base_Comment="_O1muoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1px8Co1Ed65BMwZ7dmx2w" base_Comment="_O1oj0So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1s1QCo1Ed65BMwZ7dmx2w" base_Comment="_O1rnICo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O1uDYCo1Ed65BMwZ7dmx2w" base_Comment="_O1s1QSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1vRgCo1Ed65BMwZ7dmx2w" base_Comment="_O1uDZyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O1xtwCo1Ed65BMwZ7dmx2w" base_Comment="_O1wfoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1zi8Co1Ed65BMwZ7dmx2w" base_Comment="_O1yU0yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O11_MCo1Ed65BMwZ7dmx2w" base_Comment="_O10xECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O130YCo1Ed65BMwZ7dmx2w" base_Comment="_O11_OCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O16QoCo1Ed65BMwZ7dmx2w" base_Comment="_O15Chyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O18s4Co1Ed65BMwZ7dmx2w" base_Comment="_O17ewCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O1-iECo1Ed65BMwZ7dmx2w" base_Comment="_O19T9io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2A-UCo1Ed65BMwZ7dmx2w" base_Comment="_O1_wMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2CMcCo1Ed65BMwZ7dmx2w" base_Comment="_O2A-USo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2FPwCo1Ed65BMwZ7dmx2w" base_Comment="_O2EBoCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O2HE8Co1Ed65BMwZ7dmx2w" base_Comment="_O2FPwSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O2I6ICo1Ed65BMwZ7dmx2w" base_Generalization="ED_ST_generalization"/>
  <HDF:Definition xmi:id="_O2LWYCo1Ed65BMwZ7dmx2w" base_Comment="_O2JhMio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2OZsCo1Ed65BMwZ7dmx2w" base_Comment="_O2NLkCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2Q18Co1Ed65BMwZ7dmx2w" base_Comment="_O2PAxSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2UgUCo1Ed65BMwZ7dmx2w" base_Comment="_O2SrICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2WVgCo1Ed65BMwZ7dmx2w" base_Comment="_O2UgWCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2Z_4Co1Ed65BMwZ7dmx2w" base_Comment="_O2YKsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2ccICo1Ed65BMwZ7dmx2w" base_Comment="_O2am8yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2gGgCo1Ed65BMwZ7dmx2w" base_Comment="_O2eRUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2h7sCo1Ed65BMwZ7dmx2w" base_Comment="_O2gGiCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2lmECo1Ed65BMwZ7dmx2w" base_Comment="_O2jw4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2oCUCo1Ed65BMwZ7dmx2w" base_Comment="_O2mNJSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2rssCo1Ed65BMwZ7dmx2w" base_Comment="_O2p3gCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O2uI8Co1Ed65BMwZ7dmx2w" base_Comment="_O2rsuCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2xMQCo1Ed65BMwZ7dmx2w" base_Comment="_O2v-ICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O20PkCo1Ed65BMwZ7dmx2w" base_Comment="_O2yaZCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2358Co1Ed65BMwZ7dmx2w" base_Comment="_O22EwCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O25vICo1Ed65BMwZ7dmx2w" base_Comment="_O2358So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O27kUCo1Ed65BMwZ7dmx2w" base_Comment="_O25vISo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O2_OsCo1Ed65BMwZ7dmx2w" base_Comment="_O29ZgCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O3Ac0Co1Ed65BMwZ7dmx2w" base_Comment="_O2_OsSo1Ed65BMwZ7dmx2w"/>
  <HDF:Requirements xmi:id="_O3Bq8Co1Ed65BMwZ7dmx2w" base_Comment="_O3Ac0So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3DgICo1Ed65BMwZ7dmx2w" base_Comment="_O3CSAyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3F8YCo1Ed65BMwZ7dmx2w" base_Comment="_O3EuQCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3HKgCo1Ed65BMwZ7dmx2w" base_Comment="_O3F8Zyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3KN0Co1Ed65BMwZ7dmx2w" base_Comment="_O3I_sCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3Lb8Co1Ed65BMwZ7dmx2w" base_Comment="_O3KN2Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3N4MCo1Ed65BMwZ7dmx2w" base_Comment="_O3MqECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3PtYCo1Ed65BMwZ7dmx2w" base_Comment="_O3OfRCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3SJoCo1Ed65BMwZ7dmx2w" base_Comment="_O3Q7gCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3T-0Co1Ed65BMwZ7dmx2w" base_Comment="_O3SJqCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3WbECo1Ed65BMwZ7dmx2w" base_Comment="_O3VM8Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3YQQCo1Ed65BMwZ7dmx2w" base_Comment="_O3XCJCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3bTkCo1Ed65BMwZ7dmx2w" base_Comment="_O3aFcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3dIwCo1Ed65BMwZ7dmx2w" base_Comment="_O3b6qSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3flACo1Ed65BMwZ7dmx2w" base_Comment="_O3eW4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3haMCo1Ed65BMwZ7dmx2w" base_Comment="_O3gMHCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3j2cCo1Ed65BMwZ7dmx2w" base_Comment="_O3jPYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3lroCo1Ed65BMwZ7dmx2w" base_Comment="_O3kdhyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3oH4Co1Ed65BMwZ7dmx2w" base_Comment="_O3m5wCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3p9ECo1Ed65BMwZ7dmx2w" base_Comment="_O3ou8So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3sZUCo1Ed65BMwZ7dmx2w" base_Comment="_O3rLMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3tncCo1Ed65BMwZ7dmx2w" base_Comment="_O3sZUSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O3wDsCo1Ed65BMwZ7dmx2w" base_Comment="_O3u1kCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O3xR0Co1Ed65BMwZ7dmx2w" base_Comment="_O3wDsSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O3zHACo1Ed65BMwZ7dmx2w" base_Comment="_O3x44yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O31jQCo1Ed65BMwZ7dmx2w" base_Comment="_O30VICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O32xYCo1Ed65BMwZ7dmx2w" base_Comment="_O31jSCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O36bwCo1Ed65BMwZ7dmx2w" base_Comment="_O35NoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O384ACo1Ed65BMwZ7dmx2w" base_Comment="_O37C1io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4AiYCo1Ed65BMwZ7dmx2w" base_Comment="_O3-tMCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4CXkCo1Ed65BMwZ7dmx2w" base_Comment="_O4AiYSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4GB8Co1Ed65BMwZ7dmx2w" base_Comment="_O4EMwCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O4H3ICo1Ed65BMwZ7dmx2w" base_Comment="_O4GB8So1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O4JFQCo1Ed65BMwZ7dmx2w" base_Generalization="CD_CE_generalization"/>
  <HDF:Definition xmi:id="_O4MvoCo1Ed65BMwZ7dmx2w" base_Comment="_O4K6gSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4PL4Co1Ed65BMwZ7dmx2w" base_Comment="_O4N9wCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O4QaACo1Ed65BMwZ7dmx2w" base_Comment="_O4PL4So1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O4RoICo1Ed65BMwZ7dmx2w" base_Generalization="CE_CV_generalization"/>
  <HDF:Definition xmi:id="_O4UrcCo1Ed65BMwZ7dmx2w" base_Comment="_O4TdWyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4XHsCo1Ed65BMwZ7dmx2w" base_Comment="_O4V5kCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O4Y84Co1Ed65BMwZ7dmx2w" base_Comment="_O4XHsSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O4aLACo1Ed65BMwZ7dmx2w" base_Generalization="CV_CS_generalization"/>
  <HDF:Definition xmi:id="_O4cAMCo1Ed65BMwZ7dmx2w" base_Comment="_O4ayESo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4eccCo1Ed65BMwZ7dmx2w" base_Comment="_O4dOUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4hfwCo1Ed65BMwZ7dmx2w" base_Comment="_O4fqoSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4j8ACo1Ed65BMwZ7dmx2w" base_Comment="_O4it4Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O4lKICo1Ed65BMwZ7dmx2w" base_Comment="_O4j8ASo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4mYQCo1Ed65BMwZ7dmx2w" base_Comment="_O4lKISo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O4qCoCo1Ed65BMwZ7dmx2w" base_Comment="_O4oNcCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O4r30Co1Ed65BMwZ7dmx2w" base_Comment="_O4qCoSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4ttACo1Ed65BMwZ7dmx2w" base_Comment="_O4r31yo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4x-cCo1Ed65BMwZ7dmx2w" base_Comment="_O4wJRio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O41o0Co1Ed65BMwZ7dmx2w" base_Comment="_O4zzpyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O45TMCo1Ed65BMwZ7dmx2w" base_Comment="_O43eACo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O48WgCo1Ed65BMwZ7dmx2w" base_Comment="_O47IYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O4-ywCo1Ed65BMwZ7dmx2w" base_Comment="_O489lCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5CdICo1Ed65BMwZ7dmx2w" base_Comment="_O5An9io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5GHgCo1Ed65BMwZ7dmx2w" base_Comment="_O5ESUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5H8sCo1Ed65BMwZ7dmx2w" base_Comment="_O5GHhyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5LnECo1Ed65BMwZ7dmx2w" base_Comment="_O5Jx4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5ODUCo1Ed65BMwZ7dmx2w" base_Comment="_O5MOIio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5RtsCo1Ed65BMwZ7dmx2w" base_Comment="_O5P4gCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5Ti4Co1Ed65BMwZ7dmx2w" base_Comment="_O5Rttyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5XNQCo1Ed65BMwZ7dmx2w" base_Comment="_O5V_ISo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5a3oCo1Ed65BMwZ7dmx2w" base_Comment="_O5ZphCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5fJECo1Ed65BMwZ7dmx2w" base_Comment="_O5dT5io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5izcCo1Ed65BMwZ7dmx2w" base_Comment="_O5g-QCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5kooCo1Ed65BMwZ7dmx2w" base_Comment="_O5izcSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O5nr8Co1Ed65BMwZ7dmx2w" base_Comment="_O5md0Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5qvQCo1Ed65BMwZ7dmx2w" base_Comment="_O5oTCyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5tykCo1Ed65BMwZ7dmx2w" base_Comment="_O5skcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O5w14Co1Ed65BMwZ7dmx2w" base_Comment="_O5vAtSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O50gQCo1Ed65BMwZ7dmx2w" base_Comment="_O5yrECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O52VcCo1Ed65BMwZ7dmx2w" base_Comment="_O50gQSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O54xsCo1Ed65BMwZ7dmx2w" base_Comment="_O528hCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O58cECo1Ed65BMwZ7dmx2w" base_Comment="_O56m4Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O5_fYCo1Ed65BMwZ7dmx2w" base_Comment="_O5-RQCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O6BUkCo1Ed65BMwZ7dmx2w" base_Comment="_O5_fYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6FmACo1Ed65BMwZ7dmx2w" base_Comment="_O6Dw0io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O6IpUCo1Ed65BMwZ7dmx2w" base_Comment="_O6HbMCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O6LFkCo1Ed65BMwZ7dmx2w" base_Comment="_O6IpUSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6M6wCo1Ed65BMwZ7dmx2w" base_Comment="_O6LFkSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O6P-ECo1Ed65BMwZ7dmx2w" base_Comment="_O6Ov8Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O6SaUCo1Ed65BMwZ7dmx2w" base_Comment="_O6QlICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6U2kCo1Ed65BMwZ7dmx2w" base_Comment="_O6TBYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6Yg8Co1Ed65BMwZ7dmx2w" base_Comment="_O6Wrxio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6cLUCo1Ed65BMwZ7dmx2w" base_Comment="_O6aWJio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6f1sCo1Ed65BMwZ7dmx2w" base_Comment="_O6eAhio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6jgECo1Ed65BMwZ7dmx2w" base_Comment="_O6iR8io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6nKcCo1Ed65BMwZ7dmx2w" base_Comment="_O6l8VCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O6q00Co1Ed65BMwZ7dmx2w" base_Comment="_O6pmsCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O6sqACo1Ed65BMwZ7dmx2w" base_Comment="_O6q00So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6vGQCo1Ed65BMwZ7dmx2w" base_Comment="_O6tRECo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O6yJkCo1Ed65BMwZ7dmx2w" base_Comment="_O6w7cCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O6z-wCo1Ed65BMwZ7dmx2w" base_Comment="_O6yJkSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O62bACo1Ed65BMwZ7dmx2w" base_Comment="_O60l1Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O66FYCo1Ed65BMwZ7dmx2w" base_Comment="_O64QMCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O676kCo1Ed65BMwZ7dmx2w" base_Comment="_O66FYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O6-W0Co1Ed65BMwZ7dmx2w" base_Comment="_O68hpCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O7BaICo1Ed65BMwZ7dmx2w" base_Comment="_O7AMACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7DPUCo1Ed65BMwZ7dmx2w" base_Comment="_O7BaKCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O7FrkCo1Ed65BMwZ7dmx2w" base_Comment="_O7EdcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7G5sCo1Ed65BMwZ7dmx2w" base_Comment="_O7Frlyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7JV8Co1Ed65BMwZ7dmx2w" base_Comment="_O7Iu4io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7MZQCo1Ed65BMwZ7dmx2w" base_Comment="_O7LLJyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O7O1gCo1Ed65BMwZ7dmx2w" base_Comment="_O7NnYCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7QDoCo1Ed65BMwZ7dmx2w" base_Comment="_O7O1gSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O7Sf4Co1Ed65BMwZ7dmx2w" base_Comment="_O7RRwCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7U8ICo1Ed65BMwZ7dmx2w" base_Comment="_O7TG9io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7YmgCo1Ed65BMwZ7dmx2w" base_Comment="_O7WxUCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O7cQ4Co1Ed65BMwZ7dmx2w" base_Comment="_O7absCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7etICo1Ed65BMwZ7dmx2w" base_Comment="_O7c39yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O7iXgCo1Ed65BMwZ7dmx2w" base_Comment="_O7giUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7kzwCo1Ed65BMwZ7dmx2w" base_Comment="_O7i-kCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7oeICo1Ed65BMwZ7dmx2w" base_Comment="_O7mo9io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7sIgCo1Ed65BMwZ7dmx2w" base_Comment="_O7qTVyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O7vy4Co1Ed65BMwZ7dmx2w" base_Comment="_O7t9sCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7xoECo1Ed65BMwZ7dmx2w" base_Comment="_O7vy5yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O71ScCo1Ed65BMwZ7dmx2w" base_Comment="_O70EUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O73HoCo1Ed65BMwZ7dmx2w" base_Comment="_O71ScSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O76yACo1Ed65BMwZ7dmx2w" base_Comment="_O7480Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O78nMCo1Ed65BMwZ7dmx2w" base_Comment="_O76yASo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O7-cYCo1Ed65BMwZ7dmx2w" base_Comment="_O79ORSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8A4oCo1Ed65BMwZ7dmx2w" base_Comment="_O7_qgCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8Ct0Co1Ed65BMwZ7dmx2w" base_Comment="_O8A4pyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8FxICo1Ed65BMwZ7dmx2w" base_Comment="_O8EjACo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O8JbgCo1Ed65BMwZ7dmx2w" base_Comment="_O8HmUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8Me0Co1Ed65BMwZ7dmx2w" base_Comment="_O8Kpoyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8QJMCo1Ed65BMwZ7dmx2w" base_Comment="_O8OUACo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8R-YCo1Ed65BMwZ7dmx2w" base_Comment="_O8QJNyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8VowCo1Ed65BMwZ7dmx2w" base_Comment="_O8TzkCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8YFACo1Ed65BMwZ7dmx2w" base_Comment="_O8WP0So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8bIUCo1Ed65BMwZ7dmx2w" base_Comment="_O8Z6MCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8dkkCo1Ed65BMwZ7dmx2w" base_Comment="_O8bvZCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8hO8Co1Ed65BMwZ7dmx2w" base_Comment="_O8fZwCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O8jEICo1Ed65BMwZ7dmx2w" base_Comment="_O8hO8So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8mugCo1Ed65BMwZ7dmx2w" base_Comment="_O8k5UCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O8ojsCo1Ed65BMwZ7dmx2w" base_Comment="_O8mugSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O8qY4Co1Ed65BMwZ7dmx2w" base_Generalization="EN_TN_generalization"/>
  <HDF:Definition xmi:id="_O8s1ICo1Ed65BMwZ7dmx2w" base_Comment="_O8q_-yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8wfgCo1Ed65BMwZ7dmx2w" base_Comment="_O8vRYCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O8yUsCo1Ed65BMwZ7dmx2w" base_Comment="_O8wfgSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O8zi0Co1Ed65BMwZ7dmx2w" base_Generalization="EN_PN_generalization"/>
  <HDF:Definition xmi:id="_O81YACo1Ed65BMwZ7dmx2w" base_Comment="_O8zi0So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O830QCo1Ed65BMwZ7dmx2w" base_Comment="_O82mICo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O85CYCo1Ed65BMwZ7dmx2w" base_Comment="_O830QSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O863kCo1Ed65BMwZ7dmx2w" base_Generalization="EN_ON_generalization"/>
  <HDF:Definition xmi:id="_O88FsCo1Ed65BMwZ7dmx2w" base_Comment="_O863kSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O8-h8Co1Ed65BMwZ7dmx2w" base_Comment="_O89T0Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O8_wECo1Ed65BMwZ7dmx2w" base_Comment="_O8-h8So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9CMUCo1Ed65BMwZ7dmx2w" base_Comment="_O9AXLyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9EokCo1Ed65BMwZ7dmx2w" base_Comment="_O9Dadyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9HE0Co1Ed65BMwZ7dmx2w" base_Comment="_O9Gdwio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9KIICo1Ed65BMwZ7dmx2w" base_Comment="_O9I6ACo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O9LWQCo1Ed65BMwZ7dmx2w" base_Comment="_O9KIISo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9MkYCo1Ed65BMwZ7dmx2w" base_Comment="_O9LWQSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9PAoCo1Ed65BMwZ7dmx2w" base_Comment="_O9NygCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O9QOwCo1Ed65BMwZ7dmx2w" base_Comment="_O9PAoSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9SD8Co1Ed65BMwZ7dmx2w" base_Comment="_O9Q12So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9UgMCo1Ed65BMwZ7dmx2w" base_Comment="_O9TSECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9WVYCo1Ed65BMwZ7dmx2w" base_Comment="_O9VHQyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9YxoCo1Ed65BMwZ7dmx2w" base_Comment="_O9XjgCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9Z_wCo1Ed65BMwZ7dmx2w" base_Comment="_O9YxqCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9ccACo1Ed65BMwZ7dmx2w" base_Comment="_O9b08Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9eRMCo1Ed65BMwZ7dmx2w" base_Comment="_O9dDFio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9gtcCo1Ed65BMwZ7dmx2w" base_Comment="_O9ffUCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9iioCo1Ed65BMwZ7dmx2w" base_Comment="_O9gtdyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9mNACo1Ed65BMwZ7dmx2w" base_Comment="_O9kX0Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9opQCo1Ed65BMwZ7dmx2w" base_Comment="_O9m0Eyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9sToCo1Ed65BMwZ7dmx2w" base_Comment="_O9qedyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O9v-ACo1Ed65BMwZ7dmx2w" base_Comment="_O9uv4So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O9zoYCo1Ed65BMwZ7dmx2w" base_Comment="_O9xzMCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O91dkCo1Ed65BMwZ7dmx2w" base_Comment="_O9zoYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O93SwCo1Ed65BMwZ7dmx2w" base_Comment="_O91dkSo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O95vACo1Ed65BMwZ7dmx2w" base_Comment="_O94g4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O99ZYCo1Ed65BMwZ7dmx2w" base_Comment="_O98LQCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-AcsCo1Ed65BMwZ7dmx2w" base_Comment="_O9-ngCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-EHECo1Ed65BMwZ7dmx2w" base_Comment="_O-CR4Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O-F8QCo1Ed65BMwZ7dmx2w" base_Comment="_O-EHESo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-I_kCo1Ed65BMwZ7dmx2w" base_Comment="_O-HKaio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-Mp8Co1Ed65BMwZ7dmx2w" base_Comment="_O-K0wCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-QUUCo1Ed65BMwZ7dmx2w" base_Comment="_O-OfICo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O-SJgCo1Ed65BMwZ7dmx2w" base_Comment="_O-QUUSo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O-UlwCo1Ed65BMwZ7dmx2w" base_Generalization="LIST_GLIST_generalization"/>
  <HDF:Definition xmi:id="_O-XCACo1Ed65BMwZ7dmx2w" base_Comment="_O-VM0io1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-aFUCo1Ed65BMwZ7dmx2w" base_Comment="_O-Y3MCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-chkCo1Ed65BMwZ7dmx2w" base_Comment="_O-asZSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-gL8Co1Ed65BMwZ7dmx2w" base_Comment="_O-e90Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-j2UCo1Ed65BMwZ7dmx2w" base_Comment="_O-iBICo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-lrgCo1Ed65BMwZ7dmx2w" base_Comment="_O-j2WCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-oHwCo1Ed65BMwZ7dmx2w" base_Comment="_O-m5oCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-pV4Co1Ed65BMwZ7dmx2w" base_Comment="_O-oHwSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-ryICo1Ed65BMwZ7dmx2w" base_Comment="_O-qkACo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O-tnUCo1Ed65BMwZ7dmx2w" base_Comment="_O-ryISo1Ed65BMwZ7dmx2w"/>
  <HDF:Restriction xmi:id="_O-vcgCo1Ed65BMwZ7dmx2w" base_Generalization="LIST_SLIST_generalization"/>
  <HDF:Definition xmi:id="_O-xRsCo1Ed65BMwZ7dmx2w" base_Comment="_O-vchyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-zt8Co1Ed65BMwZ7dmx2w" base_Comment="_O-yf1io1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-2KMCo1Ed65BMwZ7dmx2w" base_Comment="_O-08Fio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O-4mcCo1Ed65BMwZ7dmx2w" base_Comment="_O-3_YCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O-7pwCo1Ed65BMwZ7dmx2w" base_Comment="_O-6boCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O-834Co1Ed65BMwZ7dmx2w" base_Comment="_O-7pwSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O--tECo1Ed65BMwZ7dmx2w" base_Comment="_O-9e9So1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O_BwYCo1Ed65BMwZ7dmx2w" base_Comment="_O-_7MCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_DlkCo1Ed65BMwZ7dmx2w" base_Comment="_O_BwZyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_GB0Co1Ed65BMwZ7dmx2w" base_Comment="_O_Eztio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_JFICo1Ed65BMwZ7dmx2w" base_Comment="_O_H3Cio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_MIcCo1Ed65BMwZ7dmx2w" base_Comment="_O_K6VSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_PLwCo1Ed65BMwZ7dmx2w" base_Comment="_O_NWlyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O_S2ICo1Ed65BMwZ7dmx2w" base_Comment="_O_RA8Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_UrUCo1Ed65BMwZ7dmx2w" base_Comment="_O_S2ISo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O_YVsCo1Ed65BMwZ7dmx2w" base_Comment="_O_WggCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_bZACo1Ed65BMwZ7dmx2w" base_Comment="_O_Zj1Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O_fDYCo1Ed65BMwZ7dmx2w" base_Comment="_O_dOMCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O_g4kCo1Ed65BMwZ7dmx2w" base_Comment="_O_fDYSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_jU0Co1Ed65BMwZ7dmx2w" base_Comment="_O_hfpyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_m_MCo1Ed65BMwZ7dmx2w" base_Comment="_O_lKACo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O_qpkCo1Ed65BMwZ7dmx2w" base_Comment="_O_o0YCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_O_sewCo1Ed65BMwZ7dmx2w" base_Comment="_O_qpkSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_viECo1Ed65BMwZ7dmx2w" base_Comment="_O_ts6Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_zMcCo1Ed65BMwZ7dmx2w" base_Comment="_O_x-WCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_2PwCo1Ed65BMwZ7dmx2w" base_Comment="_O_1Boyo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_5TECo1Ed65BMwZ7dmx2w" base_Comment="_O_4E9Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O_7vUCo1Ed65BMwZ7dmx2w" base_Comment="_O_6hNio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_O_-LkCo1Ed65BMwZ7dmx2w" base_Comment="_O_89cCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_O__ZsCo1Ed65BMwZ7dmx2w" base_Comment="_O_-LkSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PACdACo1Ed65BMwZ7dmx2w" base_Comment="_PABO4Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PADrICo1Ed65BMwZ7dmx2w" base_Comment="_PACdASo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAFgUCo1Ed65BMwZ7dmx2w" base_Comment="_PAESNCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAH8kCo1Ed65BMwZ7dmx2w" base_Comment="_PAGucCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAJKsCo1Ed65BMwZ7dmx2w" base_Comment="_PAH8kSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PALm8Co1Ed65BMwZ7dmx2w" base_Comment="_PAKY0Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PANcICo1Ed65BMwZ7dmx2w" base_Comment="_PALm8So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PARGgCo1Ed65BMwZ7dmx2w" base_Comment="_PAPRUyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAUJ0Co1Ed65BMwZ7dmx2w" base_Comment="_PAS7sCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PAWmECo1Ed65BMwZ7dmx2w" base_Comment="_PAUw4Co1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAZCUCo1Ed65BMwZ7dmx2w" base_Comment="_PAXNJSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAcssCo1Ed65BMwZ7dmx2w" base_Comment="_PAa3gCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAeh4Co1Ed65BMwZ7dmx2w" base_Comment="_PAcstyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAiMQCo1Ed65BMwZ7dmx2w" base_Comment="_PAgXECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAkogCo1Ed65BMwZ7dmx2w" base_Comment="_PAiMRyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAnr0Co1Ed65BMwZ7dmx2w" base_Comment="_PAmdsCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAqIECo1Ed65BMwZ7dmx2w" base_Comment="_PAoS5Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAtycCo1Ed65BMwZ7dmx2w" base_Comment="_PAr9QCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PAvnoCo1Ed65BMwZ7dmx2w" base_Comment="_PAtydyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PAz5ECo1Ed65BMwZ7dmx2w" base_Comment="_PAyD4Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PA1uQCo1Ed65BMwZ7dmx2w" base_Comment="_PAz5ESo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PA3jcCo1Ed65BMwZ7dmx2w" base_Comment="_PA1uQSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PA7N0Co1Ed65BMwZ7dmx2w" base_Comment="_PA5YoCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PA9DACo1Ed65BMwZ7dmx2w" base_Comment="_PA7N0So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PA_fQCo1Ed65BMwZ7dmx2w" base_Comment="_PA9qGCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBDJoCo1Ed65BMwZ7dmx2w" base_Comment="_PBBUcCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBFl4Co1Ed65BMwZ7dmx2w" base_Comment="_PBDwsio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBIpMCo1Ed65BMwZ7dmx2w" base_Comment="_PBHbECo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBLFcCo1Ed65BMwZ7dmx2w" base_Comment="_PBJQRio1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBOv0Co1Ed65BMwZ7dmx2w" base_Comment="_PBNhsio1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBSaMCo1Ed65BMwZ7dmx2w" base_Comment="_PBQlACo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PBUPYCo1Ed65BMwZ7dmx2w" base_Comment="_PBSaMSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBWEkCo1Ed65BMwZ7dmx2w" base_Comment="_PBUPYSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBZu8Co1Ed65BMwZ7dmx2w" base_Comment="_PBX5wCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PBbkICo1Ed65BMwZ7dmx2w" base_Comment="_PBZu8So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBencCo1Ed65BMwZ7dmx2w" base_Comment="_PBcLOSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBhqwCo1Ed65BMwZ7dmx2w" base_Comment="_PBgcoCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBkHACo1Ed65BMwZ7dmx2w" base_Comment="_PBiR1Co1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBnxYCo1Ed65BMwZ7dmx2w" base_Comment="_PBl8MCo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBpmkCo1Ed65BMwZ7dmx2w" base_Comment="_PBnxZyo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PBtQ8Co1Ed65BMwZ7dmx2w" base_Comment="_PBrbwCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PBvGICo1Ed65BMwZ7dmx2w" base_Comment="_PBtQ8So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PBw7UCo1Ed65BMwZ7dmx2w" base_Comment="_PBvGISo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PB0lsCo1Ed65BMwZ7dmx2w" base_Comment="_PBywgCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PB2a4Co1Ed65BMwZ7dmx2w" base_Comment="_PB0lsSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PB43ICo1Ed65BMwZ7dmx2w" base_Comment="_PB3B9yo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PB8hgCo1Ed65BMwZ7dmx2w" base_Comment="_PB6sUCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PB-WsCo1Ed65BMwZ7dmx2w" base_Comment="_PB8hgSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PCAL4Co1Ed65BMwZ7dmx2w" base_Comment="_PB-WsSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PCD2QCo1Ed65BMwZ7dmx2w" base_Comment="_PCCBECo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PCFrcCo1Ed65BMwZ7dmx2w" base_Comment="_PCD2QSo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PCIuwCo1Ed65BMwZ7dmx2w" base_Comment="_PCG5mCo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PCMZICo1Ed65BMwZ7dmx2w" base_Comment="_PCKj8Co1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PCOOUCo1Ed65BMwZ7dmx2w" base_Comment="_PCMZISo1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PCQDgCo1Ed65BMwZ7dmx2w" base_Comment="_PCOOUSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PCTt4Co1Ed65BMwZ7dmx2w" base_Comment="_PCR4sCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PCVjECo1Ed65BMwZ7dmx2w" base_Comment="_PCTt4So1Ed65BMwZ7dmx2w"/>
  <HDF:Definition xmi:id="_PCZNcCo1Ed65BMwZ7dmx2w" base_Comment="_PCXYQSo1Ed65BMwZ7dmx2w"/>
  <HDF:DesignComments xmi:id="_PCc30Co1Ed65BMwZ7dmx2w" base_Comment="_PCbCoCo1Ed65BMwZ7dmx2w"/>
  <HDF:OtherAnnotation xmi:id="_PCetACo1Ed65BMwZ7dmx2w" base_Comment="_PCc30So1Ed65BMwZ7dmx2w"/>
  <Standard:ModelLibrary xmi:id="_1CzxoCrGEd6fcNpyhmQLTQ" base_Package="_0"/>
</xmi:XMI>
