modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';

modeltype smd 'strict' uses 'http://b2international.com/hl7';

modeltype ecore "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation xhl72uml(in smdModel : smd,in datatypesLibrary : uml, in hdfProfileModel : uml,in rimProfile : uml, out umlModel : uml );

main() {
	
	log('Map HL7 Static Model to UML Package');

	smdModel.rootObjects()[smd::staticmetamodel::HL7StaticModel]-> map toUML();	

}


mapping smd::staticmetamodel::HL7StaticModel::toUML() : uml::Package
{
	
	
	result.name := self.name;

	log('Apply HDF Profile to Package');
	result.applyProfile(hdfProfileModel.rootObjects()![uml::Profile]);
	
	log('Apply RIM  Profile to Package');
	result.applyProfile(rimProfile.rootObjects()![uml::Profile]);
	
	log('Create Datatypes Package Import');
	result.createPackageImport(datatypesLibrary.rootObjects()![uml::Package],VisibilityKind::public);
	
		
	log('Map HL7Class Collection Template Bindings used to UML Class Instances owned by the Package');
	/*
	
	Section will iterate over all HL7 Collection Template Bindings to create UML Class Instances owned by the package bound to HL7 UML Datatype collection template interfaces
	
	The following logic is to mimic a sql select distinct - todo - There must be the equivelant in qvto/ocl
	
	*/
	var collectionTemplates := self.allSubobjects()[smd::datatypemetamodel::HL7GenericDataType]->asSequence()->select(combinedLabel !=  baseType.name );
	
	var collectionTemplatesPosition : Integer := 1;
	
	while (collectionTemplatesPosition <= collectionTemplates->size()) {
	
		/* if we have not already processed the referenced data type - create data type and add it to the package */
		if (result.ownedType->select(name=collectionTemplates->at(collectionTemplatesPosition).combinedLabel)->size() = 0) then
		{
			result.ownedType += collectionTemplates->at(collectionTemplatesPosition)-> map toUMLCollectionClass(result);		
		}
		endif;
	
		collectionTemplatesPosition := collectionTemplatesPosition + 1;
	
	};
	
	
	
	log('Map HL7Class instances to UML Class Instances owned by the Package');
	result.ownedType += self.allSubobjects() [smd::staticmetamodel::HL7Class] -> map toUML(result);
	
	log('Map HL7Association instances to UML Associations owned by the Package');
	result.ownedType += self.allSubobjects() [smd::staticmetamodel::HL7Association] -> map toUML(result);
	
	
	log ('Apply HDF and RIM Stereotypes');
	
	var umlClasses := result.ownedType[uml::Class]->asSequence();

	var classPosition : Integer := 1;
	
	while (classPosition <= umlClasses->size())
	{
		
		var umlClass : uml::Class := umlClasses->at(classPosition);
		
		var hl7classes := self.allSubobjects()[smd::staticmetamodel::HL7Class]->asSequence()->select(name = umlClass.name);
	
	if (hl7classes->size() >= 1) then
	{
		var hl7class : smd::staticmetamodel::HL7Class := hl7classes->at(1);
		
		if (hl7class->derivationParents->size() >= 1) then
		{
			var hl7derivation :=  hl7class->derivationParents->at(1);	
								
			var target := hl7derivation.target;
			
			var targetClass : smd::staticmetamodel::HL7Class := target->oclAsType(smd::staticmetamodel::HL7Class)->asSequence()->at(1);			
			
			var rimstereotype : uml::Stereotype := umlClasses->at(classPosition).getApplicableStereotype('RIM::'+targetClass.name);
			
			log ('Apply RIM::'+targetClass.name + ' Stereotype to UML Class ' + umlClass.qualifiedName);
			
			umlClass.applyStereotype(rimstereotype);		
			
		} endif;
		
		var properties := umlClass.ownedElement[uml::Property]->asSequence();
		
		var propertyPosition : Integer := 1;
	
		while (propertyPosition <= properties->size())
		{
			var umlproperty : uml::Property := properties->at(propertyPosition);

			var hl7Attributes := hl7class.attributes->select(name=umlproperty.name);
		
			var hdfstereotype : uml::Stereotype := null;
				
			if (hl7Attributes->size()>=1) then
			{				
					var hl7Attribute : smd::staticmetamodel::HL7Attribute := hl7Attributes->at(1);
					 
					hdfstereotype := properties->at(propertyPosition).getApplicableStereotype('HDF::HDFAttribute');			
					
					log ('Apply ' + hdfstereotype.qualifiedName + ' Stereotype to UML Property ' + umlproperty.qualifiedName);
				
					umlproperty.applyStereotype(hdfstereotype);
					
					umlproperty.setValue(hdfstereotype,'sortKey',hl7Attribute.sortKey);
					
					umlproperty.setValue(hdfstereotype,'conformance',hl7Attribute.conformance.conformanceKind.repr());
					
					umlproperty.setValue(hdfstereotype,'isMandatory',hl7Attribute.conformance.mandatory.repr());
					
					if (hl7Attribute.vocabularySpecification->size() >= 1) then
					{
						var vocabularyConstraint : smd::vocabularymetamodel::HL7VocabularySpecification := hl7Attribute.vocabularySpecification->asSequence()->at(1);
								
						if (vocabularyConstraint.artifact->size() >= 1) then
						{							
							
								var vocabularyConstraintStereotype : uml::Stereotype := null;
						
						if (vocabularyConstraint.artifact.oclIsTypeOf(smd::vocabularymetamodel::HL7ValueSet)) then
						{
							log ('Apply HDF::ValueSetConstraint Stereotype to UML Property ' + umlproperty.qualifiedName);
							/*
							Missing the following HDF Value Set Constraints Attributes from SMD Vocabulary Model
							VersionDate
							VersionTime
							RevisionFrequency
							MinimunValueSetId
							IgnoreValueSetId
							RootCode							
							*/


							var valueSetConstraint : smd::vocabularymetamodel::HL7ValueSet := vocabularyConstraint.artifact.oclAsType(smd::vocabularymetamodel::HL7ValueSet);

							vocabularyConstraintStereotype := properties->at(propertyPosition).getApplicableStereotype('HDF::ValueSetConstraint');
														
							umlproperty.applyStereotype(vocabularyConstraintStereotype);
							
							umlproperty.setValue(vocabularyConstraintStereotype,'name', valueSetConstraint.name);
							
							umlproperty.setValue(vocabularyConstraintStereotype,'id', valueSetConstraint.id);
							
							/* umlproperty.setValue(vocabularyConstraintStereotype,'codingStrength', vocabularyConstraint.codingStrength); */
							
								
						} endif;

						if (vocabularyConstraint.artifact.oclIsTypeOf(smd::vocabularymetamodel::HL7ConceptDomain)) then
						{
							log ('Apply HDF::ValueSetConstraint Stereotype to UML Property ' + umlproperty.qualifiedName);
							var concepDomainConstraint : smd::vocabularymetamodel::HL7ConceptDomain := vocabularyConstraint.artifact.oclAsType(smd::vocabularymetamodel::HL7ConceptDomain);
							
							vocabularyConstraintStereotype := properties->at(propertyPosition).getApplicableStereotype('HDF::ConceptDomainConstraint');
							
							umlproperty.applyStereotype(vocabularyConstraintStereotype);	
							
							umlproperty.setValue(vocabularyConstraintStereotype,'name', concepDomainConstraint.name);												
							
							
						} endif;
						
						
						if (vocabularyConstraint.artifact.oclIsTypeOf(smd::vocabularymetamodel::HL7Code)) then
						{
							log ('Apply HDF::ValueSetConstraint Stereotype to UML Property ' + umlproperty.qualifiedName);
							/*
							Missing the following HDF Value Set Constraints Attributes from SMD Vocabulary Model
							VersionDate
							
							SMD Vocab has
							codingStrength
							*/							
							var code : smd::vocabularymetamodel::HL7Code := vocabularyConstraint.artifact.oclAsType(smd::vocabularymetamodel::HL7Code);
																
							vocabularyConstraintStereotype := properties->at(propertyPosition).getApplicableStereotype('HDF::CodeSystemConstraint');
							
							umlproperty.applyStereotype(vocabularyConstraintStereotype);
							
							umlproperty.setValue(vocabularyConstraintStereotype,'id', code.getContainingCodeSystem().id);
							
							umlproperty.setValue(vocabularyConstraintStereotype,'name', code.getContainingCodeSystem().name);
									
							umlproperty.setValue(vocabularyConstraintStereotype,'code', code.code);							
							
							umlproperty.setValue(vocabularyConstraintStereotype,'codePrintName', code.printNames![String]);
							
						} endif;
					
						
						
												
						}endif;
					
						
						
						
					} endif;
					
					

			} else
			{
					hdfstereotype  := properties->at(propertyPosition).getApplicableStereotype('HDF::HDFAssociationEnd');
					
					log ('Apply ' + hdfstereotype.qualifiedName + ' Stereotype to UML Property ' + umlproperty.qualifiedName);
				
					umlproperty.applyStereotype(hdfstereotype);
					
			} endif;
				

						
/*			umlproperty.setValue(hdfstereotype,'businessNames[0]::name','nametest');
			
			umlproperty.setValue(hdfstereotype,'businessNames[0]::language','languagetest');
*/						
			propertyPosition := propertyPosition + 1;
	};
	
		
	} endif;

		classPosition := classPosition + 1;
	};
	

			
}

// Create Class owned by the package with template bindings to data type interface

	/*
	Steps for collectiona 
	Create the Classifier
	set name
	set abstraction
	
	todo - apply stereotypes
	
	set alias
	
	set visibility
	
	add TemplateSignature
	
	add ClassifierTemplateParameter for each hl7 datatype parameter
	
	set constraint for paramater
	
	set defaulttype
	

	*/
mapping smd::datatypemetamodel::HL7GenericDataType::toUMLCollectionClass(in currentPackage:uml::Package) : uml::Class
{
	name := self.combinedLabel;
	
	result.templateBinding += self->map toTemplateableElement(currentPackage);
	
	result.eAnnotations += object EAnnotation 
	{
	 details += object EStringToStringMapEntry 
	 {
	 key := 'uml2.alias';
	 value := self.baseType.title;	 
	 };	 
	};
	
	// set visibility - is there qvt switch statement?  default to public if not private or protected	
	if (self.baseType.visibility = smd::datatypemetamodel::HL7DataTypeVisibility::private) then {
		result.visibility := VisibilityKind::private; 
	} else {
		if (self.baseType.visibility = smd::datatypemetamodel::HL7DataTypeVisibility::protected) then {
			result.visibility := VisibilityKind::protected; 
		} else {
			result.visibility := VisibilityKind::public; 	
		} endif;
	} endif;
	
}


mapping smd::datatypemetamodel::HL7GenericDataType::toTemplateableElement(in currentPackage:uml::Package) : uml::TemplateBinding
{
	
	// Get data type name - thought there should be the equivelant to combined label for the base datatypes
	var umlCollectionInterface : String := self.baseType.name+'<';
	
	var pos : Integer := 1;
	while (pos <= self.baseType.parameters->size())
	{	
		umlCollectionInterface := umlCollectionInterface + self.baseType.parameters->at(pos).name ;
		pos := pos + 1;		
	};
	
    umlCollectionInterface := umlCollectionInterface + '>';

	log('Creating UML Collection Interface ' + umlCollectionInterface );


	var results : Sequence(uml::Interface) := currentPackage.importedMember[uml::Interface]->asSequence()->select(name = umlCollectionInterface );
		
	var actualSubstitution : Sequence(uml::Interface) := currentPackage.importedMember[uml::Interface]->asSequence()->select(name = self.argumentBaseType.name);
		
	if (results->size() = 1) then
	{	
		
		
		result.signature := results->at(1).templateBinding->asSequence()->at(1).signature;
		
		result.parameterSubstitution += object TemplateParameterSubstitution
		{
			formal := result.signature.ownedParameter->asSequence()->at(1);
			actual := actualSubstitution->asSequence()->at(1);
		}
		
		
		
		
	} endif;
	
	 
}






mapping smd::staticmetamodel::HL7Class::toUML(in currentPackage:uml::Package) : uml::Class
{
	
	result.name := self.name;	

	log ('Mapping HL7Class Definition ' + self.name );
	
	result.ownedAttribute += self.allSubobjects() [smd::staticmetamodel::HL7Attribute] -> map toUMLHL7Datatype (currentPackage);
	
	result.ownedAttribute += self.allSubobjects() [smd::staticmetamodel::HL7Attribute] -> map toUMLHL7Template (currentPackage);
					
}


mapping smd::staticmetamodel::HL7Attribute::toUMLHL7Datatype(in currentPackage:uml::Package) : uml::Property when { self.type.combinedLabel =  self.type.baseType.name }
{
	log('Mapping NonTemplated HL7Attribute Definition ' + self.type.combinedLabel + ' : ' + self.name);
	
	result.name := self.name;
	
	var results := currentPackage.importedMember[uml::Interface]->asSequence()->select(name = self.type.combinedLabel );
	
	var pos : Integer := 1;
	
	while(pos <= results->size())
	{
		result.type := results->at(pos);
		pos := pos + 1;
	} ;
	
}



mapping smd::staticmetamodel::HL7Attribute::toUMLHL7Template (in currentPackage:uml::Package) : uml::Property when { self.type.combinedLabel !=  self.type.baseType.name }
{	
	
	log('Mapping Templated HL7Attribute Definition ' + self.type.combinedLabel + ' : ' + self.name);
	
	result.name := self.name;
	
	var results := currentPackage.ownedType[uml::Class]->asSequence()->select(name = self.type.combinedLabel );
	
	var pos : Integer := 1;
	
	if (results->size() = 1) then
	{
		result.type := results->at(1);
	} endif;
	
}

mapping smd::staticmetamodel::HL7Association::toUML(in currentPackage:uml::Package) : uml::Association
{
	log('Mapping HL7Association Definition ' + self.sourceClass.name + ' to ' + self.targetClass.name);
	
	
	/*
	1 Create non travesrable property - no name
	2 create traversable property - has name
	3 create association
	4 set association of property to create association
	5 add properties to classes 
	
	*/
	var properties : Sequence(uml::Property) := null;
	
	properties  += self.associationEnds->map ownedEnd(currentPackage);
	
	properties  += self.associationEnds->map memberEnd(currentPackage);
	
	var pos : Integer := 1;

	while(pos <= properties->size())
	{
		var umlPropery : uml::Property := properties->at(pos); 

		umlPropery.owningAssociation := result;

		pos := pos + 1;
		
	};
	
	pos:= 1;
 while(pos <= properties->size())
	{
		var umlPropery : uml::Property := properties->at(pos); 
		umlPropery.owningAssociation := result;
		
		if (umlPropery.name != null) then
		{
			umlPropery.setIsNavigable(true);
			
			var ownerClass := umlPropery.getOtherEnd().type.oclAsType(uml::Class);
			
			if (ownerClass != null) then
			{			
				ownerClass.ownedAttribute += umlPropery;
			} 
			endif;
		} else
		{
			umlPropery.setIsNavigable(false);
		}endif;
		
		pos := pos + 1;
		
	};
	
	
		
}

mapping smd::staticmetamodel::HL7AssociationEnd::ownedEnd(in currentPackage:uml::Package): uml::Property    when { self.name = '' }
{	


	result.lowerValue = 1;
	
	result.upperValue = 1;

	if (self.conformance != null) then {
		if (self.conformance.lowerBound != null) then {
			result.lowerValue = self.conformance.lowerBound;
		}endif;		
	} endif;

	if (self.conformance != null) then {
		if (self.conformance.upperBound != null) then {
			result.upperValue = self.conformance.upperBound;
		}endif;		
	} endif;
		
	var results := currentPackage.ownedElement[uml::Class]->asSequence()->select(name = self.connectedClass.name );
	
	if (results->size() > 0) then {
		result.type := results->at(1);
	} endif;	
	
	
}

mapping smd::staticmetamodel::HL7AssociationEnd::memberEnd(in currentPackage:uml::Package): uml::Property   when { self.name != '' }
{
	

	result.name := self.name;
	
	result.lowerValue = 1;
	
	result.upperValue = 1;

	if (self.conformance != null) then {
		if (self.conformance.lowerBound != null) then {
			result.lowerValue = self.conformance.lowerBound;
		}endif;		
	} endif;

	if (self.conformance != null) then {
		if (self.conformance.upperBound != null) then {
			result.upperValue = self.conformance.upperBound;
		}endif;		
	} endif;

	result.setIsNavigable(true);
	
	var results := currentPackage.ownedElement[uml::Class]->asSequence()->select(name = self.connectedClass.name ); 
	
	if (results->size() > 0) then {
		result.type := results->at(1);
	} endif;
	
}




	
	