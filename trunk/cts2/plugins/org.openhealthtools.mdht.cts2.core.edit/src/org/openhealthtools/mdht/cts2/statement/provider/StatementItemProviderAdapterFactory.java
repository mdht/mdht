/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openhealthtools.mdht.cts2.statement.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.openhealthtools.mdht.cts2.statement.util.StatementAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class StatementItemProviderAdapterFactory extends StatementAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public StatementItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementDirectory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementDirectoryItemProvider statementDirectoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementDirectory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementDirectoryAdapter() {
		if (statementDirectoryItemProvider == null) {
			statementDirectoryItemProvider = new StatementDirectoryItemProvider(this);
		}

		return statementDirectoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementDirectoryEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementDirectoryEntryItemProvider statementDirectoryEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementDirectoryEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementDirectoryEntryAdapter() {
		if (statementDirectoryEntryItemProvider == null) {
			statementDirectoryEntryItemProvider = new StatementDirectoryEntryItemProvider(this);
		}

		return statementDirectoryEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementListItemProvider statementListItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementListAdapter() {
		if (statementListItemProvider == null) {
			statementListItemProvider = new StatementListItemProvider(this);
		}

		return statementListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementListEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementListEntryItemProvider statementListEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementListEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementListEntryAdapter() {
		if (statementListEntryItemProvider == null) {
			statementListEntryItemProvider = new StatementListEntryItemProvider(this);
		}

		return statementListEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementMsg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementMsgItemProvider statementMsgItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementMsgAdapter() {
		if (statementMsgItemProvider == null) {
			statementMsgItemProvider = new StatementMsgItemProvider(this);
		}

		return statementMsgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementQualifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementQualifierItemProvider statementQualifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementQualifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementQualifierAdapter() {
		if (statementQualifierItemProvider == null) {
			statementQualifierItemProvider = new StatementQualifierItemProvider(this);
		}

		return statementQualifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.statement.StatementSubject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StatementSubjectItemProvider statementSubjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.statement.StatementSubject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStatementSubjectAdapter() {
		if (statementSubjectItemProvider == null) {
			statementSubjectItemProvider = new StatementSubjectItemProvider(this);
		}

		return statementSubjectItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null
				? this
				: parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (documentRootItemProvider != null) {
			documentRootItemProvider.dispose();
		}
		if (statementItemProvider != null) {
			statementItemProvider.dispose();
		}
		if (statementDirectoryItemProvider != null) {
			statementDirectoryItemProvider.dispose();
		}
		if (statementDirectoryEntryItemProvider != null) {
			statementDirectoryEntryItemProvider.dispose();
		}
		if (statementListItemProvider != null) {
			statementListItemProvider.dispose();
		}
		if (statementListEntryItemProvider != null) {
			statementListEntryItemProvider.dispose();
		}
		if (statementMsgItemProvider != null) {
			statementMsgItemProvider.dispose();
		}
		if (statementQualifierItemProvider != null) {
			statementQualifierItemProvider.dispose();
		}
		if (statementSubjectItemProvider != null) {
			statementSubjectItemProvider.dispose();
		}
	}

}
