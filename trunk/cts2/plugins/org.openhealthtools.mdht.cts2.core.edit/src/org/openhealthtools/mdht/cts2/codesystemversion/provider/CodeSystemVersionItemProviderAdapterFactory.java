/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openhealthtools.mdht.cts2.codesystemversion.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.openhealthtools.mdht.cts2.codesystemversion.util.CodeSystemVersionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class CodeSystemVersionItemProviderAdapterFactory extends CodeSystemVersionAdapterFactory implements
		ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public CodeSystemVersionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntry}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntryItemProvider codeSystemVersionCatalogEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntryAdapter() {
		if (codeSystemVersionCatalogEntryItemProvider == null) {
			codeSystemVersionCatalogEntryItemProvider = new CodeSystemVersionCatalogEntryItemProvider(this);
		}

		return codeSystemVersionCatalogEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryDirectory}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntryDirectoryItemProvider codeSystemVersionCatalogEntryDirectoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryDirectory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntryDirectoryAdapter() {
		if (codeSystemVersionCatalogEntryDirectoryItemProvider == null) {
			codeSystemVersionCatalogEntryDirectoryItemProvider = new CodeSystemVersionCatalogEntryDirectoryItemProvider(
				this);
		}

		return codeSystemVersionCatalogEntryDirectoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryList}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntryListItemProvider codeSystemVersionCatalogEntryListItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntryListAdapter() {
		if (codeSystemVersionCatalogEntryListItemProvider == null) {
			codeSystemVersionCatalogEntryListItemProvider = new CodeSystemVersionCatalogEntryListItemProvider(this);
		}

		return codeSystemVersionCatalogEntryListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryListEntry}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntryListEntryItemProvider codeSystemVersionCatalogEntryListEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryListEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntryListEntryAdapter() {
		if (codeSystemVersionCatalogEntryListEntryItemProvider == null) {
			codeSystemVersionCatalogEntryListEntryItemProvider = new CodeSystemVersionCatalogEntryListEntryItemProvider(
				this);
		}

		return codeSystemVersionCatalogEntryListEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryMsg}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntryMsgItemProvider codeSystemVersionCatalogEntryMsgItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntryMsg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntryMsgAdapter() {
		if (codeSystemVersionCatalogEntryMsgItemProvider == null) {
			codeSystemVersionCatalogEntryMsgItemProvider = new CodeSystemVersionCatalogEntryMsgItemProvider(this);
		}

		return codeSystemVersionCatalogEntryMsgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntrySummary}
	 * instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CodeSystemVersionCatalogEntrySummaryItemProvider codeSystemVersionCatalogEntrySummaryItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.CodeSystemVersionCatalogEntrySummary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCodeSystemVersionCatalogEntrySummaryAdapter() {
		if (codeSystemVersionCatalogEntrySummaryItemProvider == null) {
			codeSystemVersionCatalogEntrySummaryItemProvider = new CodeSystemVersionCatalogEntrySummaryItemProvider(
				this);
		}

		return codeSystemVersionCatalogEntrySummaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.openhealthtools.mdht.cts2.codesystemversion.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.openhealthtools.mdht.cts2.codesystemversion.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null
				? this
				: parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (codeSystemVersionCatalogEntryItemProvider != null) {
			codeSystemVersionCatalogEntryItemProvider.dispose();
		}
		if (codeSystemVersionCatalogEntryDirectoryItemProvider != null) {
			codeSystemVersionCatalogEntryDirectoryItemProvider.dispose();
		}
		if (codeSystemVersionCatalogEntryListItemProvider != null) {
			codeSystemVersionCatalogEntryListItemProvider.dispose();
		}
		if (codeSystemVersionCatalogEntryListEntryItemProvider != null) {
			codeSystemVersionCatalogEntryListEntryItemProvider.dispose();
		}
		if (codeSystemVersionCatalogEntryMsgItemProvider != null) {
			codeSystemVersionCatalogEntryMsgItemProvider.dispose();
		}
		if (codeSystemVersionCatalogEntrySummaryItemProvider != null) {
			codeSystemVersionCatalogEntrySummaryItemProvider.dispose();
		}
		if (documentRootItemProvider != null) {
			documentRootItemProvider.dispose();
		}
	}

}
